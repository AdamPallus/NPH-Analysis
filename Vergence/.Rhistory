nfiles<-length(files)
if (nfiles>0){
message(c('New Files: ',files))
loadedfiles <- lapply(paste(path,files,sep=''),read.csv,sep='\t',header=FALSE)
t<-data.frame()
temp<- NULL
# t.old<-NULL
for (i in 1:nfiles) {
f<- files[i]
message(paste('Loading:',f))
# temp[[i]]=loadedfiles[[i]]
names<-str_match(f,"(^[a-zA-Z]+)-([0-9]+)")
loadedfiles[[i]]$block<-names[1]
loadedfiles[[i]]$subject<-names[2]
loadedfiles[[i]]$blocknum<-as.numeric(names[3])
}
t <-rbindlist(loadedfiles)
# t<- dplyr::select(t, -thp,-tvp,-time)
}else{
message('********NO NEW DATA********')
t<-NULL
}
return(t)
}
samplerate<- 304.7508/1000
# path<- "C:/Users/User/Documents/GitHub/NPH-Analysis/Vergence/kdata/"
path<-"C:/Users/setup/Desktop/NRTP Vergence/kdata/"
h<- loadnewheadfree(NULL,path)
# h<- read.csv('HEADFREE.txt',sep="\t",header=FALSE)
h<- select(h,-V9)
names(h)<- c('G','GV','H','HV','E','EV','time','T','block','subject','blocknum')
h %>%
# filter(block=='A-02')%>%
select(G,H,T,block) %>% #these are the only data we need
group_by(block) %>%
mutate(G=replace(G,G==0,NA), #mark missing data as NA rather than 0
#G=na.approx(G,na.rm=FALSE),
time=row_number(),
Gv=parabolicdiff(G,7)*samplerate, #calculate velocity
Hv=parabolicdiff(H,7)*samplerate,
target.velocity=parabolicdiff(T,7)*samplerate,
# gazeshifts=markSaccades(Gv,buffer=5,threshold=30),
gazeshifts=markSaccadesDouble(Gv,threshold1=100,threshold2=10),
headmovement=markSaccadesDouble(Hv,threshold1=10,threshold2=4),
#algorithm marks non-movements (fixations) as negative so remove them
headmovement=replace(headmovement,headmovement<0,0),
gazeshifts=replace(gazeshifts,gazeshifts<0,0)) ->
htesta
htesta%>%
# filter(block=='A-02')%>%
group_by(block) %>%
#identify movements and mark 200ms before and 500ms after each movement as "sacnum"
do(markTagetMovements(t=.,buffer=200,threshold=200,saccade.length=500)) ->
htest
htest%>%
filter(!is.na(sacnum))%>% #get rid of all data that isn't part of the marked target movement periods
group_by(block,sacnum) %>% #look at each target movement individually
#time of first gaze shift - we want to ignore gaze shifts that start before the target actually moved
mutate(firstshift=min(gazeshifts[counter>220&gazeshifts>0],na.rm=T),
firsthead=min(headmovement[counter>220&headmovement>0],na.rm=T),
primarygazeshifts=replace(gazeshifts,
gazeshifts!=firstshift|is.na(firstshift),
0), #the first "eye saccade" we're calling the primary gaze shift
primaryheadmovement=replace(headmovement,
headmovement!=firsthead|is.na(firsthead),
0),
#for easier analysis/plotting, use NA rather than 0 for non-movements
gazeshifts=replace(gazeshifts,gazeshifts==0,NA),
primarygazeshifts=replace(primarygazeshifts,primarygazeshifts==0,NA),
headmovement=replace(headmovement,headmovement==0,NA),
primaryheadmovement=replace(primaryheadmovement,primaryheadmovement==0,NA),
counter=counter-200)->
hh
#this block just gets rid of all trials where there is no detected gaze shift
#I did this as a separate block to avoid errors in the larger measurement
hh %>%
# filter(sacnum==10)%>%
group_by(block,sacnum) %>%
mutate(gaze.dur=length(counter[!is.na(gazeshifts)])) %>%
ungroup() %>%
filter(gaze.dur>1) ->
hint
hint%>%
group_by(block,sacnum)%>%
#We're going to measure the trial now and just report the measurements in the data frame "hp"
summarize(blinktrial=any(is.na(G[counter>0&counter<300])),
gaze.onset=counter[!is.na(primarygazeshifts)][1],
gaze.offset=max(counter[!is.na(primarygazeshifts)]),
total.gaze.offset=max(counter[!is.na(gazeshifts)]),
gaze.dur=gaze.offset-gaze.onset,
gaze.dur.ms=gaze.dur/samplerate,
gaze.amp=G[counter==gaze.offset]-G[counter==gaze.onset],
total.gaze.amp=G[counter==total.gaze.offset]-G[counter==gaze.onset],
IHP=H[counter==gaze.onset],
IGP=G[counter==gaze.onset],
IEP=IGP-IHP,
IEPs=IEP*sign(gaze.amp), #positive number indicates eyes deviated in direction of saccade
peak.gaze.velocity=maxabs(Gv[!is.na(gazeshifts)]),
peak.head.velocity=maxabs(Hv[100:n()]),
target.amp=T[300]-T[1],
head.contribution=H[counter==gaze.offset]-IHP,
eye.contribution=gaze.amp-head.contribution
) %>%
#junk any trials where there is no gaze shift within 200 samples (~650ms) of target movement
filter(gaze.onset>0,gaze.onset<200)->
hp
hh <- left_join(hh,hp) #add mesurements back to original data file
plotTrial<- function(hh){
# cat(hh$blinktrial[1])
gp<- ggplot(hh)+
geom_line(aes(counter,H),color='blue')+
# geom_line(aes(counter,Ef),color='red')+
geom_line(aes(counter,G),color='darkgreen')+
geom_line(aes(counter,T),size=2,alpha=0.5)+
geom_line(aes(counter,Hv/10),color='blue',linetype=2)+
# geom_line(aes(counter,EV/10),color='red')+
geom_line(aes(counter,Gv/10),color='darkgreen',linetype=2)+
# geom_text(x=0,y=50,aes(label=round(sd(Gv),2)))+
geom_point(aes(counter,sign(gazeshifts)*50),color='darkgreen')+
geom_point(aes(counter,sign(headmovement)*25),color='blue')+
geom_line(aes(counter,sign(primarygazeshifts)*Gv/10),size=2,color='darkgreen',alpha=0.5)+
# geom_line(aes(counter,sign(gazeshifts)*Gv/10),size=2,color='yellow',alpha=0.5)+
geom_line(aes(counter,sign(primaryheadmovement)*Hv/10),color='blue',size=2,alpha=0.5)
# geom_line(aes(counter,sign(headmovement)*Hv/10),color='blue',size=2,alpha=0.5)+
blink<- hh$blinktrial[1]
if(blink | is.na(blink)){
gp<-gp+geom_label(x=0,y=0,label='BLINK INTERRUPTED')
}
gp
}
plotTrial(filter(hh,sacnum==31,block=='A-01'))
saveRDS(hh,'knightdemo2.RDS')
library(manipulate)
manipulate(plotTrial(filter(hh,sacnum==trialchoice,block==blockchoice)),
trialchoice=slider(1,max = max(hh$sacnum),step=1),
blockchoice=picker('A-01','A-02'))
htest%>%
filter(!is.na(sacnum))%>% #get rid of all data that isn't part of the marked target movement periods
group_by(block,sacnum) %>% #look at each target movement individually
#time of first gaze shift - we want to ignore gaze shifts that start before the target actually moved
mutate(firstshift=min(gazeshifts[counter>220&gazeshifts>0],na.rm=T),
firsthead=min(headmovement[counter>220&headmovement>0],na.rm=T),
primarygazeshifts=replace(gazeshifts,
gazeshifts!=firstshift|is.na(firstshift),
0), #the first "eye saccade" we're calling the primary gaze shift
primaryheadmovement=replace(headmovement,
headmovement!=firsthead|is.na(firsthead),
0),
#for easier analysis/plotting, use NA rather than 0 for non-movements
gazeshifts=replace(gazeshifts,gazeshifts==0,NA),
primarygazeshifts=replace(primarygazeshifts,primarygazeshifts==0,NA),
headmovement=replace(headmovement,headmovement==0,NA),
primaryheadmovement=replace(primaryheadmovement,primaryheadmovement==0,NA),
counter=counter-200,
tcounter=round(counter/samplerate))->
hh
#this block just gets rid of all trials where there is no detected gaze shift
#I did this as a separate block to avoid errors in the larger measurement
hh %>%
# filter(sacnum==10)%>%
group_by(block,sacnum) %>%
mutate(gaze.dur=length(counter[!is.na(gazeshifts)])) %>%
ungroup() %>%
filter(gaze.dur>1) ->
hint
hint%>%
group_by(block,sacnum)%>%
#We're going to measure the trial now and just report the measurements in the data frame "hp"
summarize(blinktrial=any(is.na(G[counter>0&counter<300])),
gaze.onset=counter[!is.na(primarygazeshifts)][1],
gaze.offset=max(counter[!is.na(primarygazeshifts)]),
total.gaze.offset=max(counter[!is.na(gazeshifts)]),
gaze.dur=gaze.offset-gaze.onset,
gaze.dur.ms=gaze.dur/samplerate,
gaze.amp=G[counter==gaze.offset]-G[counter==gaze.onset],
total.gaze.amp=G[counter==total.gaze.offset]-G[counter==gaze.onset],
IHP=H[counter==gaze.onset],
IGP=G[counter==gaze.onset],
IEP=IGP-IHP,
IEPs=IEP*sign(gaze.amp), #positive number indicates eyes deviated in direction of saccade
peak.gaze.velocity=maxabs(Gv[!is.na(gazeshifts)]),
peak.head.velocity=maxabs(Hv[100:n()]),
target.amp=T[300]-T[1],
head.contribution=H[counter==gaze.offset]-IHP,
eye.contribution=gaze.amp-head.contribution
) %>%
#junk any trials where there is no gaze shift within 200 samples (~650ms) of target movement
filter(gaze.onset>0,gaze.onset<200)->
hp
hh <- left_join(hh,hp) #add mesurements back to original data file
plotTrial<- function(hh){
# cat(hh$blinktrial[1])
gp<- ggplot(hh)+
geom_line(aes(tcounter,H),color='blue')+
# geom_line(aes(tcounter,Ef),color='red')+
geom_line(aes(tcounter,G),color='darkgreen')+
geom_line(aes(tcounter,T),size=2,alpha=0.5)+
geom_line(aes(tcounter,Hv/10),color='blue',linetype=2)+
# geom_line(aes(tcounter,EV/10),color='red')+
geom_line(aes(tcounter,Gv/10),color='darkgreen',linetype=2)+
# geom_text(x=0,y=50,aes(label=round(sd(Gv),2)))+
geom_point(aes(tcounter,sign(gazeshifts)*50),color='darkgreen')+
geom_point(aes(tcounter,sign(headmovement)*25),color='blue')+
geom_line(aes(tcounter,sign(primarygazeshifts)*Gv/10),size=2,color='darkgreen',alpha=0.5)+
# geom_line(aes(tcounter,sign(gazeshifts)*Gv/10),size=2,color='yellow',alpha=0.5)+
geom_line(aes(tcounter,sign(primaryheadmovement)*Hv/10),color='blue',size=2,alpha=0.5)+
xlab('Time (ms)')+
# geom_line(aes(tcounter,sign(headmovement)*Hv/10),color='blue',size=2,alpha=0.5)+
blink<- hh$blinktrial[1]
if(blink | is.na(blink)){
gp<-gp+geom_label(x=0,y=0,label='BLINK INTERRUPTED')
}
gp
}
plotTrial(filter(hh,sacnum==31,block=='A-01'))
plotTrial<- function(hh){
# cat(hh$blinktrial[1])
gp<- ggplot(hh)+
geom_line(aes(tcounter,H),color='blue')+
# geom_line(aes(tcounter,Ef),color='red')+
geom_line(aes(tcounter,G),color='darkgreen')+
geom_line(aes(tcounter,T),size=2,alpha=0.5)+
geom_line(aes(tcounter,Hv/10),color='blue',linetype=2)+
# geom_line(aes(tcounter,EV/10),color='red')+
geom_line(aes(tcounter,Gv/10),color='darkgreen',linetype=2)+
# geom_text(x=0,y=50,aes(label=round(sd(Gv),2)))+
geom_point(aes(tcounter,sign(gazeshifts)*50),color='darkgreen')+
geom_point(aes(tcounter,sign(headmovement)*25),color='blue')+
geom_line(aes(tcounter,sign(primarygazeshifts)*Gv/10),size=2,color='darkgreen',alpha=0.5)+
# geom_line(aes(tcounter,sign(gazeshifts)*Gv/10),size=2,color='yellow',alpha=0.5)+
geom_line(aes(tcounter,sign(primaryheadmovement)*Hv/10),color='blue',size=2,alpha=0.5)+
xlab('Time (ms)')
# geom_line(aes(tcounter,sign(headmovement)*Hv/10),color='blue',size=2,alpha=0.5)+
blink<- hh$blinktrial[1]
if(blink | is.na(blink)){
gp<-gp+geom_label(x=0,y=0,label='BLINK INTERRUPTED')
}
gp
}
plotTrial(filter(hh,sacnum==31,block=='A-01'))
manipulate(plotTrial(filter(hh,sacnum==trialchoice,block==blockchoice)),
trialchoice=slider(1,max = max(hh$sacnum),step=1),
blockchoice=picker('A-01','A-02'))
ggsave(hh,'knightdemo2.RDS')
saveRDS(hh,'knightdemo2.RDS')
300/0.03
300/0.3
?tab_panel
library(shiny)
?tabPanel
t %>% group_by(neuron) %>%
do(joinsaccadesuniform(.,buffer=50,threshold=30))->
ts
library(ggplot2)
library(dplyr)
library(knitr)
library(tidyr)
library(broom)
# library(grid)
library(relaimpo)
library(leaps)
library(stringr)
library(cladoRcpp)
library(boot)
source('Adamhelperfunctions.R')
select<- dplyr::select
t %>% group_by(neuron) %>%
do(joinsaccadesuniform(.,buffer=50,threshold=30))->
ts
t %>% group_by(neuron) %>%
do(joinsaccadesuniform(.,buffer=50,threshold=30))->
ts
head9t
head(t)
library(ggplot2)
library(dplyr)
library(knitr)
library(tidyr)
library(broom)
# library(grid)
library(relaimpo)
library(leaps)
library(stringr)
library(cladoRcpp)
# library(boot)
source('Adamhelperfunctions.R')
select<- dplyr::select
t<- readRDS('INCsaccadesmarked.RDS')
names(t)
t %>%
group_by(neuron)%>%
mutate(time=row_number()) %>%
filter(dsnum>0) %>% #saccades
group_by(neuron,dsnum) %>%
summarize(sd.conj.velocity=sd(conj.velocity),
mean.conj.velocity=mean(conj.velocity),
sd.verg.velocity=sd(verg.velocity),
spread=max(conj.velocity)-min(conj.velocity),
qrange=quantile(conj.velocity,0.975)-quantile(conj.velocity,0.025),
dur=n(),
R.H.Amp=last(rep)-first(rep),
R.V.Amp=last(repV)-first(repV),
L.H.Amp=last(lep)-first(lep),
L.V.Amp=last(lepV)-first(lepV),
conj.H.Amp=(R.H.Amp+L.H.Amp)/2,
conj.V.Amp=(R.V.Amp+L.V.Amp)/2,
peak.conj.velocity=maxabs(conj.velocity),
nspk=sum(rasters),
r.amp=sqrt(conj.H.Amp^2+conj.V.Amp^2),
asleep=sd.conj.velocity>7.5 || dur>2000) %>%
ungroup() %>%
mutate(sacID=row_number())->
zsp
t<- left_join(t,select(zsp,neuron,dsnum,sacID),by=c('neuron','dsnum'))
qplot(dur,sd.verg.velocity,data=zsp)
goodsacs=filter(zsp,R.V.Amp*L.V.Amp<0,r.amp>4,dur<200)$sacID
manipulate({
d<- filter(t,sacID==goodsacs[chosenSac])
ggplot(d)+
geom_line(aes(time,conj.velocity))+
geom_line(aes(time,rev),color='red')+
geom_line(aes(time,lev),color='blue')+
geom_line(aes(time,revV),color='red',linetype=2)+
geom_line(aes(time,levV),color='blue',linetype=2)+
geom_point(aes(time,rasters+100),data=filter(d,rasters>0),shape='|',size=4)
# ggplot(d)+
# geom_point(aes(rep,repV,alpha=sdf/300),color='red')+
# geom_point(aes(lep,lepV,alpha=sdf/300),color='blue')+
# geom_point(aes((lep+rep)/2,(lepV+repV)/2,alpha=sdf/300))+
# xlim(c(-20,20))+
# ylim(c(-20,20))
},
chosenSac=slider(1,length(goodsacs),step=1)
)
burst <- filter(zsp,dur<150)
burst %>%
group_by(neuron) %>%
summarize(cor.up=cor(conj.V.Amp[conj.V.Amp>0],nspk[conj.V.Amp>0]),
cor.down=cor(conj.V.Amp[conj.V.Amp<0],nspk[conj.V.Amp<0]),
cor.right=cor(conj.H.Amp[conj.H.Amp>0],nspk[conj.H.Amp>0]),
cor.left=cor(conj.H.Amp[conj.H.Amp<0],nspk[conj.H.Amp<0]))%>%
separate(neuron,c('monkey','cellnum'),remove=FALSE)->
bs
burst %>%
group_by(neuron) %>%
do(tidy(lm(nspk~conj.V.Amp+conj.H.Amp,data=.))) %>%
mutate(term=replace(term,term=='(Intercept)','b')) %>%
select(term,estimate) %>%
spread(term,estimate) %>%
separate(neuron,c('monkey','cellnum'),remove=FALSE)->
blm
ggplot(blm)+
geom_histogram(aes(conj.H.Amp,fill=monkey),position='dodge')
ggplot(blm)+
geom_density(aes(conj.V.Amp,color=monkey))
zp %>%
select(neuron,mean.V,meanFR,mean.H,cor.pref.V,cor.pref.H) %>%
group_by(neuron) %>%
summarize_each(funs(first))->
zplot
ggplot(blm)+
geom_histogram(aes(conj.H.Amp,fill=monkey),position='dodge')
ggplot(blm)+
geom_density(aes(conj.V.Amp,color=monkey))
ggplot(blm)+
geom_density(aes(conj.H.Amp,color=monkey))
summary(t.test(conj.H.Amp~monkey,data=blm))
summary(aov(conj.H.Amp~monkey,data=blm))
blm %>%
geom_point(aes(conj.H.Amp,conj.V.Amp,color=monkey))+
geom_abline()
blm %>%
ggplot()+
geom_point(aes(conj.H.Amp,conj.V.Amp,color=monkey))+
geom_abline()
blm %>%
ggplot()+
geom_point(aes(abs(conj.H.Amp),abs(conj.V.Amp),color=monkey))+
geom_abline()
names(blm)
filter(blm,abs(conj.H.Amp)>0.2)
2e-5
?to_categorical
?application_vgg16
conv_base <- application_vgg16(
weights = "imagenet",
include_top = FALSE,
input_shape = c(150, 150, 3)
)
summary(conv_base)
model <- keras_model_sequential() %>%
conv_base %>%
layer_flatten() %>%
layer_dense(units = 256, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
summary(model)
length(model$trainable_weights)
freeze_weights(conv_base)
length(model$trainable_weights)
summary(model)
?image_data_generator
?imagenet_preprocess_input
?predict
?keras::predict
??predict
plot_prediction<-function(img_path){
img <- image_load(img_path, target_size = c(150,150))
x <- image_to_array(img)
# ensure we have a 4d tensor with single element in the batch dimension,
# the preprocess the input for prediction using resnet50
x <- array_reshape(x, c(1, dim(x)))
x <- imagenet_preprocess_input(x)
# make predictions then decode and print them
preds <- model %>% predict(x)
mystery<- image_read(img_path)
if(preds[1]==1){
pred_text='DOG'
# cat('THIS IS A DOG')
# plot(as.raster(image_to_array(img)/255))
} else{
pred_text='CAT'
# cat('It must be a cat')
# plot(as.raster(image_to_array(img)/255))
}
image_annotate(mystery,pred_text,size=70)
}
plot_prediction('mystery2.jpg')
plot_prediction('C:/Users/setup/Desktop/DeepLearning/mystery2.jpg')
library(magick)
img<-image_load(Users/setup/Desktop/DeepLearning/mystery2.jpg')
img<-image_load('Users/setup/Desktop/DeepLearning/mystery2.jpg')
img<-image_load('C:/Users/setup/Desktop/DeepLearning/mystery2.jpg')
x <- image_to_array(img)
# ensure we have a 4d tensor with single element in the batch dimension,
# the preprocess the input for prediction using resnet50
x <- array_reshape(x, c(1, dim(x)))
x <- imagenet_preprocess_input(x)
# make predictions then decode and print them
preds <- model %>% predict(x)
conv_base <- application_vgg16(
weights = "imagenet",
include_top = FALSE,
input_shape = c(150, 150, 3)
)
model <- keras_model_sequential() %>%
conv_base %>%
layer_flatten() %>%
layer_dense(units = 256, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
freeze_weights(conv_base)
model %>% compile(
loss = "binary_crossentropy",
optimizer = optimizer_rmsprop(lr = 2e-5),
metrics = c("accuracy")
)
# make predictions then decode and print them
preds <- model %>% predict(x)
img<-image_load('C:/Users/setup/Desktop/DeepLearning/mystery2.jpg',target_size=c(150,150))
x <- image_to_array(img)
# ensure we have a 4d tensor with single element in the batch dimension,
# the preprocess the input for prediction using resnet50
x <- array_reshape(x, c(1, dim(x)))
x <- imagenet_preprocess_input(x)
# make predictions then decode and print them
preds <- model %>% predict(x)
preds
preds[1]
mystery<- image_read(img_path)
if(preds[1]==1){
pred_text='DOG'
# cat('THIS IS A DOG')
# plot(as.raster(image_to_array(img)/255))
} else{
pred_text='CAT'
# cat('It must be a cat')
# plot(as.raster(image_to_array(img)/255))
}
image_annotate(mystery,pred_text,size=70)
image_annotate(img,'CAT',size=70)
img<-image_read('C:/Users/setup/Desktop/DeepLearning/mystery2.jpg')
image_annotate(img,'CAT',size=70)
preds[2]
preds[1]
save_model_hdf5(model,'testmdoelsize.hd5')
t %>%
group_by(neuron)%>%
mutate(time=row_number()) %>%
filter(dsnum>0) %>% #saccades
group_by(neuron,dsnum) %>%
summarize(sd.conj.velocity=sd(conj.velocity),
mean.conj.velocity=mean(conj.velocity),
sd.verg.velocity=sd(verg.velocity),
spread=max(conj.velocity)-min(conj.velocity),
qrange=quantile(conj.velocity,0.975)-quantile(conj.velocity,0.025),
dur=n(),
R.H.Amp=last(rep)-first(rep),
R.V.Amp=last(repV)-first(repV),
L.H.Amp=last(lep)-first(lep),
L.V.Amp=last(lepV)-first(lepV),
conj.H.Amp=(R.H.Amp+L.H.Amp)/2,
conj.V.Amp=(R.V.Amp+L.V.Amp)/2,
peak.conj.velocity=maxabs(conj.velocity),
peak.H.velocity=maxabs((rev+lev)/2),
peak.V.Velocity=maxabs((revV+levV)/2),
peakFR=max(sdf10),
nspk=sum(rasters),
r.amp=sqrt(conj.H.Amp^2+conj.V.Amp^2),
asleep=sd.conj.velocity>7.5 || dur>2000) %>%
ungroup() %>%
mutate(sacID=row_number())->
zsp
t<- left_join(t,select(zsp,neuron,dsnum,sacID),by=c('neuron','dsnum'))
