# mtest<- lm(sdflead~verg.angle+verg.velocity:transient.type,data=z)
# mtest<- lm(sdflead~verg.angle+verg.velocity.positive:is.transient.positive+verg.velocity.negative,data=z)
# z<- mutate(z, verg.vel.smooth=as.numeric(smooth(verg.velocity,kind='3RS3R')))
# mtest<- lm(sdflead~verg.angle+verg.vel.smooth:transient.type,data=z)
# mtest<-lm(sdflead~verg.angle+verg.velocity:transient.type,data=z)
mtest<- lm(sdflead~verg.angle+verg.velocity:is.convergent.trans,data=filter(z,!transient.type=='divergence'))
# mtest<-lm(sdflead~verg.angle+verg.velocity:transient.type,data=filter(z,!transient.type=='divergence'))
# zz<- mutate(z,transient.type=replace(transient.type,transient.type=='divergence','none'))
z<- mutate(z,econtrol=predict(mcontrol,newdata=z),
etest=predict(mtest,newdata=z),
etest=replace(etest,etest<0,0),
verg.angle.shifted=lag(verg.angle,bestlag),
showrasters=replace(rasters,rasters<1,NA))
etest.prob<- z$etest/1000
z <-mutate(z,predict.spikes1=rbinom(length(etest.prob),1,etest.prob),
predict.spikes1=replace(predict.spikes1,predict.spikes1<1,NA),
predict.spikes2=rbinom(length(etest.prob),1,etest.prob),
predict.spikes2=replace(predict.spikes2,predict.spikes2<1,NA),
predict.spikes3=rbinom(length(etest.prob),1,etest.prob),
predict.spikes3=replace(predict.spikes3,predict.spikes3<1,NA))
r.squared=cor(z$sdflead[200:nrow(z)],z$etest[200:nrow(z)])
print(paste('R-Squared is:',round(r.squared^2,3)))
maxtime<-nrow(z)
windowsize<- 5000
manipulate(ggplot(filter(z,time>window,time<window+windowsize))+
geom_area(aes(time,sdflead))+
# geom_line(aes(time,econtrol),color='orange')+
# geom_area(aes(time,econtrol),fill='orange',alpha=.5)+
geom_area(aes(time,etest),fill='purple',alpha=.5)+
geom_hline(yintercept=-115)+
geom_hline(yintercept=-85)+
geom_line(aes(time,verg.velocity-100),color='red')+
geom_point(aes(time,verg.velocity-100),color='red',size=3,data=filter(z, time>window,time<window+windowsize,enhancenum>0))+
# geom_line(aes(time,verg.vel.smooth-100),color='black')+
geom_point(aes(time,showrasters+200),shape='|',size=2)+
geom_point(aes(time,predict.spikes1+220),shape='|',size=2,color='purple')+
geom_point(aes(time,predict.spikes2+225),shape='|',size=2,color='purple')+
geom_point(aes(time,predict.spikes3+230),shape='|',size=2,color='purple')+
geom_point(aes(time,enhancenum*0-50,color=transient.type))+
# geom_line(aes(time,rep*10),color='red')+
# geom_line(aes(time,lep*10),color='blue'),
geom_line(aes(time,verg.angle.shifted*5),color='darkgreen',size=1.5),
window=slider(0,maxtime-windowsize,step=windowsize)
)
source('~/GitHub/NPH-Analysis/Vergence/markEnhancement.R')
z %>%
mutate(time=row_number(),
sdf=spikedensity(rasters,sd=25),
verg.velocity=parabolicdiff(verg.angle,30),
# verg.accel=parabolicdiff(verg.velocity,20),
verg.direction=verg.angle>0) ->
z
z<- left_join(z,markEnhancement(z$verg.velocity),by='time')
z %>%
mutate(verg.enhance=!is.na(enhancenum),
transient.type='none',
verg.direction=verg.velocity>0)->
z
i<- z$verg.enhance & !z$verg.direction
z$transient.type[i]<- 'divergence'
i<- z$verg.enhance & z$verg.direction
z$transient.type[i]<- 'convergence'
z<- mutate(z,is.convergent.trans=transient.type=='convergence')
##split verg.velocity into positive and negative
# z %>%
#   mutate(verg.velocity.positive=replace(verg.velocity,verg.velocity<0,0),
#          verg.velocity.negative=replace(verg.velocity,verg.velocity>0,0),
#          verg.velocity.negative=abs(verg.velocity.negative),
#          is.transient.positive=abs(verg.velocity.positive)>15,
#          is.transient.negative=abs(verg.velocity.negative)>15) ->
#   z
#
# z$expectedFR<- replace(z$expectedFR,z$expectedFR<0,0)
# z<- mutate(z,adjustedFR=sdf-expectedFR)
# z$adjustedFR<- replace(x$adjustedFR,x$adjustedFR<0,0)
rnum<- seq(0,250,by=5)
m1<- rnum
m2<- rnum
count<- 0
for (i in rnum) {
count<- count+1
z<- mutate(z,sdflead=lag(sdf,i))
mcontrol<- lm(sdflead~verg.angle+verg.velocity,data=z)
# mtest<- lm(sdflead~verg.angle+verg.velocity:transient.type,data=z)
mtest<- lm(sdflead~verg.angle+verg.velocity:is.convergent.trans,data=filter(z,!transient.type=='divergence'))
m1[count]=summary(mcontrol)$r.squared
m2[count]=summary(mtest)$r.squared
# print(summary(mcontrol)$r.squared)
# print(summary(mtest)$r.squared)
}
lagtest<-data.frame(shift=rnum, control=m1, test=m2)
qplot(shift,test,data=lagtest,geom='text',label=shift)
bestlag<- lagtest$shift[lagtest$test==max(lagtest$test)]
z<- mutate(z,sdflead=lag(sdf,bestlag))
# z<- mutate(z, sdflead=lag(sdf,150))
mcontrol<- lm(sdflead~verg.angle,data=z)
# mtest<- lm(sdflead~verg.angle+verg.velocity:transient.type,data=z)
# mtest<- lm(sdflead~verg.angle+verg.velocity.positive:is.transient.positive+verg.velocity.negative,data=z)
# z<- mutate(z, verg.vel.smooth=as.numeric(smooth(verg.velocity,kind='3RS3R')))
# mtest<- lm(sdflead~verg.angle+verg.vel.smooth:transient.type,data=z)
# mtest<-lm(sdflead~verg.angle+verg.velocity:transient.type,data=z)
mtest<- lm(sdflead~verg.angle+verg.velocity:is.convergent.trans,data=filter(z,!transient.type=='divergence'))
# mtest<-lm(sdflead~verg.angle+verg.velocity:transient.type,data=filter(z,!transient.type=='divergence'))
# zz<- mutate(z,transient.type=replace(transient.type,transient.type=='divergence','none'))
z<- mutate(z,econtrol=predict(mcontrol,newdata=z),
etest=predict(mtest,newdata=z),
etest=replace(etest,etest<0,0),
verg.angle.shifted=lag(verg.angle,bestlag),
showrasters=replace(rasters,rasters<1,NA))
etest.prob<- z$etest/1000
z <-mutate(z,predict.spikes1=rbinom(length(etest.prob),1,etest.prob),
predict.spikes1=replace(predict.spikes1,predict.spikes1<1,NA),
predict.spikes2=rbinom(length(etest.prob),1,etest.prob),
predict.spikes2=replace(predict.spikes2,predict.spikes2<1,NA),
predict.spikes3=rbinom(length(etest.prob),1,etest.prob),
predict.spikes3=replace(predict.spikes3,predict.spikes3<1,NA))
r.squared=cor(z$sdflead[200:nrow(z)],z$etest[200:nrow(z)])
print(paste('R-Squared is:',round(r.squared^2,3)))
maxtime<-nrow(z)
windowsize<- 5000
manipulate(ggplot(filter(z,time>window,time<window+windowsize))+
geom_area(aes(time,sdflead))+
# geom_line(aes(time,econtrol),color='orange')+
# geom_area(aes(time,econtrol),fill='orange',alpha=.5)+
geom_area(aes(time,etest),fill='purple',alpha=.5)+
geom_hline(yintercept=-115)+
geom_hline(yintercept=-85)+
geom_line(aes(time,verg.velocity-100),color='red')+
geom_point(aes(time,verg.velocity-100),color='red',size=3,data=filter(z, time>window,time<window+windowsize,enhancenum>0))+
# geom_line(aes(time,verg.vel.smooth-100),color='black')+
geom_point(aes(time,showrasters+200),shape='|',size=2)+
geom_point(aes(time,predict.spikes1+220),shape='|',size=2,color='purple')+
geom_point(aes(time,predict.spikes2+225),shape='|',size=2,color='purple')+
geom_point(aes(time,predict.spikes3+230),shape='|',size=2,color='purple')+
geom_point(aes(time,enhancenum*0-50,color=transient.type))+
# geom_line(aes(time,rep*10),color='red')+
# geom_line(aes(time,lep*10),color='blue'),
geom_line(aes(time,verg.angle.shifted*5),color='darkgreen',size=1.5),
window=slider(0,maxtime-windowsize,step=windowsize)
)
z<- filter(t,neuron=='Bee-113')
z %>%
mutate(time=row_number(),
sdf=spikedensity(rasters,sd=25),
verg.velocity=parabolicdiff(verg.angle,30),
# verg.accel=parabolicdiff(verg.velocity,20),
verg.direction=verg.angle>0) ->
z
z<- left_join(z,markEnhancement(z$verg.velocity),by='time')
source('~/GitHub/NPH-Analysis/Vergence/markEnhancement.R')
z<- left_join(z,markEnhancement(z$verg.velocity),by='time')
z %>%
mutate(verg.enhance=!is.na(enhancenum),
transient.type='none',
verg.direction=verg.velocity>0)->
z
i<- z$verg.enhance & !z$verg.direction
z$transient.type[i]<- 'divergence'
i<- z$verg.enhance & z$verg.direction
z$transient.type[i]<- 'convergence'
z<- mutate(z,is.convergent.trans=transient.type=='convergence')
rnum<- seq(0,250,by=5)
m1<- rnum
m2<- rnum
count<- 0
for (i in rnum) {
count<- count+1
z<- mutate(z,sdflead=lag(sdf,i))
mcontrol<- lm(sdflead~verg.angle+verg.velocity,data=z)
# mtest<- lm(sdflead~verg.angle+verg.velocity:transient.type,data=z)
mtest<- lm(sdflead~verg.angle+verg.velocity:is.convergent.trans,data=filter(z,!transient.type=='divergence'))
m1[count]=summary(mcontrol)$r.squared
m2[count]=summary(mtest)$r.squared
# print(summary(mcontrol)$r.squared)
# print(summary(mtest)$r.squared)
}
lagtest<-data.frame(shift=rnum, control=m1, test=m2)
qplot(shift,test,data=lagtest,geom='text',label=shift)
bestlag<- lagtest$shift[lagtest$test==max(lagtest$test)]
z<- mutate(z,sdflead=lag(sdf,bestlag))
mcontrol<- lm(sdflead~verg.angle,data=z)
mtest<- lm(sdflead~verg.angle+verg.velocity:is.convergent.trans,data=filter(z,!transient.type=='divergence'))
z<- mutate(z,econtrol=predict(mcontrol,newdata=z),
etest=predict(mtest,newdata=z),
etest=replace(etest,etest<0,0),
verg.angle.shifted=lag(verg.angle,bestlag),
showrasters=replace(rasters,rasters<1,NA))
etest.prob<- z$etest/1000
z <-mutate(z,predict.spikes1=rbinom(length(etest.prob),1,etest.prob),
predict.spikes1=replace(predict.spikes1,predict.spikes1<1,NA),
predict.spikes2=rbinom(length(etest.prob),1,etest.prob),
predict.spikes2=replace(predict.spikes2,predict.spikes2<1,NA),
predict.spikes3=rbinom(length(etest.prob),1,etest.prob),
predict.spikes3=replace(predict.spikes3,predict.spikes3<1,NA))
r.squared=cor(z$sdflead[200:nrow(z)],z$etest[200:nrow(z)])
print(paste('R-Squared is:',round(r.squared^2,3)))
maxtime<-nrow(z)
windowsize<- 5000
manipulate(ggplot(filter(z,time>window,time<window+windowsize))+
geom_area(aes(time,sdflead))+
# geom_line(aes(time,econtrol),color='orange')+
# geom_area(aes(time,econtrol),fill='orange',alpha=.5)+
geom_area(aes(time,etest),fill='purple',alpha=.5)+
geom_hline(yintercept=-115)+
geom_hline(yintercept=-85)+
geom_line(aes(time,verg.velocity-100),color='red')+
geom_point(aes(time,verg.velocity-100),color='red',size=3,data=filter(z, time>window,time<window+windowsize,enhancenum>0))+
# geom_line(aes(time,verg.vel.smooth-100),color='black')+
geom_point(aes(time,showrasters+200),shape='|',size=2)+
geom_point(aes(time,predict.spikes1+220),shape='|',size=2,color='purple')+
geom_point(aes(time,predict.spikes2+225),shape='|',size=2,color='purple')+
geom_point(aes(time,predict.spikes3+230),shape='|',size=2,color='purple')+
geom_point(aes(time,enhancenum*0-50,color=transient.type))+
# geom_line(aes(time,rep*10),color='red')+
# geom_line(aes(time,lep*10),color='blue'),
geom_line(aes(time,verg.angle.shifted*5),color='darkgreen',size=1.5),
window=slider(0,maxtime-windowsize,step=windowsize)
)
ggplot(z)+geom_point(aes(verg.velocity,sdflead))
ggplot(z)+geom_point(aes(verg.velocity,sdflead,color=transient.type)
ggplot(z)+geom_point(aes(verg.velocity,sdflead,color=transient.type))
ggplot(z)+geom_point(aes(verg.velocity,sdflead,color=transient.type))+coord_cartesian(xlim=[0,50])
ggplot(z)+geom_point(aes(verg.velocity,sdflead,color=transient.type))+coord_cartesian(xlim=c(0,50))
ggplot(z)+geom_point(aes(verg.velocity,sdflead,color=transient.type),alpha=0.5)+coord_cartesian(xlim=c(0,50))
ggplot(z)+geom_point(aes(verg.velocity,sdflead,color=transient.type),alpha=0.5)+coord_cartesian(xlim=c(0,20))
ggplot(z)+geom_point(aes(verg.velocity,sdflead,color=transient.type),alpha=0.5)+coord_cartesian(xlim=c(4,15))
ggplot(filter(z,verg.velocity>4,verg.velocity<15))+geom_point(aes(verg.velocity,sdflead,color=transient.type),alpha=0.5)
ggplot(filter(z,verg.velocity>4,verg.velocity<15))+geom_boxplot(aes(verg.velocity,sdflead,color=transient.type),alpha=0.5)
ggplot(filter(z,verg.velocity>6,verg.velocity<15))+geom_boxplot(aes(verg.velocity,sdflead,color=transient.type),alpha=0.5)
ggplot(filter(z,verg.velocity>6,verg.velocity<15))+geom_boxplot(aes(transient.type,sdflead,color=transient.type),alpha=0.5)+facet_wrap()
ggplot(filter(z,verg.velocity>6,verg.velocity<15))+geom_boxplot(aes(transient.type,sdflead,color=transient.type),alpha=0.5)
ggplot(filter(z,verg.velocity>6,verg.velocity<12))+geom_boxplot(aes(transient.type,sdflead,color=transient.type),alpha=0.5)
ggplot(filter(z,verg.velocity>8,verg.velocity<12))+geom_boxplot(aes(transient.type,sdflead,color=transient.type),alpha=0.5)
ggplot(filter(z,verg.velocity>8,verg.velocity<10))+geom_boxplot(aes(transient.type,sdflead,color=transient.type),alpha=0.5)
head9z
head(z)
summary(mtest)
ggplot(filter(z,verg.velocity>8,verg.velocity<10))+geom_boxplot(aes(transient.type,sdflead-verg.angle*10.4,color=transient.type),alpha=0.5)
ggplot(filter(z,verg.velocity>4,verg.velocity<15))+geom_point(aes(verg.velocity,sdflead,color=transient.type),alpha=0.5)
ggplot(filter(z,verg.velocity>4,verg.velocity<15))+geom_point(aes(verg.velocity,sdflead-verg.angle*10.4,color=transient.type),alpha=0.5)
ggplot(z)+geom_point(aes(verg.velocity,sdflead-verg.angle*10.4,color=transient.type),alpha=0.5)
ggplot(z)+geom_point(aes(verg.velocity,sdflead-verg.angle*10.4,color=transient.type),alpha=0.5)+coord_cartesian(ylim=c(0,220))
ggplot(z)+geom_point(aes(verg.velocity,sdflead-verg.angle*10.4,color=transient.type),alpha=0.5)+coord_cartesian(ylim=c(0,220))+stat_smooth(method='lm')
ggplot(z)+geom_hix(aes(verg.velocity,sdflead-verg.angle*10.4,color=transient.type),alpha=0.5)+coord_cartesian(ylim=c(0,220))
ggplot(z)+geom_hex(aes(verg.velocity,sdflead-verg.angle*10.4,color=transient.type),alpha=0.5)+coord_cartesian(ylim=c(0,220))
ggplot(z)+geom_bin2d(aes(verg.velocity,sdflead-verg.angle*10.4,color=transient.type),alpha=0.5)+coord_cartesian(ylim=c(0,220))
ggplot(z)+geom_bin2d(aes(verg.velocity,sdflead-verg.angle*10.4),alpha=0.5)+coord_cartesian(ylim=c(0,220))
ggplot(z)+geom_point(aes(verg.velocity,sdflead-verg.angle*10.4,color=transient.type),alpha=0.5)+coord_cartesian(ylim=c(0,220))+geom_smooth(method='lm')
ggplot(z)+geom_point(aes(verg.velocity,sdflead-verg.angle*10.4,color=transient.type),alpha=0.5)+coord_cartesian(ylim=c(0,220),xlim=c(-8,8))
ggplot(z)+geom_point(aes(verg.velocity,sdflead-verg.angle*10.4,color=transient.type),alpha=0.5)+coord_cartesian(ylim=c(-50,220),xlim=c(-8,8))
ggplot(z)+geom_point(aes(verg.velocity,sdflead-verg.angle*10.4,color=transient.type),alpha=0.5)+coord_cartesian(ylim=c(-50,220),xlim=c(-8,15))
ggplot(z)+geom_point(aes(verg.velocity,sdflead,color=transient.type),alpha=0.5)+coord_cartesian(ylim=c(-50,220),xlim=c(-8,15))
ggplot(z)+geom_point(aes(verg.velocity,sdflead,color=transient.type),alpha=0.5)+coord_cartesian(xlim=c(-8,15))
ggplot(z)+geom_point(aes(verg.velocity,sdflead,color=transient.type),alpha=0.5)+coord_cartesian(xlim=c(-8,15))+facet_wrap(~transient.type)
ggplot(z)+geom_point(aes(verg.velocity,sdflead,color=transient.type),alpha=0.5)+coord_cartesian(xlim=c(-8,15))+facet_wrap(~transient.type,ncol=1)
ggplot(z)+geom_point(aes(verg.velocity,sdflead,color=transient.type),alpha=0.5)+coord_cartesian(xlim=c(-8,15))+facet_wrap(~transient.type,ncol=1)+stat_smooth()
ggplot(z)+geom_point(aes(verg.velocity,sdflead,color=transient.type),alpha=0.5)+coord_cartesian(xlim=c(-8,25))+facet_wrap(~transient.type,ncol=1)
ggplot(z)+geom_point(aes(verg.velocity,sdflead,color=transient.type),alpha=0.5)+coord_cartesian(xlim=c(0,25))+facet_wrap(~transient.type,ncol=1)
ggplot(filter(z,transient.type!='divergence'))+geom_point(aes(verg.velocity,sdflead,color=transient.type),alpha=0.5)+coord_cartesian(xlim=c(-10,25))+facet_wrap(~transient.type,ncol=1)
ggplot(filter(z,transient.type!='divergence'))+geom_point(aes(verg.velocity,sdflead-verg.angle*10.39,color=transient.type),alpha=0.5)+coord_cartesian(xlim=c(-10,25))+facet_wrap(~transient.type,ncol=1)
ggplot(filter(z,transient.type!='divergence'))+geom_point(aes(verg.velocity,sdflead-verg.angle*10.39,color=transient.type),alpha=0.5)+coord_cartesian(xlim=c(-10,25),ylim=c(0,200))+facet_wrap(~transient.type,ncol=1)
ggplot(filter(z,transient.type!='divergence'))+geom_point(aes(verg.velocity,sdflead-verg.angle*10.39,color=transient.type),alpha=0.5)+coord_cartesian(xlim=c(-10,45),ylim=c(0,200))+facet_wrap(~transient.type,ncol=1)
ggplot(filter(z,transient.type!='divergence'))+geom_point(aes(verg.velocity,sdflead-verg.angle*10.39,color=transient.type),alpha=0.5)+coord_cartesian(xlim=c(-10,100),ylim=c(0,200))+facet_wrap(~transient.type,ncol=1)
ggplot(filter(z,transient.type!='divergence'))+geom_point(aes(verg.velocity,sdflead-verg.angle*10.39,color=transient.type),alpha=0.5)+facet_wrap(~transient.type,ncol=1)
ggplot(filter(z,transient.type!='divergence'))+geom_point(aes(verg.velocity,sdflead-verg.angle*10.39,color=transient.type),alpha=0.5)+facet_wrap(~transient.type,ncol=1,scales='free')
?facet_wrap
ggplot(filter(z,transient.type!='divergence'))+geom_point(aes(verg.velocity,sdflead-verg.angle*10.39,color=transient.type),alpha=0.5)+facet_wrap(~transient.type,ncol=1,scales='free_x')
ggplot(filter(z,transient.type!='divergence'))+geom_point(aes(verg.velocity,sdflead,color=transient.type),alpha=0.5)+facet_wrap(~transient.type,ncol=1,scales='free_x')
ggplot(filter(z,transient.type!='divergence',sdflead>50))+geom_point(aes(verg.velocity,sdflead,color=transient.type),alpha=0.5)+facet_wrap(~transient.type,ncol=1,scales='free_x')
ggplot(filter(z,transient.type!='divergence',sdflead>50))+geom_point(aes(verg.velocity,sdflead,color=transient.type),alpha=0.2)+facet_wrap(~transient.type,ncol=1,scales='free_x')
class(z$sdflead)
class(z$verg.velocity)
qplot(verg.velocity,sdflead,data=z)
qplot(verg.velocity,sdflead,data=z)+stat_smooth()
qplot(verg.velocity,sdflead,data=z)+stat_smooth()+facet_wrap(~transient.type,ncol=1,scales='free_x')
?stat_smooth
head(g)
g<- gam(formula=sdflead~verg.velocity+verg.angle,data=z)
library(mgcv)
g<- gam(formula=sdflead~verg.velocity+verg.angle,data=z)
summary(g)
qplot(verg.velocity,sdflead,data=z)+stat_smooth(method='glm')+facet_wrap(~transient.type,ncol=1,scales='free_x')
qplot(verg.velocity,sdflead,data=z)+stat_smooth(method='glm')
qplot(verg.velocity,sdflead,data=z)+stat_smooth(method='gam')
qplot(verg.velocity,sdflead,data=z)+stat_smooth(method='loess')
qplot(verg.velocity,sdflead,data=z)+stat_smooth()
ggplot(z)+geom_point(aes(verg.velocity,sdflead),alpha=0.3)
ggplot(z)+geom_point(aes(verg.velocity,sdflead),alpha=0.3)+stat_smooth()
ggplot(filter(z,!is.na(sdflead))+geom_point(aes(verg.velocity,sdflead),alpha=0.3)+stat_smooth()
ggplot(filter(z,!is.na(sdflead)))+geom_point(aes(verg.velocity,sdflead),alpha=0.3)+stat_smooth()
ggplot(filter(z,!is.na(sdflead)))+geom_point(aes(verg.velocity,sdflead),alpha=0.3)+geom_smooth()
qplot(data=z)+geom_point(aes(verg.velocity,sdflead),alpha=0.3)+geom_smooth()
qplot(verg.velocity,sdflead,data=z)+stat_smooth()+geom_point(alpha=0.3)
qplot(verg.velocity,sdflead,data=z)+stat_smooth()+geom_point(aes(verg.velocity,sdflead),alpha=0.3)
qplot(data=z)+stat_smooth()+geom_point(aes(verg.velocity,sdflead),alpha=0.3)
qplot(verg.velocity,sdflead,data=z)+geom_point(alpha=0.3)+stat_smooth()
qplot(verg.velocity,sdflead,data=z,alpha=0.2)+stat_smooth()
qplot(verg.velocity,sdflead,data=z,alpha=0.2)+stat_smooth()+coord_cartesian(xlim=c(-30,30))
head(l)
l<-loess(sdflead~verg.velocity,data=z)
head(l)
summary(l)
plot(l)
l<-NULL
qplot(verg.velocity,sdflead,data=z,alpha=0.2)+stat_smooth()+coord_cartesian(xlim=c(-30,30))
z<-readRDS('SOA-NRTP.RDS')
cellchoice<- 'Bee-06'
z<- dplyr::filter(z,neuron==cellchoice)
r head(z)
head(z)
library(ggplot2)
library(dplyr)
library(knitr)
library(tidyr)
# library(broom)
# library(grid)
library(relaimpo)
library(leaps)
#library(data.table)
library(stringr)
source('joinsaccadesuniform.R')
source('Adamhelperfunctions.R')
#load all the .csv files in the data folder, then add a column naming the neuron,
#using the file name as the default name, then put them all together in one long data frame
path<- "C:/Users/setup/Desktop/NRTP Vergence/"
buffer<- 20
longbuffer<- 200
#get names of all files in path
files <- list.files(path=path,pattern='*.csv')
#extract neuron name eg. Bee-01
names<-sapply(files, str_match,"^[a-zA-Z]+-[0-9]+",USE.NAMES=FALSE)
# check for new cells
message('Loading Saved Data')
t.old<-readRDS('SOA-NRTP.RDS')
files<-files[!names %in% t.old$neuron] #comparison
nfiles<-length(files)
# nfiles=1
if (nfiles>0){
message(c('New Files: ',files))
loadedfiles <- lapply(paste(path,files,sep=''),read.csv)
t<-data.frame()
for (i in 1:nfiles) {
f<- files[i]
message(paste('Loading:',f))
temp=loadedfiles[[i]]
names<-str_match(f,"(^[a-zA-Z]+)-([0-9]+)")
temp$neuron<-names[1]
temp$monkey<-names[2]
temp$cellnum<-as.numeric(names[3])
temp$sdf<-spikedensity(temp$rasters,sd=10)
# leadtime<-dynamiclead(temp)
mutate(temp,
# sdflag=lag(sdf,leadtime),
conj.velocity=sqrt((rev^2+lev^2)/2)+sqrt((revV^2+levV^2)/2),
# s=markSaccades(conj.velocity,buffer=10,threshold=10),
# slong=markSaccades(conj.velocity,buffer=longbuffer,threshold=10),
time=row_number(),
verg.angle=lep-rep,
verg.velocity=parabolicdiff(verg.angle,7))->
temp
t <-rbind(t,temp)
}
t<- dplyr::select(t, -thp,-tvp,-time)
t<- rbind(t.old,t)
saveRDS(rbind(t),'SOA-NRTP-new.RDS')
t.old<- NULL
}else{
message('********NO NEW CELLS********')
t<-t.old
t.old<-NULL
}
t<- filter(t, monkey %in% c('Bee','Ozette'))
head(t)
t$celltype<- as.factor(as.numeric(t$cellnum)>100)
levels(t$celltype)<- c("NRTP","SOA")
t %>%
group_by(neuron) %>%
mutate(s=markSaccades(conj.velocity,buffer=10,threshold=10),
isfixation=s<0) %>%
filter(isfixation) %>%
group_by(neuron,s) %>%
mutate(meanfr=mean(sdf),
maxfr=max(sdf),
R.Hor=mean(rep),
R.Ver=mean(repV),
L.Hor=mean(lep),
L.Ver=mean(lepV),
mean.Verg.Angle=mean(verg.angle),
mean.Verg.Angle=replace(mean.Verg.Angle, mean.Verg.Angle<0, NA),
max.Verg.Vel = max(verg.velocity),
max.Verg.Ang = max(verg.angle),
nspikes=sum(rasters),
dur=n(),
mean.Spikerate=sum(rasters)/dur*1000,
R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)))->
m
m %>%
filter(dur>200) %>%
summarize(mean.Spikerate=mean.Spikerate[1],
mean.Verg.Angle=mean.Verg.Angle[1],
dur=dur[1]) ->
summaryforplot
m<- NULL
gp<- ggplot(aes(mean.Verg.Angle,mean.Spikerate),data=summaryforplot)+
geom_point(size=2,alpha=1/5)+
facet_wrap(~neuron)+
stat_smooth(method='lm')+
ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
ggsave('RatePosition.pdf',plot=gp, height=28, width=13)
t %>%
group_by(neuron) %>%
mutate(s=markSaccades(conj.velocity,buffer=10,threshold=10),
isfixation=s<0) %>%
filter(isfixation) %>%
group_by(neuron,s) %>%
mutate(meanfr=mean(sdf),
maxfr=max(sdf),
R.Hor=mean(rep),
R.Ver=mean(repV),
L.Hor=mean(lep),
L.Ver=mean(lepV),
mean.Verg.Angle=mean(verg.angle),
mean.Verg.Angle=replace(mean.Verg.Angle, mean.Verg.Angle<0, NA),
max.Verg.Vel = max(verg.velocity),
max.Verg.Ang = max(verg.angle),
nspikes=sum(rasters),
dur=n(),
mean.Spikerate=sum(rasters)/dur*1000,
R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)))->
m
memory.size()
memory.size(20000)
t %>%
group_by(neuron) %>%
mutate(s=markSaccades(conj.velocity,buffer=10,threshold=10),
isfixation=s<0) %>%
filter(isfixation) %>%
group_by(neuron,s) %>%
mutate(meanfr=mean(sdf),
maxfr=max(sdf),
R.Hor=mean(rep),
R.Ver=mean(repV),
L.Hor=mean(lep),
L.Ver=mean(lepV),
mean.Verg.Angle=mean(verg.angle),
mean.Verg.Angle=replace(mean.Verg.Angle, mean.Verg.Angle<0, NA),
max.Verg.Vel = max(verg.velocity),
max.Verg.Ang = max(verg.angle),
nspikes=sum(rasters),
dur=n(),
mean.Spikerate=sum(rasters)/dur*1000,
R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)))->
m
memory.size(40000)
t %>%
group_by(neuron) %>%
mutate(s=markSaccades(conj.velocity,buffer=10,threshold=10),
isfixation=s<0) %>%
filter(isfixation) %>%
group_by(neuron,s) %>%
mutate(meanfr=mean(sdf),
maxfr=max(sdf),
R.Hor=mean(rep),
R.Ver=mean(repV),
L.Hor=mean(lep),
L.Ver=mean(lepV),
mean.Verg.Angle=mean(verg.angle),
mean.Verg.Angle=replace(mean.Verg.Angle, mean.Verg.Angle<0, NA),
max.Verg.Vel = max(verg.velocity),
max.Verg.Ang = max(verg.angle),
nspikes=sum(rasters),
dur=n(),
mean.Spikerate=sum(rasters)/dur*1000,
R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)))->
m
m %>%
filter(dur>200) %>%
summarize(mean.Spikerate=mean.Spikerate[1],
mean.Verg.Angle=mean.Verg.Angle[1],
dur=dur[1]) ->
summaryforplot
m<- NULL
gp<- ggplot(aes(mean.Verg.Angle,mean.Spikerate),data=summaryforplot)+
geom_point(size=2,alpha=1/5)+
facet_wrap(~neuron)+
stat_smooth(method='lm')+
ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
ggsave('RatePosition.pdf',plot=gp, height=28, width=13)
bufferlength<- 200
saccade.length<- 150
t%>%
group_by(neuron) %>%
mutate(time=row_number()) %>%
do(joinsaccadesuniform(.,buffer=200,threshold=20,saccade.length=saccade.length))->
# do(joinsaccades(.,buffer=bufferlength,threshold=20))->
t
