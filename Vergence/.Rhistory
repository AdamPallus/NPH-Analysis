library(ggplot2)
library(dplyr)
library(knitr)
library(tidyr)
# library(broom)
# library(grid)
library(relaimpo)
library(leaps)
#library(data.table)
library(stringr)
source('joinsaccadesuniform.R')
spikedensity<-function (rasters,sd=100) {
gsize<- sd*10
g<-dnorm(-gsize:gsize,mean=0,sd=sd)
sdf<-convolve(rasters,g,type="open")
sdf<-sdf[gsize:(length(sdf)-(gsize+1))]*1000
sdf
}
dynamiclead<-function(p,lags=seq(10,300,by=10)) {
rsq<-NULL
for (i in 1:length(lags)) {
if (lags[i] > 0){
p$sdflag<-dplyr::lag(p$sdf,lags[i])
}
else{
p$sdflag<-dplyr::lead(p$sdf,lags[i]*-1)
}
rsq[i]<- summary(lm(sdflag~rep+lep+repV+lepV,data=p))$r.squared
}
#return(rsq)
return(lags[rsq==max(rsq)])
}
findSaccades<-function(ev,threshold=40){
mindur<-50
i<-which(abs(ev)>threshold) #find all the times when speed > threshold
sacoff<-which(diff(i)>mindur) #minimum duration of an accepted saccade
sacon<-c(1,sacoff+1) #first saccade
sacoff<-c(sacoff,length(i)) #end of last saccade
saccade.onset<-i[sacon] #get actual times
saccade.offset<-i[sacoff]
return(data.frame(saccade.onset,saccade.offset))
}
markSaccades<-function(ev,buffer=15,threshold=40){
#this function finds and marks saccades given a velocity input
stimes<-findSaccades(ev,threshold)
#remove saccades without enough data at the end of the file, based on buffer size
toolong<- stimes$saccade.offset> length(ev)-buffer
tooshort<- stimes$saccade.onset<buffer+1
stimes<- filter(stimes, !tooshort, !toolong)
nsaccades=nrow(stimes)
stimes$saccade.onset=stimes$saccade.onset-buffer
stimes$saccade.offset=stimes$saccade.offset+buffer
s<-1:length(ev)*0
for (k in 1:nsaccades){
s[stimes$saccade.onset[k]:stimes$saccade.offset[k]]<- k
if(k>1){
s[stimes$saccade.offset[k-1]:stimes$saccade.onset[k]]<-(k*-1)
}
}
s[1:stimes$saccade.onset[1]]<- -1
s[stimes$saccade.offset[nrow(stimes)]:length(s)]<- (nrow(stimes)*-1)-1
return(s)
}
parabolicdiff <- function(pos,n=7){
q <- sum(2*((1:n)^2))
convoutput<- convolve(pos,c(-n:-1, 1:n),type="open")
convoutput<- convoutput[(n*2):(length(pos)-((n*2)+1))]
vels<- c(array(convoutput[1],dim=n*2),convoutput,array(convoutput[length(convoutput)],dim=n*2))
vels <- vels/q*1000
}
maxabs<- function(x){
m1<-max(x,na.rm=T)
m2<-min(x,na.rm=T)
if (abs(m1)>abs(m2)) {
return(m1)
} else{
return(m2)
}
}
#load all the .csv files in the data folder, then add a column naming the neuron,
#using the file name as the default name, then put them all together in one long data frame
path<- "C:/Users/setup/Desktop/NRTP Vergence/"
buffer<- 20
longbuffer<- 200
#get names of all files in path
files <- list.files(path=path,pattern='*.csv')
#extract neuron name eg. Bee-01
names<-sapply(files, str_match,"^[a-zA-Z]+-[0-9]+",USE.NAMES=FALSE)
# check for new cells
message('Loading Saved Data')
t.old<-readRDS('SOA-NRTP.RDS')
files<-files[!names %in% t.old$neuron] #comparison
nfiles<-length(files)
# nfiles=1
if (nfiles>0){
message(c('New Files: ',files))
loadedfiles <- lapply(paste(path,files,sep=''),read.csv)
t<-data.frame()
for (i in 1:nfiles) {
f<- files[i]
message(paste('Loading:',f))
temp=loadedfiles[[i]]
names<-str_match(f,"(^[a-zA-Z]+)-([0-9]+)")
temp$neuron<-names[1]
temp$monkey<-names[2]
temp$cellnum<-as.numeric(names[3])
temp$sdf<-spikedensity(temp$rasters,sd=10)
# leadtime<-dynamiclead(temp)
mutate(temp,
# sdflag=lag(sdf,leadtime),
conj.velocity=sqrt((rev^2+lev^2)/2)+sqrt((revV^2+levV^2)/2),
# s=markSaccades(conj.velocity,buffer=10,threshold=10),
# slong=markSaccades(conj.velocity,buffer=longbuffer,threshold=10),
time=row_number(),
verg.angle=lep-rep,
verg.velocity=parabolicdiff(verg.angle,7))->
temp
t <-rbind(t,temp)
}
t<- rbind(t.old,t)
saveRDS(rbind(t),'SOA-NRTP-new.RDS')
t.old<- NULL
}else{
message('********NO NEW CELLS********')
t<-t.old
t.old<-NULL
}
t<- filter(t, monkey %in% c('Bee','Ozette'))
head(t)
bufferlength<- 200
saccade.length<- 150
t%>%
group_by(neuron) %>%
mutate(time=row_number()) %>%
do(joinsaccadesuniform(.,buffer=200,threshold=20,saccade.length=saccade.length))->
# do(joinsaccades(.,buffer=bufferlength,threshold=20))->
t
#Once saccades have been marked, we measure lots of things about each saccade.
#For this plot, we also remove all data that isn't part of a saccade or the buffer period
t %>%
group_by(neuron) %>%
mutate(issaccade=!is.na(sacnum)) %>%
filter(issaccade) %>%
group_by(neuron,sacnum) %>%
mutate(#dur=n(),
peak.conj.velocity=maxabs(conj.velocity),
peak.R.H= maxabs(rev),
peak.R.V= maxabs(revV),
peak.L.H= maxabs(lev),
peak.L.V= maxabs(levV),
R.H.Amp=rep[n()]-rep[1],
L.H.Amp=lep[n()]-lep[1],
R.V.Amp=repV[n()]-repV[1],
L.V.Amp=lepV[n()]-lepV[1],
r.angle=atan2(R.V.Amp,R.H.Amp)*180/pi,
r.amp=sqrt(R.H.Amp^2+R.V.Amp^2),
nspikes=sum(rasters),
vect.amp= (sqrt(R.H.Amp^2+R.V.Amp^2)+sqrt(L.H.Amp^2+L.V.Amp^2))/2,
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)),
verg.amp=verg.angle[n()-bufferlength]-verg.angle[bufferlength+1],
peak.verg.velocity= maxabs(verg.velocity),
min.verg.trans = min(verg.velocity),
max.verg.trans = max(verg.velocity),
off.verg.velocity=min(abs(min.verg.trans),abs(max.verg.trans)),
min.verg.angle=min(verg.angle),
max.verg.angle=max(verg.angle),
max.verg.velocity=max(verg.velocity),
min.verg.velocity=min(verg.velocity),
maxfr=max(sdf),
counter=time-time[1]-bufferlength,
verg.change=verg.angle-mean(verg.angle[1:50]),
# verg.amp= last(verg.angle)-first(verg.angle),
verg.amp= verg.angle[n()-bufferlength]-verg.angle[bufferlength],
showrasters=replace(rasters,rasters<1,NA))->
t
head(t)
t %>%
group_by(neuron) %>%
mutate(issaccade=!is.na(sacnum)) %>%
filter(issaccade) %>%
group_by(neuron,sacnum) %>%
mutate(#dur=n(),
peak.conj.velocity=maxabs(conj.velocity),
peak.R.H= maxabs(rev),
peak.R.V= maxabs(revV),
peak.L.H= maxabs(lev),
peak.L.V= maxabs(levV),
R.H.Amp=rep[n()]-rep[1],
L.H.Amp=lep[n()]-lep[1],
R.V.Amp=repV[n()]-repV[1],
L.V.Amp=lepV[n()]-lepV[1],
r.angle=atan2(R.V.Amp,R.H.Amp)*180/pi,
r.amp=sqrt(R.H.Amp^2+R.V.Amp^2),
nspikes=sum(rasters),
vect.amp= (sqrt(R.H.Amp^2+R.V.Amp^2)+sqrt(L.H.Amp^2+L.V.Amp^2))/2,
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)),
verg.amp=verg.angle[n()-bufferlength]-verg.angle[bufferlength+1],
peak.verg.velocity= maxabs(verg.velocity),
min.verg.trans = min(verg.velocity),
max.verg.trans = max(verg.velocity),
off.verg.velocity=min(abs(min.verg.trans),abs(max.verg.trans)),
min.verg.angle=min(verg.angle),
max.verg.angle=max(verg.angle),
max.verg.velocity=max(verg.velocity),
min.verg.velocity=min(verg.velocity),
maxfr=max(sdf),
counter=time-time[1]-bufferlength,
verg.change=verg.angle-mean(verg.angle[1:50]),
# verg.amp= last(verg.angle)-first(verg.angle),
verg.amp= verg.angle[n()-bufferlength]-verg.angle[bufferlength],
showrasters=replace(rasters,rasters<1,NA))->
t
memory.size(40000)
t %>%
group_by(neuron,sacnum) %>%
summarize(peak.verg.velocity=first(peak.verg.velocity),
maxfr=first(maxfr),
verg.amp=first(verg.amp),
max.verg.angle=first(max.verg.angle),
max.verg.velocity=first(max.verg.velocity)) %>%
filter(abs(peak.verg.velocity)<1500)->
summaryforplot
t<- NULL
View(summaryforplot)
