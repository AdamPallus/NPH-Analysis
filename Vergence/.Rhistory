do(m=lm(formula=formula,data=.))->
mm
r<- data.frame()
r2 <- NULL
if (length(mm$m[[1]]$coefficients)<3){
message('Not enough parameters for importance calculation...')
message('Returning r.squared only.')
for (i in 1:nrow(mm)){
r2[i]<- summary(mm$m[[i]])$r.squared
}
r<- data.frame(neuron=mm$neuron,R2=r2)
return(r)
}
for (i in 1:nrow(mm)){
# message('Trying...')
bb<- relaimpo::calc.relimp(mm$m[[i]],rela=normalize)
b<- bb$lmg
r<-rbind(r,b)
r2<- c(r2,bb$R2)
}
r$neuron<-mm$neuron
r$R2<- r2
names(r)<- c(names(b),'neuron','R2')
r
}
r<- makeRelImp(summaryforplot,formula='mean.Spikerate~mean.Verg.Angle',norm=FALSE)
r
qplot(neuron,R2,data=r)
qplot(neuron,R2,data=r,geom='bar')
qplot(neuron,R2,data=r)
ggplot(r)+geom_bar(as.factor(neuron),R2)
ggplot(r)+geom_bar(aes(as.factor(neuron),R2))
ggplot(r)+geom_bar(aes(as.factor(neuron),R2),stat='identity')
ggplot(r)+geom_bar(aes(neuron,R2),stat='identity')
library(ggplot2)
library(dplyr)
library(knitr)
library(tidyr)
# library(broom)
# library(grid)
library(relaimpo)
library(leaps)
#library(data.table)
library(stringr)
source('joinsaccadesuniform.R')
spikedensity<-function (rasters,sd=100) {
gsize<- sd*10
g<-dnorm(-gsize:gsize,mean=0,sd=sd)
sdf<-convolve(rasters,g,type="open")
sdf<-sdf[gsize:(length(sdf)-(gsize+1))]*1000
sdf
}
dynamiclead<-function(p,lags=seq(10,300,by=10)) {
rsq<-NULL
for (i in 1:length(lags)) {
if (lags[i] > 0){
p$sdflag<-dplyr::lag(p$sdf,lags[i])
}
else{
p$sdflag<-dplyr::lead(p$sdf,lags[i]*-1)
}
rsq[i]<- summary(lm(sdflag~rep+lep+repV+lepV,data=p))$r.squared
}
#return(rsq)
return(lags[rsq==max(rsq)])
}
findSaccades<-function(ev,threshold=40){
mindur<-50
i<-which(abs(ev)>threshold) #find all the times when speed > threshold
sacoff<-which(diff(i)>mindur) #minimum duration of an accepted saccade
sacon<-c(1,sacoff+1) #first saccade
sacoff<-c(sacoff,length(i)) #end of last saccade
saccade.onset<-i[sacon] #get actual times
saccade.offset<-i[sacoff]
return(data.frame(saccade.onset,saccade.offset))
}
markSaccades<-function(ev,buffer=15,threshold=40){
#this function finds and marks saccades given a velocity input
stimes<-findSaccades(ev,threshold)
#remove saccades without enough data at the end of the file, based on buffer size
toolong<- stimes$saccade.offset> length(ev)-buffer
tooshort<- stimes$saccade.onset<buffer+1
stimes<- filter(stimes, !tooshort, !toolong)
nsaccades=nrow(stimes)
stimes$saccade.onset=stimes$saccade.onset-buffer
stimes$saccade.offset=stimes$saccade.offset+buffer
s<-1:length(ev)*0
for (k in 1:nsaccades){
s[stimes$saccade.onset[k]:stimes$saccade.offset[k]]<- k
if(k>1){
s[stimes$saccade.offset[k-1]:stimes$saccade.onset[k]]<-(k*-1)
}
}
s[1:stimes$saccade.onset[1]]<- -1
s[stimes$saccade.offset[nrow(stimes)]:length(s)]<- (nrow(stimes)*-1)-1
return(s)
}
parabolicdiff <- function(pos,n=7){
q <- sum(2*((1:n)^2))
convoutput<- convolve(pos,c(-n:-1, 1:n),type="open")
convoutput<- convoutput[(n*2):(length(pos)-((n*2)+1))]
vels<- c(array(convoutput[1],dim=n*2),convoutput,array(convoutput[length(convoutput)],dim=n*2))
vels <- vels/q*1000
}
maxabs<- function(x){
m1<-max(x,na.rm=T)
m2<-min(x,na.rm=T)
if (abs(m1)>abs(m2)) {
return(m1)
} else{
return(m2)
}
}
o<-NULL
t<- loadnewcsv(path="C:/Users/setup/Desktop/NRTP Vergence/SOASTRAB/",referencefile=o)
source('loadnewcsv.R')
t<- loadnewcsv(path="C:/Users/setup/Desktop/NRTP Vergence/SOASTRAB/",referencefile=o)
saveRDS('t,'KopachuckSOA.RDS'')
saveRDS(t,'KopachuckSOA.RDS')
t %>% group_by(neuron) %>%
mutate(time=row_number()) ->
t
t %>%
group_by(neuron) %>%
mutate(s=markSaccades(conj.velocity,buffer=10,threshold=10),
isfixation=s<0) %>%
filter(isfixation) %>% #This removes all saccades from the dataframe
group_by(neuron,s) %>%
mutate(meanfr=mean(sdf),
maxfr=max(sdf),
R.Hor=mean(rep),
R.Ver=mean(repV),
L.Hor=mean(lep),
L.Ver=mean(lepV),
# exatrope= monkey=='Pilchuck',
mean.Verg.Angle=mean(verg.angle),
mean.Verg.Vel=mean(verg.velocity),
# mean.Verg.Angle=replace(mean.Verg.Angle, mean.Verg.Angle<0 & ~exatrope , NA),
# mean.Verg.Angle=replace(mean.Verg.Angle, mean.Verg.Angle>0 & exatrope,NA ),
# mean.Verg.Angle=replace(mean.Verg.Angle,abs(mean.Verg.Angle)>50, NA),
max.Verg.Vel = max(verg.velocity),
max.Verg.Ang = max(verg.angle),
nspikes=sum(rasters),
dur=n(),
mean.Spikerate=sum(rasters)/dur*1000,
R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)))->
m
# m %>%
#   filter(dur>50,monkey=='Kopachuck',
#          mean.Spikerate>20) %>%
#   summarize(mean.Spikerate=mean.Spikerate[1],
#             mean.Verg.Angle=mean.Verg.Angle[1],
#             dur=dur[1]) ->
# summaryforplot
m %>%
group_by(neuron,s) %>%
# dplyr::filter(dur>50) %>%
summarize(mean.Spikerate=mean.Spikerate[1],
mean.Verg.Angle=mean.Verg.Angle[1],
mean.Verg.Vel=first(mean.Verg.Vel),
dur=dur[1],
mean.time=mean(time),
cellnum=cellnum[1],
maxfr=maxfr[1],
max.verg.angle=max.Verg.Ang[1],
max.verg.velocity=max.Verg.Vel[1]) ->
summaryforplot
summaryforplot %>%
group_by(neuron) %>%
filter(mean.Verg.Vel<1,
dur>75) %>%
mutate(r=cor(mean.Verg.Angle,mean.Spikerate)) ->
sp
# m<- NULL
# s.old<-readRDS('NRTPsummaryforplot.RDS')
# summaryforplot<-rbind(s.old,summaryforplot)
#
# saveRDS(rbind(s.old,summaryforplot),'NRTPsummaryforplot-new.RDS')
#
# summaryforplot<- readRDS('NRTPsummaryforplot-new.RDS')
ggplot(aes(mean.Verg.Angle,mean.Spikerate),data=sp)+
geom_point(aes(color=mean.time),size=2,alpha=1/2)+
scale_color_continuous(low='black',high='orange')+
# facet_wrap(~neuron,scales='free_x')+
facet_wrap(~neuron,ncol=2)+
stat_smooth(method='lm')+
geom_label(aes(0,100,label=paste('r = ',round(r,2))))+
ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
#
# gp<-ggplot(aes(mean.Verg.Angle,mean.Spikerate),data=filter(sp,mean.Verg.Angle> -5))+
# geom_point(size=2,alpha=1/5)+
# # facet_wrap(~neuron,scales='free_x')+
# facet_wrap(~neuron,ncol=3)+
# stat_smooth(method='lm')+
# geom_label(aes(0,100,label=paste('r = ',round(r,2))))+
# ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
# ggsave('TestRasterLabel.png',height=45,width=5,plot=gp)
# gp<- ggplot(filter(summaryforplot,dur>50,cellnum %in% c(1,25,28))) +
# geom_point(aes(mean.Verg.Angle,mean.Spikerate),size=2,alpha=1/5)+
#   # facet_wrap(~neuron,scales='free_x')+
#     facet_wrap(~neuron,ncol=2)+
#   stat_smooth(method='lm')+
#   ggtitle('Firing Rate as a function of Vergence Angle during Fixations')+
#   xlab('Mean Vergence Angle (deg)')+
#   ylab('Mean Firing Rate (spk/s)')+
#   theme_bw()
# ggsave('NRTP-RatePosition.PDF',plot=gp)
#
# gp<- ggplot(filter(summaryforplot,dur>50,cellnum %in% c(30))) +
# geom_point(aes(mean.Verg.Angle,mean.Spikerate),size=3,alpha=1/2)+
#   # facet_wrap(~neuron,scales='free_x')+
#     facet_wrap(~neuron,ncol=2)+
#   stat_smooth(method='lm')+
#   ggtitle('Firing Rate as a function of Vergence Angle during Fixations')+
#   xlab('Mean Vergence Angle (deg)')+
#   ylab('Mean Firing Rate (spk/s)')+
#   theme_bw()
# ggsave('NRTP-RatePosition-Single.PDF',plot=gp)
# qplot(mean.Verg.Angle,mean.Spikerate,data=summaryforplot)+
#   geom_point()+
#   stat_smooth(method='lm')+
#   facet_wrap(~neuron)+
#   ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
m %>%
group_by(neuron,s) %>%
# dplyr::filter(dur>50) %>%
summarize(mean.Spikerate=mean.Spikerate[1],
mean.Verg.Angle=mean.Verg.Angle[1],
mean.Verg.Vel=first(mean.Verg.Vel),
mean.R.Hor=first(R.Hor),
mean.R.Ver=first(R.Ver),
mean.L.Hor=first(L.Hor),
mean.L.Ver=first(L.Ver),
mean.C.Hor=(mean.R.Hor+mean.L.Hor)/2,
mean.C.Ver=(mean.R.Ver+mean.L.Ver)/2,
dur=dur[1],
mean.time=mean(time),
cellnum=cellnum[1],
maxfr=maxfr[1],
max.verg.angle=max.Verg.Ang[1],
max.verg.velocity=max.Verg.Vel[1]) ->
summaryforplot
#first, plot conjugate X-Y with color as firing rate
ggplot(filter(summaryforplot,abs(mean.C.Ver)<25,abs(mean.C.Hor)<25))+
geom_point(aes(mean.C.Hor,mean.C.Ver,color=mean.Spikerate),size=2)+
facet_wrap(~neuron,ncol=2,scales='free')
makeRelImp<- function(summaryforplot,formula='mean.Spikerate~mean.Verg.Angle+mean.C.Ver',normalize=TRUE){
summaryforplot %>%
group_by(neuron) %>%
do(m=lm(formula=formula,data=.))->
mm
r<- data.frame()
r2 <- NULL
if (length(mm$m[[1]]$coefficients)<3){
message('Not enough parameters for importance calculation...')
message('Returning r.squared only.')
for (i in 1:nrow(mm)){
r2[i]<- summary(mm$m[[i]])$r.squared
}
r<- data.frame(neuron=mm$neuron,R2=r2)
return(r)
}
for (i in 1:nrow(mm)){
# message('Trying...')
bb<- relaimpo::calc.relimp(mm$m[[i]],rela=normalize)
b<- bb$lmg
r<-rbind(r,b)
r2<- c(r2,bb$R2)
}
r$neuron<-mm$neuron
r$R2<- r2
names(r)<- c(names(b),'neuron','R2')
r
}
r<- makeRelImp(summaryforplot,formula='mean.Spikerate~mean.Verg.Angle+mean.C.Hor',norm=FALSE)
ggplot(aes(mean.C.Hor,mean.Verg.Angle),size=2,data=r)+
geom_point()+
geom_text(aes(label=neuron))+
geom_abline(slope=1)+
xlim(c(0,1))+
ylim(c(0,1))
r<- makeRelImp(summaryforplot,formula='mean.Spikerate~mean.Verg.Angle+mean.C.Ver',norm=FALSE)
ggplot(aes(mean.C.Ver,mean.Verg.Angle),size=2,data=r)+
geom_point()+
geom_text(aes(label=neuron))+
geom_abline(slope=1)+
xlim(c(0,1))+
ylim(c(0,1))
r<- makeRelImp(summaryforplot,formula='mean.Spikerate~mean.Verg.Angle',norm=FALSE)
ggplot(r)+geom_bar(aes(neuron,R2),stat='identity')
r<- makeRelImp(summaryforplot,formula='mean.Spikerate~mean.R.Ver+mean.L.Ver',norm=FALSE)
ggplot(aes(mean.R.Ver,mean.L.Ver),size=2,data=r)+
geom_point()+
geom_text(aes(label=neuron))+
geom_abline(slope=1)+
xlim(c(0,1))+
ylim(c(0,1))
r<- makeRelImp(summaryforplot,formula='mean.Spikerate~mean.R.Hor+mean.L.Hor',norm=FALSE)
ggplot(aes(mean.R.Hor,mean.L.Hor),size=2,data=r)+
geom_point()+
geom_text(aes(label=neuron))+
geom_abline(slope=1)+
xlim(c(0,1))+
ylim(c(0,1))
o<-readRDS('KopachuckSOA.RDS')
tx<- loadnewcsv(path="C:/Users/setup/Desktop/NRTP Vergence/SOASTRAB/",referencefile=o)
tx<- loadnewcsv(path="C:/Users/setup/Desktop/NRTP Vergence/SOASTRAB/",referencefile=o)
source('loadnewcsv.R')
tx<- loadnewcsv(path="C:/Users/setup/Desktop/NRTP Vergence/SOASTRAB/",referencefile=o)
t<- loadnewcsv(path="C:/Users/setup/Desktop/NRTP Vergence/SOASTRAB/",referencefile=o)
t<- rbind(o,t)
o<-NULL
t<- loadnewcsv(path="C:/Users/setup/Desktop/NRTP Vergence/SOASTRAB/pil",referencefile=o)
t<- loadnewcsv(path="C:/Users/setup/Desktop/NRTP Vergence/SOASTRAB/pil/",referencefile=o)
t %>%
group_by(neuron) %>%
mutate(s=markSaccades(conj.velocity,buffer=10,threshold=10),
isfixation=s<0) %>%
filter(isfixation) %>% #This removes all saccades from the dataframe
group_by(neuron,s) %>%
mutate(meanfr=mean(sdf),
maxfr=max(sdf),
R.Hor=mean(rep),
R.Ver=mean(repV),
L.Hor=mean(lep),
L.Ver=mean(lepV),
# exatrope= monkey=='Pilchuck',
mean.Verg.Angle=mean(verg.angle),
mean.Verg.Vel=mean(verg.velocity),
# mean.Verg.Angle=replace(mean.Verg.Angle, mean.Verg.Angle<0 & ~exatrope , NA),
# mean.Verg.Angle=replace(mean.Verg.Angle, mean.Verg.Angle>0 & exatrope,NA ),
# mean.Verg.Angle=replace(mean.Verg.Angle,abs(mean.Verg.Angle)>50, NA),
max.Verg.Vel = max(verg.velocity),
max.Verg.Ang = max(verg.angle),
nspikes=sum(rasters),
dur=n(),
mean.Spikerate=sum(rasters)/dur*1000,
R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)))->
m
# m %>%
#   filter(dur>50,monkey=='Kopachuck',
#          mean.Spikerate>20) %>%
#   summarize(mean.Spikerate=mean.Spikerate[1],
#             mean.Verg.Angle=mean.Verg.Angle[1],
#             dur=dur[1]) ->
# summaryforplot
m %>%
group_by(neuron,s) %>%
# dplyr::filter(dur>50) %>%
summarize(mean.Spikerate=mean.Spikerate[1],
mean.Verg.Angle=mean.Verg.Angle[1],
mean.Verg.Vel=first(mean.Verg.Vel),
dur=dur[1],
mean.time=mean(time),
cellnum=cellnum[1],
maxfr=maxfr[1],
max.verg.angle=max.Verg.Ang[1],
max.verg.velocity=max.Verg.Vel[1]) ->
summaryforplot
summaryforplot %>%
group_by(neuron) %>%
filter(mean.Verg.Vel<1,
dur>75) %>%
mutate(r=cor(mean.Verg.Angle,mean.Spikerate)) ->
sp
# m<- NULL
# s.old<-readRDS('NRTPsummaryforplot.RDS')
# summaryforplot<-rbind(s.old,summaryforplot)
#
# saveRDS(rbind(s.old,summaryforplot),'NRTPsummaryforplot-new.RDS')
#
# summaryforplot<- readRDS('NRTPsummaryforplot-new.RDS')
ggplot(aes(mean.Verg.Angle,mean.Spikerate),data=sp)+
geom_point(aes(color=mean.time),size=2,alpha=1/2)+
scale_color_continuous(low='black',high='orange')+
# facet_wrap(~neuron,scales='free_x')+
facet_wrap(~neuron,ncol=2)+
stat_smooth(method='lm')+
geom_label(aes(0,100,label=paste('r = ',round(r,2))))+
ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
#
# gp<-ggplot(aes(mean.Verg.Angle,mean.Spikerate),data=filter(sp,mean.Verg.Angle> -5))+
# geom_point(size=2,alpha=1/5)+
# # facet_wrap(~neuron,scales='free_x')+
# facet_wrap(~neuron,ncol=3)+
# stat_smooth(method='lm')+
# geom_label(aes(0,100,label=paste('r = ',round(r,2))))+
# ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
# ggsave('TestRasterLabel.png',height=45,width=5,plot=gp)
# gp<- ggplot(filter(summaryforplot,dur>50,cellnum %in% c(1,25,28))) +
# geom_point(aes(mean.Verg.Angle,mean.Spikerate),size=2,alpha=1/5)+
#   # facet_wrap(~neuron,scales='free_x')+
#     facet_wrap(~neuron,ncol=2)+
#   stat_smooth(method='lm')+
#   ggtitle('Firing Rate as a function of Vergence Angle during Fixations')+
#   xlab('Mean Vergence Angle (deg)')+
#   ylab('Mean Firing Rate (spk/s)')+
#   theme_bw()
# ggsave('NRTP-RatePosition.PDF',plot=gp)
#
# gp<- ggplot(filter(summaryforplot,dur>50,cellnum %in% c(30))) +
# geom_point(aes(mean.Verg.Angle,mean.Spikerate),size=3,alpha=1/2)+
#   # facet_wrap(~neuron,scales='free_x')+
#     facet_wrap(~neuron,ncol=2)+
#   stat_smooth(method='lm')+
#   ggtitle('Firing Rate as a function of Vergence Angle during Fixations')+
#   xlab('Mean Vergence Angle (deg)')+
#   ylab('Mean Firing Rate (spk/s)')+
#   theme_bw()
# ggsave('NRTP-RatePosition-Single.PDF',plot=gp)
# qplot(mean.Verg.Angle,mean.Spikerate,data=summaryforplot)+
#   geom_point()+
#   stat_smooth(method='lm')+
#   facet_wrap(~neuron)+
#   ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
ggplot(aes(mean.Verg.Angle,mean.Spikerate),data=sp)+
geom_point(aes(color=mean.time),size=2,alpha=1/2)+
scale_color_continuous(low='black',high='orange')+
# facet_wrap(~neuron,scales='free_x')+
facet_wrap(~neuron,ncol=2)+
stat_smooth(method='lm')+
geom_label(aes(0,100,label=paste('r = ',round(r,2))))+
ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
m %>%
group_by(neuron,s) %>%
# dplyr::filter(dur>50) %>%
summarize(mean.Spikerate=mean.Spikerate[1],
mean.Verg.Angle=mean.Verg.Angle[1],
mean.Verg.Vel=first(mean.Verg.Vel),
mean.R.Hor=first(R.Hor),
mean.R.Ver=first(R.Ver),
mean.L.Hor=first(L.Hor),
mean.L.Ver=first(L.Ver),
mean.C.Hor=(mean.R.Hor+mean.L.Hor)/2,
mean.C.Ver=(mean.R.Ver+mean.L.Ver)/2,
dur=dur[1],
mean.time=mean(time),
cellnum=cellnum[1],
maxfr=maxfr[1],
max.verg.angle=max.Verg.Ang[1],
max.verg.velocity=max.Verg.Vel[1]) ->
summaryforplot
#first, plot conjugate X-Y with color as firing rate
ggplot(filter(summaryforplot,abs(mean.C.Ver)<25,abs(mean.C.Hor)<25))+
geom_point(aes(mean.C.Hor,mean.C.Ver,color=mean.Spikerate),size=2)+
facet_wrap(~neuron,ncol=2,scales='free')
makeRelImp<- function(summaryforplot,formula='mean.Spikerate~mean.Verg.Angle+mean.C.Ver',normalize=TRUE){
summaryforplot %>%
group_by(neuron) %>%
do(m=lm(formula=formula,data=.))->
mm
r<- data.frame()
r2 <- NULL
if (length(mm$m[[1]]$coefficients)<3){
message('Not enough parameters for importance calculation...')
message('Returning r.squared only.')
for (i in 1:nrow(mm)){
r2[i]<- summary(mm$m[[i]])$r.squared
}
r<- data.frame(neuron=mm$neuron,R2=r2)
return(r)
}
for (i in 1:nrow(mm)){
# message('Trying...')
bb<- relaimpo::calc.relimp(mm$m[[i]],rela=normalize)
b<- bb$lmg
r<-rbind(r,b)
r2<- c(r2,bb$R2)
}
r$neuron<-mm$neuron
r$R2<- r2
names(r)<- c(names(b),'neuron','R2')
r
}
r<- makeRelImp(summaryforplot,formula='mean.Spikerate~mean.Verg.Angle+mean.C.Hor',norm=FALSE)
ggplot(aes(mean.C.Hor,mean.Verg.Angle),size=2,data=r)+
geom_point()+
geom_text(aes(label=neuron))+
geom_abline(slope=1)+
xlim(c(0,1))+
ylim(c(0,1))
r<- makeRelImp(summaryforplot,formula='mean.Spikerate~mean.Verg.Angle+mean.C.Ver',norm=FALSE)
ggplot(aes(mean.C.Ver,mean.Verg.Angle),size=2,data=r)+
geom_point()+
geom_text(aes(label=neuron))+
geom_abline(slope=1)+
xlim(c(0,1))+
ylim(c(0,1))
r<- makeRelImp(summaryforplot,formula='mean.Spikerate~mean.Verg.Angle',norm=FALSE)
ggplot(r)+geom_bar(aes(neuron,R2),stat='identity')
r<- makeRelImp(summaryforplot,formula='mean.Spikerate~mean.R.Hor+mean.L.Hor',norm=FALSE)
ggplot(aes(mean.R.Hor,mean.L.Hor),size=2,data=r)+
geom_point()+
geom_text(aes(label=neuron))+
geom_abline(slope=1)+
xlim(c(0,1))+
ylim(c(0,1))
r<- makeRelImp(summaryforplot,formula='mean.Spikerate~mean.R.Ver+mean.L.Ver',norm=FALSE)
geom_point()+
ggplot(aes(mean.R.Ver,mean.L.Ver),size=2,data=r)+
geom_text(aes(label=neuron))+
geom_abline(slope=1)+
xlim(c(0,1))+
ylim(c(0,1))
