,
chosensac=slider(1,length(unique(hh$sacnum))))
hh %>%
# filter(sacnum==10)%>%
group_by(block,sacnum) %>%
mutate(gaze.dur=length(counter[!is.na(gazeshifts)])) %>%
ungroup() %>%
filter(gaze.dur>1) ->
hint
hint%>%
group_by(block,sacnum)%>%
summarize(gaze.onset=counter[!is.na(gazeshifts)][1],
gaze.offset=max(counter[!is.na(gazeshifts)]),
gaze.dur=gaze.offset-gaze.onset,
gaze.dur.ms=gaze.dur/samplerate,
gaze.amp=G[counter==gaze.offset]-G[counter==gaze.onset],
IHP=H[counter==gaze.onset],
IGP=G[counter==gaze.onset],
IEP=IGP-IHP,
IEPs=IEP*sign(gaze.amp), #positive number indicates eyes deviated in direction of saccade
peak.gaze.velocity=maxabs(Gv[!is.na(gazeshifts)]),
peak.head.velocity=maxabs(Hv[100:n()]),
target.amp=T[200]-T[1],
head.contribution=H[counter==gaze.offset]-IHP,
eye.contribution=gaze.amp-head.contribution
) %>%
filter(gaze.onset>0,gaze.onset<200)->
hp
hpp<- filter(hp,gaze.dur/samplerate<400)
qplot(gaze.onset/samplerate,bins=30,data=hpp)+
xlab('Gaze Shift Latency (ms)')+
facet_wrap(~block)
qplot(IEP,peak.head.velocity,data=hpp)
qplot(IEP,peak.gaze.velocity,data=hpp)
ggplot(aes(gaze.dur/samplerate,abs(peak.gaze.velocity)),
data=hpp)+
geom_point()+
stat_smooth(method='lm',se=FALSE)+
xlab('Gaze Shift duration (ms)')+
ylab('Peak Gaze Velocity (deg/s)')+
facet_wrap(~block)
htesta%>%
# filter(block=='A-02')%>%
group_by(block) %>%
markTagetMovements(buffer=200,threshold=200,saccade.length=500) ->
htest
htest%>%
filter(!is.na(sacnum))%>%
group_by(block,sacnum) %>%
mutate(firstshift=min(gazeshifts[counter>220&gazeshifts>0],na.rm=T),
gazeshifts=replace(gazeshifts,
gazeshifts!=firstshift|is.na(firstshift),
0),
gazeshifts=replace(gazeshifts,gazeshifts==0,NA),
headmovement=replace(headmovement,headmovement==0,NA),
counter=counter-200)->
hh
hh %>%
group_by(block,sacnum) %>%
mutate(gvsd=round(sd(Gv[1:300])))->
hh
hh %>%
# filter(sacnum==10)%>%
group_by(block,sacnum) %>%
mutate(gaze.dur=length(counter[!is.na(gazeshifts)])) %>%
ungroup() %>%
filter(gaze.dur>1) ->
hint
hint%>%
group_by(block,sacnum)%>%
summarize(gaze.onset=counter[!is.na(gazeshifts)][1],
gaze.offset=max(counter[!is.na(gazeshifts)]),
gaze.dur=gaze.offset-gaze.onset,
gaze.dur.ms=gaze.dur/samplerate,
gaze.amp=G[counter==gaze.offset]-G[counter==gaze.onset],
IHP=H[counter==gaze.onset],
IGP=G[counter==gaze.onset],
IEP=IGP-IHP,
IEPs=IEP*sign(gaze.amp), #positive number indicates eyes deviated in direction of saccade
peak.gaze.velocity=maxabs(Gv[!is.na(gazeshifts)]),
peak.head.velocity=maxabs(Hv[100:n()]),
target.amp=T[200]-T[1],
head.contribution=H[counter==gaze.offset]-IHP,
eye.contribution=gaze.amp-head.contribution
) %>%
filter(gaze.onset>0,gaze.onset<200)->
hp
hpp<- filter(hp,gaze.dur/samplerate<400)
qplot(gaze.onset/samplerate,bins=30,data=hpp)+
xlab('Gaze Shift Latency (ms)')+
facet_wrap(~block)
h<- loadnewheadfree(NULL,path)
head(h)
h<- select(h,-V9)
names(h)<- c('G','GV','H','HV','E','EV','time','T','block','subject','blocknum')
h %>%
# filter(block=='A-02')%>%
select(G,H,T,block) %>% #these are the only data we need
group_by(block) %>%
mutate(G=replace(G,G==0,NA), #mark missing data as NA rather than 0
#G=na.approx(G,na.rm=FALSE),
time=row_number(),
Gv=parabolicdiff(G,7)*samplerate,
Hv=parabolicdiff(H,7)*samplerate,
target.velocity=parabolicdiff(T,7)*samplerate,
# gazeshifts=markSaccades(Gv,buffer=5,threshold=30),
gazeshifts=markSaccadesDouble(Gv,threshold1=100,threshold2=10),
headmovement=markSaccadesDouble(Hv,threshold1=10,threshold2=4),
headmovement=replace(headmovement,headmovement<0,0),
gazeshifts=replace(gazeshifts,gazeshifts<0,0)) ->
htesta
htesta%>%
filter(block=='A-02')%>%
group_by(block) %>%
markTagetMovements(buffer=200,threshold=200,saccade.length=500) ->
htest
htest%>%
filter(!is.na(sacnum))%>%
group_by(block,sacnum) %>%
mutate(firstshift=min(gazeshifts[counter>220&gazeshifts>0],na.rm=T),
gazeshifts=replace(gazeshifts,
gazeshifts!=firstshift|is.na(firstshift),
0),
gazeshifts=replace(gazeshifts,gazeshifts==0,NA),
headmovement=replace(headmovement,headmovement==0,NA),
counter=counter-200)->
hh
manipulate(ggplot(filter(hh,sacnum==chosensac))+
geom_line(aes(counter,H),color='blue')+
# geom_line(aes(counter,Ef),color='red')+
geom_line(aes(counter,G),color='darkgreen')+
geom_line(aes(counter,T),size=2,alpha=0.5)+
geom_line(aes(counter,Hv/10),color='blue',linetype=2)+
# geom_line(aes(counter,EV/10),color='red')+
geom_line(aes(counter,Gv/10),color='darkgreen',linetype=2)+
# geom_text(x=0,y=50,aes(label=round(sd(Gv),2)))+
# geom_text(x=0,y=60,aes(label=firstshift[1]))+
geom_line(aes(counter,sign(gazeshifts)*Gv/10),size=2,color='darkgreen')+
geom_line(aes(counter,sign(headmovement)*Hv/10),color='blue',size=2)
,
chosensac=slider(1,length(unique(hh$sacnum))))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(knitr)
library(tidyr)
library(manipulate)
# library(broom)
# library(grid)
# library(relaimpo)
# library(leaps)
#library(data.table)
# library(stringr)
library(dplyr)
library(cladoRcpp)
select<-dplyr::select
# source('joinsaccadesuniform.R')
source('Adamhelperfunctions.R')
source('markSaccadesDouble2.R')
markTagetMovements<-function(t,buffer=200,threshold=1000,saccade.length=1000){
findSaccades<-function(ev,threshold=40){
mindur<- 1
i<-which(abs(ev)>threshold) #find all the times when speed > threshold
sacoff<-which(diff(i)>mindur) #minimum duration of an accepted saccade
sacon<-c(1,sacoff+1) #first saccade
sacoff<-c(sacoff,length(i)) #end of last saccade
saccade.onset<-i[sacon] #get actual times
saccade.offset<-i[sacoff]
return(data.frame(saccade.onset,saccade.offset))
}
jsac<- function(stimes){
summary(stimes)
#input should be an array of length 2: c(onsettime,offsettime, saccade.number,saccade.dur)
df<- data.frame(time=stimes[[1]]:stimes[[2]])
df$sacnum<- stimes[[4]]
df$saccade.dur<- stimes[[3]]
return(df)
# return(stimes[[1]]:stimes[[2]])
}
stimes<-findSaccades(t$target.velocity,threshold)
stimes %>%
mutate(dur=saccade.offset-saccade.onset,
s=row_number(),
saccade.onset=saccade.onset-buffer,
###########HERE IS WHERE i MAKE SACCADES UNIFORM #######
saccade.offset=saccade.onset+saccade.length+2*buffer)->
stimes
x<- as.data.frame(rbindlist(apply(stimes,1,jsac)))
x %>%
group_by(sacnum) %>%
mutate(counter=time-first(time)) ->
x
left_join(t,x,by='time')
}
loadnewheadfree<- function(referencefile=NULL,path="~/kdata/"){
require(stringr)
require(dplyr)
#This function loads .csv files in a particular folder. They must have the same columns for rbind
#Saves time by only reading the csv when necessary
#get names of all files in path
files <- list.files(path=path,pattern='*.txt')
#extract neuron name eg. Bee-01
names<-sapply(files, str_match,"^[a-zA-Z]+-[0-9]+",USE.NAMES=FALSE)
# check for new cells
if (!is.null(referencefile)){
files<-files[!names %in% referencefile$neuron] #comparison
}
nfiles<-length(files)
if (nfiles>0){
message(c('New Files: ',files))
loadedfiles <- lapply(paste(path,files,sep=''),read.csv,sep='\t',header=FALSE)
t<-data.frame()
temp<- NULL
# t.old<-NULL
for (i in 1:nfiles) {
f<- files[i]
message(paste('Loading:',f))
# temp[[i]]=loadedfiles[[i]]
names<-str_match(f,"(^[a-zA-Z]+)-([0-9]+)")
loadedfiles[[i]]$block<-names[1]
loadedfiles[[i]]$subject<-names[2]
loadedfiles[[i]]$blocknum<-as.numeric(names[3])
}
t <-rbindlist(loadedfiles)
# t<- dplyr::select(t, -thp,-tvp,-time)
}else{
message('********NO NEW CELLS********')
t<-NULL
}
return(t)
}
samplerate<- 304.7508/1000
path<- "C:/Users/User/Documents/GitHub/NPH-Analysis/Vergence/kdata/"
h<- loadnewheadfree(NULL,path)
h<- select(h,-V9)
names(h)<- c('G','GV','H','HV','E','EV','time','T','block','subject','blocknum')
h %>%
# filter(block=='A-02')%>%
select(G,H,T,block) %>% #these are the only data we need
group_by(block) %>%
mutate(G=replace(G,G==0,NA), #mark missing data as NA rather than 0
#G=na.approx(G,na.rm=FALSE),
time=row_number(),
Gv=parabolicdiff(G,7)*samplerate,
Hv=parabolicdiff(H,7)*samplerate,
target.velocity=parabolicdiff(T,7)*samplerate,
# gazeshifts=markSaccades(Gv,buffer=5,threshold=30),
gazeshifts=markSaccadesDouble(Gv,threshold1=100,threshold2=10),
headmovement=markSaccadesDouble(Hv,threshold1=10,threshold2=4),
headmovement=replace(headmovement,headmovement<0,0),
gazeshifts=replace(gazeshifts,gazeshifts<0,0)) ->
htesta
htesta%>%
# filter(block=='A-02')%>%
group_by(block) %>%
markTagetMovements(buffer=200,threshold=200,saccade.length=500) ->
htest
htest%>%
filter(!is.na(sacnum))%>%
group_by(block,sacnum) %>%
mutate(firstshift=min(gazeshifts[counter>220&gazeshifts>0],na.rm=T),
gazeshifts=replace(gazeshifts,
gazeshifts!=firstshift|is.na(firstshift),
0),
gazeshifts=replace(gazeshifts,gazeshifts==0,NA),
headmovement=replace(headmovement,headmovement==0,NA),
counter=counter-200)->
hh
hh %>%
group_by(block,sacnum) %>%
mutate(gvsd=round(sd(Gv[1:300])))->
hh
hh %>%
# filter(sacnum==10)%>%
group_by(block,sacnum) %>%
mutate(gaze.dur=length(counter[!is.na(gazeshifts)])) %>%
ungroup() %>%
filter(gaze.dur>1) ->
hint
hint%>%
group_by(block,sacnum)%>%
summarize(gaze.onset=counter[!is.na(gazeshifts)][1],
gaze.offset=max(counter[!is.na(gazeshifts)]),
gaze.dur=gaze.offset-gaze.onset,
gaze.dur.ms=gaze.dur/samplerate,
gaze.amp=G[counter==gaze.offset]-G[counter==gaze.onset],
IHP=H[counter==gaze.onset],
IGP=G[counter==gaze.onset],
IEP=IGP-IHP,
IEPs=IEP*sign(gaze.amp), #positive number indicates eyes deviated in direction of saccade
peak.gaze.velocity=maxabs(Gv[!is.na(gazeshifts)]),
peak.head.velocity=maxabs(Hv[100:n()]),
target.amp=T[200]-T[1],
head.contribution=H[counter==gaze.offset]-IHP,
eye.contribution=gaze.amp-head.contribution
) %>%
filter(gaze.onset>0,gaze.onset<200)->
hp
hpp<- filter(hp,gaze.dur/samplerate<400)
qplot(gaze.onset/samplerate,bins=30,data=hpp)+
xlab('Gaze Shift Latency (ms)')+
facet_wrap(~block)
hpp<- hp
qplot(gaze.onset/samplerate,bins=30,data=hpp)+
xlab('Gaze Shift Latency (ms)')+
facet_wrap(~block)
hh2<- filter(htest,block=='A-02')
manipulate(ggplot(filter(hh,sacnum==chosensac))+
geom_line(aes(counter,H),color='blue')+
# geom_line(aes(counter,Ef),color='red')+
geom_line(aes(counter,G),color='darkgreen')+
geom_line(aes(counter,T),size=2,alpha=0.5)+
geom_line(aes(counter,Hv/10),color='blue',linetype=2)+
# geom_line(aes(counter,EV/10),color='red')+
geom_line(aes(counter,Gv/10),color='darkgreen',linetype=2)+
# geom_text(x=0,y=50,aes(label=round(sd(Gv),2)))+
# geom_text(x=0,y=60,aes(label=firstshift[1]))+
geom_line(aes(counter,sign(gazeshifts)*Gv/10),size=2,color='darkgreen')+
geom_line(aes(counter,sign(headmovement)*Hv/10),color='blue',size=2)
,
chosensac=slider(1,length(unique(hh$sacnum))))
htesta%>%
# filter(block=='A-02')%>%
group_by(block) %>%
do(markTagetMovements(buffer=200,threshold=200,saccade.length=500)) ->
htest
htesta%>%
# filter(block=='A-02')%>%
group_by(block) %>%
do(markTagetMovements(t=.,buffer=200,threshold=200,saccade.length=500)) ->
htest
htest%>%
filter(!is.na(sacnum))%>%
group_by(block,sacnum) %>%
mutate(firstshift=min(gazeshifts[counter>220&gazeshifts>0],na.rm=T),
gazeshifts=replace(gazeshifts,
gazeshifts!=firstshift|is.na(firstshift),
0),
gazeshifts=replace(gazeshifts,gazeshifts==0,NA),
headmovement=replace(headmovement,headmovement==0,NA),
counter=counter-200)->
hh
hh %>%
group_by(block,sacnum) %>%
mutate(gvsd=round(sd(Gv[1:300])))->
hh
hh %>%
# filter(sacnum==10)%>%
group_by(block,sacnum) %>%
mutate(gaze.dur=length(counter[!is.na(gazeshifts)])) %>%
ungroup() %>%
filter(gaze.dur>1) ->
hint
hint%>%
group_by(block,sacnum)%>%
summarize(gaze.onset=counter[!is.na(gazeshifts)][1],
gaze.offset=max(counter[!is.na(gazeshifts)]),
gaze.dur=gaze.offset-gaze.onset,
gaze.dur.ms=gaze.dur/samplerate,
gaze.amp=G[counter==gaze.offset]-G[counter==gaze.onset],
IHP=H[counter==gaze.onset],
IGP=G[counter==gaze.onset],
IEP=IGP-IHP,
IEPs=IEP*sign(gaze.amp), #positive number indicates eyes deviated in direction of saccade
peak.gaze.velocity=maxabs(Gv[!is.na(gazeshifts)]),
peak.head.velocity=maxabs(Hv[100:n()]),
target.amp=T[200]-T[1],
head.contribution=H[counter==gaze.offset]-IHP,
eye.contribution=gaze.amp-head.contribution
) %>%
filter(gaze.onset>0,gaze.onset<200)->
hp
hpp<- filter(hp,gaze.dur/samplerate<400)
qplot(gaze.onset/samplerate,bins=30,data=hpp)+
xlab('Gaze Shift Latency (ms)')+
facet_wrap(~block)
qplot(IEP,peak.head.velocity,data=hpp)
qplot(IEP,peak.gaze.velocity,data=hpp)
ggplot(aes(gaze.dur/samplerate,abs(peak.gaze.velocity)),
data=hpp)+
geom_point()+
stat_smooth(method='lm',se=FALSE)+
xlab('Gaze Shift duration (ms)')+
ylab('Peak Gaze Velocity (deg/s)')+
facet_wrap(~block)
ggplot(aes(gaze.amp,peak.gaze.velocity),data=hpp)+
geom_point()+
# stat_smooth(method='lm',se=FALSE)+
# ggtitle('Main Sequence')+
xlab('Gaze Shift Amplitude (deg)')+
ylab('Peak Gaze Velocity (deg/s)')+
facet_wrap(~block)
ggplot(aes(abs(gaze.amp),abs(peak.gaze.velocity)),data=hpp)+
geom_point()+
stat_smooth(method='lm',se=FALSE)+
stat_smooth(color='red',se=FALSE)+
ggtitle('Main Sequence')+
xlab('Gaze Shift Amplitude (deg)')+
ylab('Peak Gaze Speed (deg/s)')+
facet_wrap(~block)
ggplot(aes(abs(gaze.amp),head.contribution/gaze.amp),data=hpp)+
geom_point()
ggplot(hpp)+
geom_point(aes(gaze.amp,peak.gaze.velocity,color=block))
ggplot(hpp)+
geom_point(aes(abs(gaze.amp),abs(peak.gaze.velocity),color=block))
ggplot(hpp,aes(abs(gaze.amp),abs(peak.gaze.velocity),color=block))+
geom_point()+
stat_smooth(method='lm')
ggplot(hpp,aes(abs(gaze.amp),abs(gaze.onset),color=block))+
geom_point()+
stat_smooth(method='lm')
ggplot(hpp,aes(abs(gaze.amp),gaze.onset/samplerate,color=block))+
geom_point()+
stat_smooth(method='lm')
ggplot(hpp,aes(abs(target.amp),abs(peak.gaze.velocity),color=block))+
geom_point()+
stat_smooth(method='lm')
ggplot(hpp,aes(abs(target.amp),abs(gaze.amp),color=block))+
geom_point()+
stat_smooth(method='lm')
ggplot(hpp,aes(abs(target.amp),abs(gaze.amp),color=block))+
geom_point()+
geom_abline()+
stat_smooth(method='lm')
ggplot(hpp,aes(abs(gaze.amp),abs(peak.head.velocity),color=block))+
geom_point()+
stat_smooth(method='lm')
ggplot(hpp,aes(abs(gaze.amp),abs(head.onset),color=block))+
geom_point()+
stat_smooth(method='lm')
names(hpp)
ggplot(hpp,aes(abs(gaze.amp),abs(head.contribution),color=block))+
geom_point()+
stat_smooth(method='lm')
?cu
?cut
hpp <- mutate(hpp,amp.bins=cut(gaze.amp,breaks=c(10,20,30,40,50,60,70,80)))
ggplot(hpp)+
geom_boxplot(aes(amp.bins,gaze.onset/samplerate))
ggplot(hpp)+
geom_boxplot(aes(amp.bins,gaze.onset/samplerate,color=block))
hpp <- mutate(hpp,amp.bins=cut(gaze.amp,breaks=c(0,10,20,30,40,50,60,70,80)))
ggplot(hpp)+
geom_boxplot(aes(amp.bins,gaze.onset/samplerate,color=block))
hpp <- mutate(hpp,amp.bins=cut(gaze.amp,breaks=c(0,10,20,30,40,50,60,70,80,90)))
ggplot(hpp)+
geom_boxplot(aes(amp.bins,gaze.onset/samplerate,color=block))
ggplot(filter(hpp,!is.na(gaze.amp)))+
geom_boxplot(aes(amp.bins,gaze.onset/samplerate,color=block))
ggplot(filter(hpp,!is.na(amp.bins)))+
geom_boxplot(aes(amp.bins,gaze.onset/samplerate,color=block))
hpp <- mutate(hpp,amp.bins=cut(gaze.amp,breaks=c(0,10,20,30,40,50,60,70,80)))
ggplot(filter(hpp,!is.na(amp.bins)))+
geom_boxplot(aes(amp.bins,gaze.onset/samplerate,color=block))
?t.test
hpp %>%
group_by(amp.bins) %>%
summarize(t.test(gaze.onset~block))->
hps
hpp %>%
group_by(amp.bins) %>%
summarize(t.test('gaze.onset~block',data=.))->
hps
hpp <- mutate(hpp,amp.bins=cut(gaze.amp,breaks=c(0,10,20,30,40,50,60,70)))
ggplot(filter(hpp,!is.na(amp.bins)))+
geom_boxplot(aes(amp.bins,gaze.onset/samplerate,color=block))
hpp %>%
group_by(amp.bins) %>%
summarize(t.test('gaze.onset~block',data=.))->
hps
hpp %>%
filter(!is.na(amp.bins)) %>%
group_by(amp.bins) %>%
summarize(t.test('gaze.onset~block',data=.))->
hps
t.test('gaze.onset~block',data=hpp)
t.test('gaze.onset~block',data=hpp,na.rm=T)
t.test(gaze.onset~block,data=hpp,na.rm=T)
hpp %>%
filter(!is.na(amp.bins)) %>%
group_by(amp.bins) %>%
summarize(t.test(gaze.onset~block,data=.))->
hps
hpp %>%
filter(!is.na(amp.bins)) %>%
group_by(amp.bins) %>%
do(tt=t.test(gaze.onset~block,data=.))->
hps
head(hps)
tidy(hps,tt)
library(tidyr)
tidy(hps,tt)
library(broom)
tidy(hps,tt)
hpp %>%
filter(!is.na(amp.bins)) %>%
group_by(amp.bins) %>%
do(tt=t.test(gaze.onset~block,data=.,pairwise=TRUE))->
hps
tidy(hps,tt)
hpp %>%
filter(!is.na(amp.bins)) %>%
group_by(amp.bins) %>%
do(tt=t.test(gaze.onset~block,data=.,paired=TRUE))->
hps
hpp %>%
filter(!is.na(amp.bins)) %>%
group_by(amp.bins) %>%
do(g.onset=t.test(gaze.onset~block,data=.),
hc=t.test(head.contribution~block,data=.))->
hps
tidy(hps,hc)
