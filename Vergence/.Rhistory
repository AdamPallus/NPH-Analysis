attr(file,"names")
attr(file,"levels")
attr(file,"class")
attr(file,"package")
readAttribute(file)
readAttribute(.file)
readAttribute(.Object)
list.attributes(file)
h5attr(file)
Attribute(file)
Attributes(file)
DataSet(file)
readDataSet(file)
file
x<- file[]
length(file)
length(file@dim)
names(file)
str(file)
file$mode
file@mode
file
file['Accept_Sp']
z<- file['Accept_Sp'][]
z<- file['Accept_Sp']
z<- z[]
z<- file['Accept_Sp/values']
head9z
head(z)
str(z)
spk<- z[]
class(spk)
head(spk)
spk<- as.vector(spk)
head(spk)
qplot(spk)
max(spk)
max(rep)
min(rep)
list.dataset(file)
list.datasets(file)
list.datasets(file, '/')
list.datasets(file
list.datasets(file, recursive=false)
list.datasets(file, recursive=false)
list.datasets(file, recursive=FALSE)
list.datasets(file, '/', recursive=FALSE)
list.datasets(file, '//', recursive=FALSE)
list.datasets(file, path='/', recursive=FALSE)
list.datasets(file, path='/')
list.datasets(file, path='/',follow.links=FALSE)
list.datasets(file, path='/',follow.links=F)
list.datasets(file, path='/',full.names=F)
l<- list.datasets(file)
class(l)
l[1]
l[2]
strsplit(l[1])
strsplit(l[1], split='/')
s<- strsplit(l[1], split='/')
s[1]
s[2]
s[[2]]
s[[1]]
s[[1]][1]
s[[1]][2]
h5close(file)
filename<- tclvalue(tkgetOpenFile(parent=w,filetypes = "{ {MAT Files} {.mat} }"))
w<- tktoplevel()
filename<- tclvalue(tkgetOpenFile(parent=w,filetypes = "{ {MAT Files} {.mat} }"))
tkraise(w)
tkdestroy(w)
file<- h5file(filename)
w<- tktoplevel()
filename<- tclvalue(tkgetOpenFile(parent=w,filetypes = "{ {MAT Files} {.mat} }"))
tkraise(w)
tkdestroy(w)
file<- h5file(filename)
file<- h5file(filename)
file
l<- list.datasets(file)
l
s<- strsplit(l, split='/')
s
s[[1]][2]
?sapply
?lapply
getname<- function(s){ return(s[2])}
n<- lapply(s, getname)
n
unique(n)
n<- unique(n)
n
n<- sapply(s, getname)
unique(n)
file['spiketimes']
zz<- file['spiketimes']
spiketimes<- zz[]
class(spiketimes)
spiketimes<- as.vector(zz[])
head(spiketimes)
max(spiketimes)
zz
zz[]
attr(zz[])
qplot(spiketimes)
tryCatch({
m<- readMat(filename)
}, error =function() {
warning('Loading as H5...')
}, finally =  {
file<- h5file(filename)
isH5<- TRUE
})
}
tryCatch({
m<- readMat(filename)
}, error =function() {
warning('Loading as H5...')
}, finally =  {
file<- h5file(filename)
isH5<- TRUE
})
tryCatch({
m<- readMat(filename)
}, finally =  {
file<- h5file(filename)
isH5<- TRUE
})
tryCatch({
m<- readMat(filename)
}, error =function(e) {
warning('Loading as H5...')
}, finally =  {
file<- h5file(filename)
isH5<- TRUE
})
tryCatch({
m<- readMat(filename)
}, error =function(e) {
warning('Loading as H5...')
}, warning=function(w) {}, finally =  {
file<- h5file(filename)
isH5<- TRUE
})
isH5
file
file<-NULL
tryCatch({
m<- readMat(filename)
}, error =function(e) {
warning('Loading as H5...')
}, warning=function(w) {}, finally =  {
file<- h5file(filename)
isH5<- TRUE
})
file
tryCatch({
m<- readMat(filename)
}, error =function(e) {
print('Loading as H5...')
}, warning=function(w) {}, finally =  {
file<- h5file(filename)
isH5<- TRUE
})
n<- tryCatch({
m<- readMat(filename)
}, error =function(e) {
print('Loading as H5...')
}, warning=function(w) {}, finally =  {
file<- h5file(filename)
isH5<- TRUE
})
n<- tryCatch({
m<- readMat(filename)
}, error =function(e) {
print('Loading as H5...')
}, warning=function(w) {print('Loading as H5...')}, finally =  {
file<- h5file(filename)
isH5<- TRUE
})
n<- tryCatch({
m<- readMat(filename)
}, error =function(e) {
message('Loading as H5...')
}, warning=function(w) {message('Loading as H5...')}, finally =  {
file<- h5file(filename)
isH5<- TRUE
})
?field
if (isH5){
l<- list.datasets(file)
s<- strsplit(l, split='/')
getname<- function(s){ return(s[2])}
n<- sapply(s, getname)
fields<- unique(n)
}
n
fields
win1 <- tktoplevel()
win1$env$lst <- tk2listbox(win1, height = 20, selectmode = "single")
tkgrid(tk2label(win1, text = "Select Spiketimes", justify = "left"),
padx = 10, pady =c(15, 5), sticky = "w")
tkgrid(win1$env$lst, padx = 10, pady = c(5, 10))
if (isH5){
l<- list.datasets(file)
s<- strsplit(l, split='/')
getname<- function(s){ return(s[2])}
n<- sapply(s, getname)
fields<- unique(n)
} else{
fields <- names(m)
}
win1 <- tktoplevel()
win1$env$lst <- tk2listbox(win1, height = 20, selectmode = "single")
tkgrid(tk2label(win1, text = "Select Spiketimes", justify = "left"),
padx = 10, pady =c(15, 5), sticky = "w")
tkgrid(win1$env$lst, padx = 10, pady = c(5, 10))
for (field in fields)
tkinsert(win1$env$lst, "end", field)
# Default fruit is Banana.  Indexing starts at zero.
tkselection.set(win1$env$lst, 2)
onOK <- function() {
fieldChoice <- fields[as.numeric(tkcurselection(win1$env$lst)) + 1]
# spiketimes<- as.vector(m[fruitChoice])
assign("fieldChoice",fieldChoice, envir = .GlobalEnv)
tkdestroy(win1)
}
win1$env$butOK <-tk2button(win1, text = "OK", width = -6, command = onOK)
tkgrid(win1$env$butOK, padx = 10, pady = c(5, 15))
fieldChoice
file[fieldchoice]
file[fieldChoice]
z<- file[fieldChoice]
z<- z[]
z<- file[fieldChoice]
zz<- as.vector(z[])
head(zz)
if (isH5){
spiketimes<- file[fieldChoice]
spiketimes<- as.vector(spiketimes[])
}else{
spiketimes<- m[fieldChoice]
spiketimes<- as.vector(spiketimes[[1]])
# print(head(spiketimes))
}
TimeShift<- first(spiketimes)
isi<- spiketimes[-1]-spiketimes[-(length(spiketimes)-1)]
spiketimes<-spiketimes[-1]
p<- data.frame(spiketimes=spiketimes,isi=isi)
bp<- f.BPsummary(list(p),Pthresh=plimit,p0=p0,thresh1=qnorm(pausethresh),thresh0=qnorm(burstthresh))
bp$burst[[1]] %>%
group_by(clusid) %>%
summarise(start_burst=min(start)+TimeShift,
end_burst=max(end)+TimeShift,
duration_burst=end_burst-start_burst,
p_burst=first(adjP)) ->
bursts
bp$pause[[1]] %>%
group_by(clusid) %>%
summarise(start_pause=min(start)+TimeShift,
end_pause=max(end)+TimeShift,
duration_pause=end_pause-start_pause,
p_pause=first(adjP)) ->
pauses
pauseMAT()
source('~/GitHub/NPH-Analysis/Vergence/pauseMAT.R')
pauseMAT()
pauseMAT()
w<- tktoplevel()
filename<- tclvalue(tkgetOpenFile(parent=w,filetypes = "{ {MAT Files} {.mat} }"))
tkraise(w)
tkdestroy(w)
if (!nchar(filename)) {
stop('No File Selected')
} else {
z<- strsplit(filename,'/')
z<- z[[1]]
savename<-z[length(z)]
message(paste('Loading',savename,'...'))
savename<- paste(substr(savename,1,nchar(savename)-4),'-pauses.mat',sep='')
isH5<- FALSE
n<- tryCatch({
m<- readMat(filename)
}, error =function(e) {
message('Loading as H5...')
}, warning=function(w) {message('Loading as H5...')}, finally =  {
file<- h5file(filename)
isH5<- TRUE
})
}
if (isH5){
l<- list.datasets(file)
s<- strsplit(l, split='/')
getname<- function(s){ return(s[2])}
n<- sapply(s, getname)
fields<- unique(n)
} else{
fields <- names(m)
}
win1 <- tktoplevel()
win1$env$lst <- tk2listbox(win1, height = 20, selectmode = "single")
tkgrid(tk2label(win1, text = "Select Spiketimes", justify = "left"),
padx = 10, pady =c(15, 5), sticky = "w")
tkgrid(win1$env$lst, padx = 10, pady = c(5, 10))
for (field in fields)
tkinsert(win1$env$lst, "end", field)
# Default fruit is Banana.  Indexing starts at zero.
tkselection.set(win1$env$lst, 2)
onOK <- function() {
fieldChoice <- fields[as.numeric(tkcurselection(win1$env$lst)) + 1]
# spiketimes<- as.vector(m[fruitChoice])
assign("fieldChoice",fieldChoice, envir = .GlobalEnv)
tkdestroy(win1)
}
win1$env$butOK <-tk2button(win1, text = "OK", width = -6, command = onOK)
tkgrid(win1$env$butOK, padx = 10, pady = c(5, 15))
tkwait.window(win1)
fieldChoice<- as.character(fieldChoice[[1]])
if (isH5){
spiketimes<- file[fieldChoice]
spiketimes<- as.vector(spiketimes[])
}else{
spiketimes<- m[fieldChoice]
spiketimes<- as.vector(spiketimes[[1]])
# print(head(spiketimes))
}
spiketimes
spiketimes<- file[paste(fieldChoice,values,sep='/')]
file[fieldChoice]
file['Accept_Sp/values']
spiketimes<- file[paste(fieldChoice,'values',sep='/')]
spiketimes[]
if (isH5){
n<- tryCatch({
spiketimes<- file[fieldChoice]
spiketimes<- as.vector(spiketimes[])
}, finally{
spiketimes<- file[paste(fieldChoice,'values',sep='/')]
spiketimes<- as.vector(spiketimes[])
})
if (isH5){
n<- tryCatch({
spiketimes<- file[fieldChoice]
spiketimes<- as.vector(spiketimes[])
}, finally{
spiketimes<- file[paste(fieldChoice,'values',sep='/')]
spiketimes<- as.vector(spiketimes[])
})
}else{
spiketimes<- m[fieldChoice]
spiketimes<- as.vector(spiketimes[[1]])
# print(head(spiketimes))
}
n<- tryCatch({
spiketimes<- file[fieldChoice]
spiketimes<- as.vector(spiketimes[])
}, finally{
spiketimes<- file[paste(fieldChoice,'values',sep='/')]
spiketimes<- as.vector(spiketimes[])
})
tryCatch({
spiketimes<- file[fieldChoice]
spiketimes<- as.vector(spiketimes[])
}, finally{
spiketimes<- file[paste(fieldChoice,'values',sep='/')]
spiketimes<- as.vector(spiketimes[])
})
if (isH5){
n<- tryCatch({
spiketimes<- file[fieldChoice]
spiketimes<- as.vector(spiketimes[])
}, finally={
spiketimes<- file[paste(fieldChoice,'values',sep='/')]
spiketimes<- as.vector(spiketimes[])
})
}else{
spiketimes<- m[fieldChoice]
spiketimes<- as.vector(spiketimes[[1]])
# print(head(spiketimes))
}
spiketimes<- file[paste(fieldChoice,'values',sep='/')]
spiketimes<- as.vector(spiketimes[])
if (isH5){
n<- tryCatch({
spiketimes<- file[fieldChoice]
spiketimes<- as.vector(spiketimes[])
}, error={},finally={
spiketimes<- file[paste(fieldChoice,'values',sep='/')]
spiketimes<- as.vector(spiketimes[])
})
source('~/GitHub/NPH-Analysis/Vergence/pauseMAT.R')
closeH5(file)
h5close(file)
source('~/GitHub/NPH-Analysis/Vergence/pauseMAT.R')
pauseMAT()
source('~/GitHub/NPH-Analysis/Vergence/pauseMAT.R')
pauseMAT()
w<- tktoplevel()
filename<- tclvalue(tkgetOpenFile(parent=w,filetypes = "{ {MAT Files} {.mat} }"))
tkraise(w)
tkdestroy(w)
# filename <- tclvalue(tkgetOpenFile(filetypes = "{ {MAT Files} {.mat} }"))
if (!nchar(filename)) {
stop('No File Selected')
} else {
z<- strsplit(filename,'/')
z<- z[[1]]
savename<-z[length(z)]
message(paste('Loading',savename,'...'))
savename<- paste(substr(savename,1,nchar(savename)-4),'-pauses.mat',sep='')
isH5<- FALSE
n<- tryCatch({
m<- readMat(filename)
}, error =function(e) {
message('Loading as H5...')
}, warning=function(w) {message('Loading as H5...')}, finally =  {
file<- h5file(filename)
isH5<- TRUE
})
}
if (isH5){
l<- list.datasets(file)
s<- strsplit(l, split='/')
getname<- function(s){ return(s[2])}
n<- sapply(s, getname)
fields<- unique(n)
} else{
fields <- names(m)
}
win1 <- tktoplevel()
win1$env$lst <- tk2listbox(win1, height = 20, selectmode = "single")
tkgrid(tk2label(win1, text = "Select Spiketimes", justify = "left"),
padx = 10, pady =c(15, 5), sticky = "w")
tkgrid(win1$env$lst, padx = 10, pady = c(5, 10))
for (field in fields)
tkinsert(win1$env$lst, "end", field)
# Default fruit is Banana.  Indexing starts at zero.
tkselection.set(win1$env$lst, 2)
onOK <- function() {
fieldChoice <- fields[as.numeric(tkcurselection(win1$env$lst)) + 1]
# spiketimes<- as.vector(m[fruitChoice])
assign("fieldChoice",fieldChoice, envir = .GlobalEnv)
tkdestroy(win1)
}
win1$env$butOK <-tk2button(win1, text = "OK", width = -6, command = onOK)
tkgrid(win1$env$butOK, padx = 10, pady = c(5, 15))
tkwait.window(win1)
fieldChoice<- as.character(fieldChoice[[1]])
if (isH5){
n<- tryCatch({
spiketimes<- file[fieldChoice]
spiketimes<- as.vector(spiketimes[])
}, error= function(e) {},finally={
spiketimes<- file[paste(fieldChoice,'values',sep='/')]
spiketimes<- as.vector(spiketimes[])
})
}else{
spiketimes<- m[fieldChoice]
spiketimes<- as.vector(spiketimes[[1]])
# print(head(spiketimes))
}
spiketimes[1]
spiketimes[10]
qplot(spiketimes)
source('~/GitHub/NPH-Analysis/Vergence/pauseMAT.R')
pauseMAT()
source('~/GitHub/NPH-Analysis/Vergence/pauseMAT.R')
source('~/GitHub/NPH-Analysis/Vergence/pauseMAT.R')
pauseMAT()
source('~/GitHub/NPH-Analysis/Vergence/pauseMAT.R')
pauseMAT()
pauseMAT()
isH5<- tryCatch({
m<- readMat(filename)
}, error =function(e) {
message('Loading as H5...')
return(TRUE)
}, warning=function(w) {message('Loading as H5...')}
)
isH5
isH5<- tryCatch({
m<- readMat(filename)
}, error =function(e) {
message('Loading as H5...')
return(TRUE)
}
)
isH5
isH5 <- NULL
isH5
isH5<- tryCatch({
m<- readMat(filename)
}, error =function(e) {
message('Loading as H5...')
return(TRUE)
}
)
isH5
isH5<- tryCatch({
suppressWarnings(m<- readMat(filename))
}, error =function(e) {
message('Loading as H5...')
return(TRUE)
}
)
isH5
source('~/GitHub/NPH-Analysis/Vergence/pauseMAT.R')
source('~/GitHub/NPH-Analysis/Vergence/pauseMAT.R')
pauseMAT()
source('~/GitHub/NPH-Analysis/Vergence/pauseMAT.R')
pauseMAT()
