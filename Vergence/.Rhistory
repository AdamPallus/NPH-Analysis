#
# saveRDS(rbind(s.old,summaryforplot),'NRTPsummaryforplot-new.RDS')
#
# summaryforplot<- readRDS('NRTPsummaryforplot-new.RDS')
ggplot(aes(mean.Verg.Angle,mean.Spikerate),data=summaryforplot)+
geom_point(size=2,alpha=1/5)+
# facet_wrap(~neuron,scales='free_x')+
facet_wrap(~neuron,ncol=2)+
stat_smooth(method='lm')+
ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
# qplot(mean.Verg.Angle,mean.Spikerate,data=summaryforplot)+
#   geom_point()+
#   stat_smooth(method='lm')+
#   facet_wrap(~neuron)+
#   ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
m %>%
filter(dur>50,#monkey=='Pilchuck',
mean.Spikerate>20) %>%
summarize(mean.Spikerate=mean.Spikerate[1],
mean.Verg.Angle=mean.Verg.Angle[1],
dur=dur[1]) ->
summaryforplot
# m<- NULL
# s.old<-readRDS('NRTPsummaryforplot.RDS')
# summaryforplot<-rbind(s.old,summaryforplot)
#
# saveRDS(rbind(s.old,summaryforplot),'NRTPsummaryforplot-new.RDS')
#
# summaryforplot<- readRDS('NRTPsummaryforplot-new.RDS')
ggplot(aes(mean.Verg.Angle,mean.Spikerate),data=summaryforplot)+
geom_point(size=2,alpha=1/5)+
# facet_wrap(~neuron,scales='free_x')+
facet_wrap(~neuron,ncol=2)+
stat_smooth(method='lm')+
ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
# qplot(mean.Verg.Angle,mean.Spikerate,data=summaryforplot)+
#   geom_point()+
#   stat_smooth(method='lm')+
#   facet_wrap(~neuron)+
#   ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
m %>%
filter(dur>50,monkey=='Kopachuck',
mean.Spikerate>20) %>%
summarize(mean.Spikerate=mean.Spikerate[1],
mean.Verg.Angle=mean.Verg.Angle[1],
dur=dur[1]) ->
summaryforplot
# m<- NULL
# s.old<-readRDS('NRTPsummaryforplot.RDS')
# summaryforplot<-rbind(s.old,summaryforplot)
#
# saveRDS(rbind(s.old,summaryforplot),'NRTPsummaryforplot-new.RDS')
#
# summaryforplot<- readRDS('NRTPsummaryforplot-new.RDS')
ggplot(aes(mean.Verg.Angle,mean.Spikerate),data=summaryforplot)+
geom_point(size=2,alpha=1/5)+
# facet_wrap(~neuron,scales='free_x')+
facet_wrap(~neuron,ncol=2)+
stat_smooth(method='lm')+
ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
# qplot(mean.Verg.Angle,mean.Spikerate,data=summaryforplot)+
#   geom_point()+
#   stat_smooth(method='lm')+
#   facet_wrap(~neuron)+
#   ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
t<- loadnewcsv(path="C:/Users/setup/Desktop/NRTP Vergence/SOASTRAB/",referencefile=o)
t %>%
group_by(neuron) %>%
mutate(s=markSaccades(conj.velocity,buffer=10,threshold=10),
isfixation=s<0) %>%
filter(isfixation) %>%
group_by(neuron,s) %>%
mutate(meanfr=mean(sdf),
maxfr=max(sdf),
R.Hor=mean(rep),
R.Ver=mean(repV),
L.Hor=mean(lep),
L.Ver=mean(lepV),
exatrope= monkey=='Pilchuck',
mean.Verg.Angle=mean(verg.angle),
# mean.Verg.Angle=replace(mean.Verg.Angle, mean.Verg.Angle<0 & ~exatrope , NA),
mean.Verg.Angle=replace(mean.Verg.Angle, mean.Verg.Angle>0 & exatrope,NA ),
mean.Verg.Angle=replace(mean.Verg.Angle,abs(mean.Verg.Angle)>50, NA),
max.Verg.Vel = max(verg.velocity),
max.Verg.Ang = max(verg.angle),
nspikes=sum(rasters),
dur=n(),
mean.Spikerate=sum(rasters)/dur*1000,
R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)))->
m
m %>%
filter(dur>50,monkey=='Kopachuck',
mean.Spikerate>20) %>%
summarize(mean.Spikerate=mean.Spikerate[1],
mean.Verg.Angle=mean.Verg.Angle[1],
dur=dur[1]) ->
summaryforplot
# m<- NULL
# s.old<-readRDS('NRTPsummaryforplot.RDS')
# summaryforplot<-rbind(s.old,summaryforplot)
#
# saveRDS(rbind(s.old,summaryforplot),'NRTPsummaryforplot-new.RDS')
#
# summaryforplot<- readRDS('NRTPsummaryforplot-new.RDS')
ggplot(aes(mean.Verg.Angle,mean.Spikerate),data=summaryforplot)+
geom_point(size=2,alpha=1/5)+
# facet_wrap(~neuron,scales='free_x')+
facet_wrap(~neuron,ncol=2)+
stat_smooth(method='lm')+
ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
# qplot(mean.Verg.Angle,mean.Spikerate,data=summaryforplot)+
#   geom_point()+
#   stat_smooth(method='lm')+
#   facet_wrap(~neuron)+
#   ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
unique(t$neuron)
t<-null
t<-NULL
t<- loadnewcsv(path="C:/Users/setup/Desktop/NRTP Vergence/SOASTRAB/",referencefile=o)
unique(t$neuron)
m %>%
filter(dur>50,monkey=='Kopachuck',
mean.Spikerate>20) %>%
summarize(mean.Spikerate=mean.Spikerate[1],
mean.Verg.Angle=mean.Verg.Angle[1],
dur=dur[1]) ->
summaryforplot
# m<- NULL
# s.old<-readRDS('NRTPsummaryforplot.RDS')
# summaryforplot<-rbind(s.old,summaryforplot)
#
# saveRDS(rbind(s.old,summaryforplot),'NRTPsummaryforplot-new.RDS')
#
# summaryforplot<- readRDS('NRTPsummaryforplot-new.RDS')
ggplot(aes(mean.Verg.Angle,mean.Spikerate),data=summaryforplot)+
geom_point(size=2,alpha=1/5)+
# facet_wrap(~neuron,scales='free_x')+
facet_wrap(~neuron,ncol=2)+
stat_smooth(method='lm')+
ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
# qplot(mean.Verg.Angle,mean.Spikerate,data=summaryforplot)+
#   geom_point()+
#   stat_smooth(method='lm')+
#   facet_wrap(~neuron)+
#   ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
t %>%
group_by(neuron) %>%
mutate(s=markSaccades(conj.velocity,buffer=10,threshold=10),
isfixation=s<0) %>%
filter(isfixation) %>%
group_by(neuron,s) %>%
mutate(meanfr=mean(sdf),
maxfr=max(sdf),
R.Hor=mean(rep),
R.Ver=mean(repV),
L.Hor=mean(lep),
L.Ver=mean(lepV),
exatrope= monkey=='Pilchuck',
mean.Verg.Angle=mean(verg.angle),
# mean.Verg.Angle=replace(mean.Verg.Angle, mean.Verg.Angle<0 & ~exatrope , NA),
mean.Verg.Angle=replace(mean.Verg.Angle, mean.Verg.Angle>0 & exatrope,NA ),
mean.Verg.Angle=replace(mean.Verg.Angle,abs(mean.Verg.Angle)>50, NA),
max.Verg.Vel = max(verg.velocity),
max.Verg.Ang = max(verg.angle),
nspikes=sum(rasters),
dur=n(),
mean.Spikerate=sum(rasters)/dur*1000,
R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)))->
m
m %>%
filter(dur>50,monkey=='Kopachuck',
mean.Spikerate>20) %>%
summarize(mean.Spikerate=mean.Spikerate[1],
mean.Verg.Angle=mean.Verg.Angle[1],
dur=dur[1]) ->
summaryforplot
# m<- NULL
# s.old<-readRDS('NRTPsummaryforplot.RDS')
# summaryforplot<-rbind(s.old,summaryforplot)
#
# saveRDS(rbind(s.old,summaryforplot),'NRTPsummaryforplot-new.RDS')
#
# summaryforplot<- readRDS('NRTPsummaryforplot-new.RDS')
ggplot(aes(mean.Verg.Angle,mean.Spikerate),data=summaryforplot)+
geom_point(size=2,alpha=1/5)+
# facet_wrap(~neuron,scales='free_x')+
facet_wrap(~neuron,ncol=2)+
stat_smooth(method='lm')+
ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
# qplot(mean.Verg.Angle,mean.Spikerate,data=summaryforplot)+
#   geom_point()+
#   stat_smooth(method='lm')+
#   facet_wrap(~neuron)+
#   ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
bufferlength<- 200
saccade.length<- 150
t%>%
group_by(neuron) %>%
mutate(time=row_number()) %>%
do(joinsaccadesuniform(.,buffer=200,threshold=20,saccade.length=saccade.length))->
# do(joinsaccades(.,buffer=bufferlength,threshold=20))->
t
#Once saccades have been marked, we measure lots of things about each saccade.
#For this plot, we also remove all data that isn't part of a saccade or the buffer period
t %>%
group_by(neuron) %>%
mutate(issaccade=!is.na(sacnum)) %>%
filter(issaccade) %>%
group_by(neuron,sacnum) %>%
mutate(#dur=n(),
peak.conj.velocity=maxabs(conj.velocity),
peak.R.H= maxabs(rev),
peak.R.V= maxabs(revV),
peak.L.H= maxabs(lev),
peak.L.V= maxabs(levV),
R.H.Amp=rep[n()]-rep[1],
L.H.Amp=lep[n()]-lep[1],
R.V.Amp=repV[n()]-repV[1],
L.V.Amp=lepV[n()]-lepV[1],
r.angle=atan2(R.V.Amp,R.H.Amp)*180/pi,
r.amp=sqrt(R.H.Amp^2+R.V.Amp^2),
nspikes=sum(rasters),
vect.amp= (sqrt(R.H.Amp^2+R.V.Amp^2)+sqrt(L.H.Amp^2+L.V.Amp^2))/2,
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)),
verg.amp=verg.angle[n()-bufferlength]-verg.angle[bufferlength+1],
peak.verg.velocity= maxabs(verg.velocity),
min.verg.trans = min(verg.velocity),
max.verg.trans = max(verg.velocity),
off.verg.velocity=min(abs(min.verg.trans),abs(max.verg.trans)),
min.verg.angle=min(verg.angle),
max.verg.angle=max(verg.angle),
max.verg.velocity=max(verg.velocity),
min.verg.velocity=min(verg.velocity),
maxfr=max(sdf),
counter=time-time[1]-bufferlength,
verg.change=verg.angle-mean(verg.angle[1:50]),
# verg.amp= last(verg.angle)-first(verg.angle),
verg.amp= verg.angle[n()-bufferlength]-verg.angle[bufferlength],
showrasters=replace(rasters,rasters<1,NA))->
t
#This just gives a name to convergent and divergent saccades so the figure is automatically labled
t$convergent<- as.factor(t$verg.amp>0)
levels(t$convergent)<- c('Divergent','Convergent')
t %>%
group_by(neuron,sacnum) %>%
summarize(peak.verg.velocity=first(peak.verg.velocity),
maxfr=first(maxfr),
verg.amp=first(verg.amp),
max.verg.angle=first(max.verg.angle),
max.verg.velocity=first(max.verg.velocity)) %>%
filter(abs(peak.verg.velocity)<1500)->
summaryforplot
# t<- NULL
ggplot(summaryforplot)+geom_point(aes(peak.verg.velocity,maxfr),alpha=1/3,size=1)+
facet_wrap(~neuron,ncol=3,scales='free')+
geom_hline(yintercept=200,size=1, alpha=0.5,color='orange')+
theme(legend.position="top",
axis.text=element_text(size=8),
# panel.margin=unit(2,'lines'),
strip.text=element_text(size=8),
axis.title.x=element_text(size=8))
# qplot(peak.verg.velocity,maxfr,data=summaryforplot)+
#   facet_wrap(~neuron,ncol=3,scale='free')+geom_point(size=3,alpha=1/20)+
# qplot(max.verg.velocity,maxfr,data=p,color=verg.amp)+facet_wrap(~neuron,ncol=2)+geom_point(size=3,alpha=1/20)
# message('We are now attempting to use the stupid calc.relimpo')
# summaryforplot %>%
#   # filter(peak.verg.velocity>0) %>%
#   group_by(neuron) %>%
#   # do(b=calc.relimp(lm(maxfr~verg.amp+peak.verg.velocity,data=.)),
#      # bic=regsubsets(maxfr~verg.amp+peak.verg.velocity,.)) ->
#     do(b=calc.relimp(lm(maxfr~max.verg.angle+max.verg.velocity,data=.))) ->
#   bb
# r <- data.frame()
# r2 <- NULL
# for (i in 1:nrow(bb)){
#   b<- bb$b[[i]]$lmg
#   r<-rbind(r,b)
#
#   r2<- c(r2,bb$b[[i]]$R2)
#
# }
#
# r$neuron<-bb$neuron
# # r$cellnum<- bb$cellnum
# r$R2<- r2
#
# names(r)<- c(names(bb$b[[1]]$lmg),'neuron','R2')
#
# r %>%
#   separate(neuron, c('monkey','cellnum'),remove=FALSE) %>%
#   mutate(celltype=as.factor(as.numeric(cellnum)>100))->
#   r
# levels(r$celltype)<- c("NRTP","SOA")
#
#
# # r.old<-readRDS('NRTPr.RDS')
# # r<- rbind(r.old,r)
# if (nfiles > 0){
#   r.old<- readRDS('NRTPr.RDS')
#   rsave<- rbind(r.old,r)
# saveRDS(rsave,'NRTPr-new.RDS')
# }
#
# # write.csv(r,"allfiles-r.csv")
# # rmark<-read.csv('marksoacells.csv')
# # r<- rbind(r,rmark[,-1])
summaryforplot %>%
group_by(neuron) %>%
do(m=lm(maxfr~max.verg.angle+max.verg.velocity,data=.)) ->
mm
r<- data.frame()
r2 <- NULL
for (i in 1:nrow(mm)){
message('Trying...')
bb<- relaimpo::calc.relimp(mm$m[[i]])
b<- bb$lmg
r<-rbind(r,b)
r2<- c(r2,bb$R2)
}
r$neuron<-mm$neuron
r$R2<- r2
names(r)<- c(names(b),'neuron','R2')
r %>%
separate(neuron, c('monkey','cellnum'),remove=FALSE) %>%
mutate(celltype=as.factor(as.numeric(cellnum)>100))->
r
levels(r$celltype)<- c("NRTP","SOA")
ggplot(aes(max.verg.angle,max.verg.velocity),data=r)+
# geom_point(size=4,aes(color=R2,shape=verg.amp>max.verg.velocity))+
geom_point(size=4,aes(shape=monkey,color=celltype))+
# geom_point(size=4,aes(color=R2))+
# scale_color_gradient(low='blue',high='red')+
# geom_point(size=4,aes(color=verg.amp>max.verg.velocity))+
geom_text(aes(label=neuron),check_overlap=FALSE,size=3,vjust=-1)+
geom_abline(intercept=0,slope=1)+
# coord_cartesian(xlim=c(-0.5,1),ylim=c(-0.5,1))+
theme(legend.position="top")+
ggtitle('Relative Importance')
saveRDS('KopachuckSOA.RDS')
saveRDS(t,'KopachuckSOA.RDS')
tp<-readRDS('ModelFitValues.RDS')
ggplot(tp)+
geom_point(aes(Convergence,Slow.Vergence,shape=area),size=3,alpha=0.2)+
geom_abline(slope=1)+
geom_vline(xintercept=0,linetype=2)+
xlab('Vergence Velocity Sensitivity during Enhanced Convergence')+
ylab('Vergence Velocity Sensitivity during Slow Vergence Movements')
ggplot(tp)+
geom_point(aes(verg.angle,Slow.Vergence,shape=area),size=3,alpha=0.2)+
geom_point(aes(verg.angle,Slow.Vergence,shape=area),size=3,color='red',data=filter(tp,neuron %in% neuronchoice))+
geom_abline(slope=1)+
geom_vline(xintercept=0,linetype=2)+
xlab('Sensitivity to Vergence Angle')+
ylab('Sensitivity to Vergence Velocity')
neuronchoice=c('Bee-112','Bee-211','Bee-33')
ggplot(tp)+
geom_point(aes(verg.angle,Slow.Vergence,shape=area),size=3,alpha=0.2)+
geom_point(aes(verg.angle,Slow.Vergence,shape=area),size=3,color='red',data=filter(tp,neuron %in% neuronchoice))+
geom_abline(slope=1)+
geom_vline(xintercept=0,linetype=2)+
xlab('Sensitivity to Vergence Angle')+
ylab('Sensitivity to Vergence Velocity')
cor(tp$Verg.angle,tp$Slow.Vergence)
cor(tp$verg.angle,tp$Slow.Vergence)
cor(tp$verg.angle,tp$Slow.Vergence)^2
t.test(tp$verg.angle,tp$Slow.Vergence)
chi.squared(tp$verg.angle,tp$Slow.Vergence)
chisq.test(tp$verg.angle,tp$Slow.Vergence)
chisq.test(tp$verg.angle,tp$Slow.Vergence,simulate.p.value=TRUE)
head(tp)
ts<- filter(tp, area=='SOA')
chisq.test(ts$verg.angle,ts$Slow.Vergence)
cor(ts$verg.angle,ts$Slow.Vergence)
cor(ts$verg.angle,ts$Slow.Vergence)^2
ggplot(ts)+
geom_point(aes(verg.angle,Slow.Vergence,shape=area),size=3,alpha=0.2)+
geom_vline(xintercept=0,linetype=2)+
xlab('Sensitivity to Vergence Angle')+
ylab('Sensitivity to Vergence Velocity')
ggplot(ts)+
geom_point(aes(verg.angle,Slow.Vergence,shape=area),size=4,alpha=0.2)+
geom_vline(xintercept=0,linetype=2)+
xlab('Sensitivity to Vergence Angle')+
ylab('Sensitivity to Vergence Velocity')
cor(ts$verg.angle,ts$Slow.Vergence)^2
ggplot(ts)+
geom_point(aes(Convergence,Slow.Vergence,shape=area),size=3,alpha=0.2)+
geom_vline(xintercept=0,linetype=2)+
xlab('Sensitivity to Convergence Velocity')+
ylab('Sensitivity to Slow Vergence Velocity')
ggplot(ts)+
geom_point(aes(Convergence,Slow.Vergence,shape=area),size=3,alpha=0.2)+
geom_vline(xintercept=0,linetype=2)+
xlab('Sensitivity to Convergence Velocity')+
ylab('Sensitivity to Slow Vergence Velocity')
ggplot(ts)+
geom_point(aes(Convergence,Slow.Vergence,shape=area),size=3,alpha=0.2)+
geom_vline(xintercept=0,linetype=2)+
geom_abline(slope=1)+
xlab('Sensitivity to Convergence Velocity')+
ylab('Sensitivity to Slow Vergence Velocity')
head(tp)
ts<- filter(tp,area=='SOA')
head(ts)
ts
arrange(ts,desc(Divergence))
arrange(ts,Divergence)
arrange(ts,desc(Divergence))
arrange(ts,c(desc(Divergence),Convergence))
?arrange
arrange(ts,desc(Divergence),Convergence)
source('joinsaccadesuniform.R')
source('Adamhelperfunctions.R')
library(dplyr)
library(ggplot2)
t<- readRDS('SOA-NRTP.RDS')
head(T)
head(t)
t<- filter(t,cellnum>100)
unique(t$neuron)
}
{
t%>%
group_by(neuron) %>%
mutate(time=row_number()) %>%
do(joinsaccadesuniform(.,buffer=bufferlength,threshold=20,saccade.length=150))->
d
d %>%
group_by(neuron) %>%
mutate(issaccade=!is.na(sacnum)) %>%
filter(issaccade) %>%
group_by(neuron,sacnum) %>%
mutate(dur=n(),
peak.conj.velocity=maxabs(conj.velocity),
peak.R.H= maxabs(rev),
peak.R.V= maxabs(revV),
peak.L.H= maxabs(lev),
peak.L.V= maxabs(levV),
R.H.Amp=rep[n()]-rep[1],
L.H.Amp=lep[n()]-lep[1],
R.V.Amp=repV[n()]-repV[1],
L.V.Amp=lepV[n()]-lepV[1],
r.angle=atan2(R.V.Amp,R.H.Amp)*180/pi,
r.amp=sqrt(R.H.Amp^2+R.V.Amp^2),
nspikes=sum(rasters),
vect.amp= (sqrt(R.H.Amp^2+R.V.Amp^2)+sqrt(L.H.Amp^2+L.V.Amp^2))/2,
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)),
verg.amp=verg.angle[n()-bufferlength]-verg.angle[bufferlength+1],
peak.verg.velocity= maxabs(verg.velocity),
min.verg.trans = min(verg.velocity),
max.verg.trans = max(verg.velocity),
min.verg.angle=min(verg.angle),
maxfr=max(sdf),
counter=time-time[1]-bufferlength,
verg.change=verg.angle-mean(verg.angle[1:50]),
# verg.amp= last(verg.angle)-first(verg.angle),
verg.amp= verg.angle[dur-bufferlength]-verg.angle[bufferlength],
showrasters=replace(rasters,rasters<1,NA))->
p
p$convergent<- as.factor(p$verg.amp>0)
levels(p$convergent)<- c('Divergent','Convergent')
}
bufferlength<- 400
{
t%>%
group_by(neuron) %>%
mutate(time=row_number()) %>%
do(joinsaccadesuniform(.,buffer=bufferlength,threshold=20,saccade.length=150))->
d
d %>%
group_by(neuron) %>%
mutate(issaccade=!is.na(sacnum)) %>%
filter(issaccade) %>%
group_by(neuron,sacnum) %>%
mutate(dur=n(),
peak.conj.velocity=maxabs(conj.velocity),
peak.R.H= maxabs(rev),
peak.R.V= maxabs(revV),
peak.L.H= maxabs(lev),
peak.L.V= maxabs(levV),
R.H.Amp=rep[n()]-rep[1],
L.H.Amp=lep[n()]-lep[1],
R.V.Amp=repV[n()]-repV[1],
L.V.Amp=lepV[n()]-lepV[1],
r.angle=atan2(R.V.Amp,R.H.Amp)*180/pi,
r.amp=sqrt(R.H.Amp^2+R.V.Amp^2),
nspikes=sum(rasters),
vect.amp= (sqrt(R.H.Amp^2+R.V.Amp^2)+sqrt(L.H.Amp^2+L.V.Amp^2))/2,
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)),
verg.amp=verg.angle[n()-bufferlength]-verg.angle[bufferlength+1],
peak.verg.velocity= maxabs(verg.velocity),
min.verg.trans = min(verg.velocity),
max.verg.trans = max(verg.velocity),
min.verg.angle=min(verg.angle),
maxfr=max(sdf),
counter=time-time[1]-bufferlength,
verg.change=verg.angle-mean(verg.angle[1:50]),
# verg.amp= last(verg.angle)-first(verg.angle),
verg.amp= verg.angle[dur-bufferlength]-verg.angle[bufferlength],
showrasters=replace(rasters,rasters<1,NA))->
p
p$convergent<- as.factor(p$verg.amp>0)
levels(p$convergent)<- c('Divergent','Convergent')
}
