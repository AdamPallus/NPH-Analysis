R.Hor=mean(rep),
R.Ver=mean(repV),
L.Hor=mean(lep),
L.Ver=mean(lepV),
nspikes=sum(rasters),
dur=n(),
nspk=sum(rasters)/dur*1000)->
summaryforplot
m %>%
filter(isfixation=F,dur>150) %>%
group_by(neuron,s) %>%
mutate(counter=time-time[1]) ->
mm
m %>%
filter(isfixation=T,dur>200) %>%
summarize(mean.Spikerate=mean.Spikerate[1],
mean.Verg.Angle=mean.Verg.Angle[1],
dur=dur[1]) ->
summaryforplot
qplot(mean.Verg.Angle,mean.Spikerate,data=summaryforplot,color=dur)+
geom_point(size=4)+
stat_smooth(method='lm')+
facet_wrap(~neuron)+
ggtitle('Firing Rate as a function of Vergence Angle during Fixations')
static.model<-lm(mean.Spikerate~mean.Verg.Angle,data=summaryforplot)
quick.predict <- function(static.model,value) {
return(static.model$coefficients[1]+static.model$coefficients[2]*value)
}
m %>%
filter(isfixation=T) %>%
group_by(neuron,s) %>%
summarize(mean.verg=mean.Verg.Angle[1],mean.Spikerate=mean.Spikerate[1]) %>%
arrange(desc(s)) %>%
mutate(verg.change=mean.verg-lag(mean.verg),
rate.change=mean.Spikerate-lag(mean.Spikerate)) ->
mva
qplot(verg.change,rate.change,data=mva)+facet_wrap(~neuron)
m %>%
filter(isfixation=F) %>%
group_by(neuron) %>%
summarize(verg.change=mva$verg.change[mva$s==((s+1)*-1)]) ->
mvsac
m %>%
filter(isfixation=F,dur>40,max.Verg.Vel<40) %>%
summarize(max.Verg.Vel=max.Verg.Vel[1],
maxfr=maxfr[1]) ->
summaryforplot
qplot(max.Verg.Vel,maxfr,data=summaryforplot)+
geom_point(size=4)+
stat_smooth(method='lm')+
facet_wrap(~neuron)+
ggtitle('Max Firing Rate as a function of Max Vergence Velocity during Saccades')
m %>%
filter(isfixation=T) %>%
group_by(neuron,s) %>%
summarize(mean.verg=mean.Verg.Angle[1],mean.Spikerate=mean.Spikerate[1]) %>%
arrange(desc(s)) %>%
mutate(verg.change=mean.verg-lag(mean.verg),
rate.change=mean.Spikerate-lag(mean.Spikerate)) ->
mva
qplot(verg.change,rate.change,data=mva)+facet_wrap(~neuron)
m %>%
filter(isfixation==F) %>%
group_by(neuron) %>%
summarize(verg.change=mva$verg.change[mva$s==((s+1)*-1)]) ->
mvsac
m %>%
filter(isfixation==F,dur>40,max.Verg.Vel<40) %>%
summarize(max.Verg.Vel=max.Verg.Vel[1],
maxfr=maxfr[1]) ->
summaryforplot
qplot(max.Verg.Vel,maxfr,data=summaryforplot)+
geom_point(size=4)+
stat_smooth(method='lm')+
facet_wrap(~neuron)+
ggtitle('Max Firing Rate as a function of Max Vergence Velocity during Saccades')
nsac<-20 #number of saccades to show
sacsamples<-unique(m$s[m$s>0])
sacsamples<-sample(sacsamples,nsac)
m %>%
filter(isfixation=F,s %in% sacsamples) %>%
group_by(neuron,s) %>%
mutate(counter=time-time[1]) ->
summaryforplot
qplot(verg.velocity,sdflag,data=summaryforplot,color=as.factor(s))+
facet_wrap(~neuron)+
ggtitle('Firing Rate during Saccades')
nsac<-20 #number of saccades to show
sacsamples<-unique(m$s[m$s>0])
sacsamples<-sample(sacsamples,nsac)
m %>%
filter(isfixation==F,s %in% sacsamples) %>%
group_by(neuron,s) %>%
mutate(counter=time-time[1]) ->
summaryforplot
qplot(verg.velocity,sdflag,data=summaryforplot,color=as.factor(s))+
facet_wrap(~neuron)+
ggtitle('Firing Rate during Saccades')
m %>%
filter(isfixation==F,s %in% sacsamples) %>%
group_by(neuron,s) %>%
mutate(counter=time-time[1],
predicted.fr = quick.predict(static.model,verg.angle),
velocity.cor = cor(sdflag,verg.velocity)) ->
summaryforplot
qplot(verg.velocity,sdflag-predicted.fr,data=summaryforplot,color=as.factor(s))+
facet_wrap(~neuron)+
ggtitle('Firing Rate during Saccades')
m %>%
filter(isfixation==F) %>%
group_by(neuron,s) %>%
mutate(counter=time-time[1],
predicted.fr = quick.predict(static.model,verg.angle),
velocity.cor = cor(sdflag,verg.velocity)) ->
summaryforplot
qplot(velocity.cor,data=summaryforplot)+facet_wrap(~neuron)
#qplot(verg.velocity,sdflag-predicted.fr,data=filter(summaryforplot,velocity.cor< -0.9),color=as.factor(s))+
#  ggtitle('Firing Rate during Saccades')
#qplot(counter,sdflag-predicted.fr)
m %>%
filter(isfixation==F,s %in% sacsamples) %>%
group_by(neuron,s) %>%
mutate(counter=time-time[1],
predicted.fr = quick.predict(static.model,verg.angle),
velocity.cor = cor(sdflag,verg.velocity)) ->
summaryforplot
qplot(counter,sdflag-predicted.fr,data=summaryforplot,color=as.factor(s))+
facet_wrap(~neuron)+
ggtitle('Firing Rate during Saccades')
head(msactest)
head(mva)
mvasac<-mutate(mva,verg.change.sac=lag(verg.change))
head(mvasac)
tail(mvasac)
mva<-arrange(mva,s)
head(mva)
m %>%
filter(isfixation=T) %>%
group_by(neuron,s) %>%
summarize(mean.verg=mean.Verg.Angle[1],mean.Spikerate=mean.Spikerate[1]) %>%
arrange(s) %>%
mutate(verg.change=mean.verg-lag(mean.verg),
rate.change=mean.Spikerate-lag(mean.Spikerate)) ->
mva
head(mva)
m %>%
filter(isfixation=T) %>%
group_by(neuron,s) %>%
summarize(mean.verg=mean.Verg.Angle[1],mean.Spikerate=mean.Spikerate[1]) %>%
arrange(s) %>%
mutate(verg.change=mean.verg-lag(mean.verg),
rate.change=mean.Spikerate-lag(mean.Spikerate),
verg.change.sac=lead(verg.change),
rate.change.sac=lead(rate.change)) ->
mva
head(mav)
head(mva)
qplot(verg.change,rate.change,data=mva)+facet_wrap(~neuron)
qplot(verg.change.sac,rate.change.sac,data=mva)+facet_wrap(~neuron)
m %>%
filter(isfixation=T) %>%
group_by(neuron,s) %>%
summarize(mean.verg=mean.Verg.Angle[1],mean.Spikerate=mean.Spikerate[1]) %>%
arrange(s) %>%
mutate(verg.change=mean.verg-lag(mean.verg),
rate.change=mean.Spikerate-lag(mean.Spikerate)) ->
mva
xxxx<-left_join(m,mva,by='s')
head(xxx)
head(xxxx)
qplot(lead(verg.change),maxfr,data=arrange(xxxx,s))
xxxx<-left_join(m,mva,by=c('s','neuron'))
head(xxxx)
head(mva)
xxxx<-left_join(m,select(mva,-mean.Spikerate),by=c('s','neuron'))
mva<-select(mva,-mean.Spikerate)
mva<-dplyr::select(mva,-mean.Spikerate)
head(mva)
xxxx<-left_join(m,mva,by=c('s','neuron'))
head(xxxx)
qplot(lead(verg.change),maxfr,data=arrange(xxxx,s))
qplot(verg.change,maxfr,data=arrange(xxxx,s))
qplot(lead(verg.change),maxfr,data=filter(xxxx,isfixation==F)
)
m %>%
filter(isfixation=T) %>%
group_by(neuron,s) %>%
summarize(mean.verg=mean.Verg.Angle[1],
mean.Spikerate=mean.Spikerate[1],
maxfr=maxfr[1]) %>%
arrange(s) %>%
mutate(verg.change=mean.verg-lag(mean.verg),
rate.change=mean.Spikerate-lag(mean.Spikerate)) ->
mva
qplot(lead(verg.change),maxfr,data=filter(mva,isfixation==F))
m %>%
filter(isfixation=T) %>%
group_by(neuron,s) %>%
summarize(mean.verg=mean.Verg.Angle[1],
mean.Spikerate=mean.Spikerate[1],
maxfr=maxfr[1],
isfixation==isfixation[1]) %>%
arrange(s) %>%
mutate(verg.change=mean.verg-lag(mean.verg),
rate.change=mean.Spikerate-lag(mean.Spikerate)) ->
mva
m$isfixation[1]
m$isfixation[3]
m %>%
filter(isfixation=T) %>%
group_by(neuron,s) %>%
summarize(mean.verg=mean.Verg.Angle[1],
mean.Spikerate=mean.Spikerate[1],
maxfr=maxfr[1],
isfixation=isfixation[1]) %>%
arrange(s) %>%
mutate(verg.change=mean.verg-lag(mean.verg),
rate.change=mean.Spikerate-lag(mean.Spikerate)) ->
mva
qplot(lead(verg.change),maxfr,data=filter(mva,isfixation==F))
m %>%
#  filter(isfixation=T) %>%
group_by(neuron,s) %>%
summarize(mean.verg=mean.Verg.Angle[1],
mean.Spikerate=mean.Spikerate[1],
maxfr=maxfr[1],
isfixation=isfixation[1]) %>%
arrange(s) %>%
mutate(verg.change=mean.verg-lag(mean.verg),
rate.change=mean.Spikerate-lag(mean.Spikerate)) ->
mva
qplot(lead(verg.change),maxfr,data=filter(mva,isfixation==F))
qplot(lead(verg.change),maxfr,data=mva)
head(mva)
m %>%
#  filter(isfixation=T) %>%
group_by(neuron,s,isfixation) %>%
summarize(mean.verg=mean.Verg.Angle[1],
mean.Spikerate=mean.Spikerate[1],
maxfr=maxfr[1]) %>%
arrange(s) %>%
mutate(verg.change=mean.verg-lag(mean.verg),
rate.change=mean.Spikerate-lag(mean.Spikerate)) ->
mva
qplot(lead(verg.change),maxfr,data=filter(mva,isfixation==F))
head(mva)
head(mva,20)
m %>%
filter(isfixation=T) %>%
group_by(neuron,s) %>%
summarize(mean.verg=mean.Verg.Angle[1],
mean.Spikerate=mean.Spikerate[1],
maxfr=maxfr[1]) %>%
arrange(s) %>%
mutate(verg.change=mean.verg-lag(mean.verg),
rate.change=mean.Spikerate-lag(mean.Spikerate)) ->
mva
t %>%
group_by(neuron,s,isfixation) %>%
mutate(meanfr=mean(sdflag),
maxfr=max(sdflag),
R.Hor=mean(rep),
R.Ver=mean(repV),
L.Hor=mean(lep),
L.Ver=mean(lepV),
mean.Verg.Angle=mean(verg.angle),
max.Verg.Vel = max(verg.velocity),
max.Verg.Ang = max(verg.angle),
nspikes=sum(rasters),
dur=n(),
mean.Spikerate=sum(rasters)/dur*1000,
R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)))->
m
head(m)
m$s[1:20]
m %>%
#  filter(isfixation=T) %>%
group_by(neuron,s) %>%
summarize(mean.verg=mean.Verg.Angle[1],
mean.Spikerate=mean.Spikerate[1],
maxfr=maxfr[n()]) %>%
arrange(s) %>%
mutate(verg.change=mean.verg-lag(mean.verg),
rate.change=mean.Spikerate-lag(mean.Spikerate)) ->
mva
head(mva)
qplot(verg.change,rate.change,data=mva)+facet_wrap(~neuron)
qplot(verg.change,maxsdf,data=mva)
qplot(verg.change,maxfr,data=mva)
qplot(verg.change,rate.change,data=mva)
qplot(verg.change,maxfr,data=mva)
head(mva)
qplot(mean.verg,mean.Spikerate,data=mva)
max(mva$mean.Spikerate)
max(mva$maxfr)
m %>%
#  filter(isfixation=T) %>%
group_by(neuron,s) %>%
summarize(mean.verg=mean.Verg.Angle[1],
mean.Spikerate=mean.Spikerate[1],
maxfr=maxfr[n()],
dur=n()) %>%
arrange(s) %>%
mutate(verg.change=mean.verg-lag(mean.verg),
rate.change=mean.Spikerate-lag(mean.Spikerate)) ->
mva
head(mva)
min(mva$n)
min(mva$fur)
min(mva$dur)
max(mva$dur)
qplot(mva$dur)
qplot(mean.verg,mean.Spikerate,data=filter(mva,dur>150))
qplot(mean.verg,mean.Spikerate,data=filter(mva,dur>10))
qplot(mean.verg,mean.Spikerate,data=filter(mva,dur>50))
qplot(mean.verg,mean.Spikerate,data=filter(mva,dur>100))
m %>%
#  filter(isfixation=T) %>%
group_by(neuron,s) %>%
summarize(mean.verg=mean.Verg.Angle[1],
mean.Spikerate=mean.Spikerate[1],
maxfr=maxfr[n()],
dur=n()) %>%
filter(dur>100) %>%
arrange(s) %>%
mutate(verg.change=mean.verg-lag(mean.verg),
rate.change=mean.Spikerate-lag(mean.Spikerate)) ->
mva
mva<-dplyr::select(mva,-mean.Spikerate)
qplot(verg.change,rate.change,data=mva)+facet_wrap(~neuron)
qplot(verg.change,mean.Spikerate,data=mva)
qplot(verg.change,mean.Spikerate,data=mva)
m %>%
#  filter(isfixation=T) %>%
group_by(neuron,s) %>%
summarize(mean.verg=mean.Verg.Angle[1],
mean.Spikerate=mean.Spikerate[1],
maxfr=maxfr[n()],
dur=n()) %>%
filter(dur>100) %>%
arrange(s) %>%
mutate(verg.change=mean.verg-lag(mean.verg),
rate.change=mean.Spikerate-lag(mean.Spikerate)) ->
mva
qplot(verg.change,mean.Spikerate,data=mva)
qplot(verg.change,maxfr,data=mva)
m %>%
#  filter(isfixation=T) %>%
group_by(neuron,s) %>%
summarize(mean.verg=mean.Verg.Angle[1],
mean.Spikerate=mean.Spikerate[1],
maxfr=maxfr[n()],
maxamp=maxamp[n()],
dur=n()) %>%
filter(dur>100) %>%
arrange(s) %>%
mutate(verg.change=mean.verg-lag(mean.verg),
rate.change=mean.Spikerate-lag(mean.Spikerate)) ->
mva
qplot(verg.change,rate.change,data=mva)+facet_wrap(~neuron)
qplot(maxamp,maxsdf,data=mva)
qplot(maxamp,maxfr,data=mva)
m %>%
#  filter(isfixation=T) %>%
group_by(neuron,s) %>%
summarize(mean.verg=mean.Verg.Angle[1],
mean.Spikerate=mean.Spikerate[1],
maxfr=maxfr[n()],
maxamp=maxamp[n()],
dur=n()) %>%
filter(maxamp>3) %>%
arrange(s) %>%
mutate(verg.change=mean.verg-lag(mean.verg),
rate.change=mean.Spikerate-lag(mean.Spikerate)) ->
mva
qplot(verg.change,rate.change,data=mva)+facet_wrap(~neuron)
qplot(verg.change,maxfr,data=mva)+facet_wrap(~neuron)
library(broom)
library(grid)
library(relaimpo)
library(leaps)
qplot(verg.change,rate.change,color=maxfr,data=mva)+facet_wrap(~neuron)
qplot(verg.change,rate.change,color=maxfr,size=4,data=mva)+facet_wrap(~neuron)
qplot(verg.change,rate.change,color=maxfr,size=6],data=mva)+facet_wrap(~neuron)
qplot(verg.change,rate.change,color=maxfr,size=6,data=mva)+facet_wrap(~neuron)
qplot(verg.change,rate.change,color=maxfr,data=mva)+facet_wrap(~neuron)+geom_point(aes(size=4))
qplot(verg.change,rate.change,color=maxfr,data=mva)+facet_wrap(~neuron)+geom_point(size=4
)
qplot(verg.change,rate.change,color=maxfr,data=mva)+facet_wrap(~neuron)+geom_point(size=4)
qplot(verg.change,rate.change,color=maxfr,data=mva)+facet_wrap(~neuron)+geom_point(size=6)
library(ggplot2)
library(dplyr)
library(knitr)
library(tidyr)
# library(broom)
# library(grid)
# library(relaimpo)
# library(leaps)
#library(data.table)
library(stringr)
spikedensity<-function (rasters,sd=100) {
gsize<- sd*10
g<-dnorm(-gsize:gsize,mean=0,sd=sd)
sdf<-convolve(rasters,g,type="open")
sdf<-sdf[gsize:(length(sdf)-(gsize+1))]*1000
sdf
}
dynamiclead<-function(p,lags=seq(10,300,by=10)) {
rsq<-NULL
for (i in 1:length(lags)) {
if (lags[i] > 0){
p$sdflag<-dplyr::lag(p$sdf,lags[i])
}
else{
p$sdflag<-dplyr::lead(p$sdf,lags[i]*-1)
}
rsq[i]<- summary(lm(sdflag~rep+lep+repV+lepV,data=p))$r.squared
}
#return(rsq)
return(lags[rsq==max(rsq)])
}
findSaccades<-function(ev){
i<-which(abs(ev)>10) #find all the times when speed > threshold
sacoff<-which(diff(i)>15) #minimum duration of an accepted saccade
sacon<-c(1,sacoff+1) #first saccade
sacoff<-c(sacoff,length(i)) #end of last saccade
saccade.onset<-i[sacon] #get actual times
saccade.offset<-i[sacoff]
return(data.frame(saccade.onset,saccade.offset))
}
markSaccades<-function(ev){
#this function finds and marks saccades given a velocity input
stimes<-findSaccades(ev)
nsaccades=nrow(stimes)
#add 10ms buffer to saccade onset and offset
#extra code to make sure there is at least that much space in the data
buffer<- 15
if(stimes$saccade.onset[1]>buffer+1){
stimes$saccade.onset=stimes$saccade.onset-buffer
}else{
stimes$saccade.onset[2:nsaccades] = stimes$saccade.onset[2:nsaccades]-buffer
stimes$saccade.onset[1]=1
}
if (stimes$saccade.offset[nsaccades]+buffer<length(ev)){
stimes$saccade.offset=stimes$saccade.offset+buffer
}else{
stimes$saccade.offset[1:nsaccades-1]=stimes$saccade.offset[1:nsaccades-1]+buffer
stimes$saccade.offset[nsaccades]=length(ev)
}
s<-1:length(ev)*0
for (k in 1:nsaccades){
s[stimes$saccade.onset[k]:stimes$saccade.offset[k]]<-k
if(k>1){
s[stimes$saccade.offset[k-1]:stimes$saccade.onset[k]]<-(k*-1)
}
}
s[1:stimes$saccade.onset[1]]<- -1
s[stimes$saccade.offset[nrow(stimes)]:length(s)]<- (nrow(stimes)*-1)-1
return(s)
}
parabolicdiff <- function(pos,n=7){
q <- sum(2*((1:n)^2))
convoutput<- convolve(pos,c(-n:-1, 1:n),type="open")
convoutput<- convoutput[(n*2):(length(pos)-((n*2)+1))]
vels<- c(array(convoutput[1],dim=n*2),convoutput,array(convoutput[length(convoutput)],dim=n*2))
vels <- vels/q*1000
}
#load all the .csv files in the data folder, then add a column naming the neuron,
#using the file name as the default name, then put them all together in one long data frame
path<-"C:/Users/setup/Desktop/NRTP Vergence/"
files <- list.files(path=path,pattern='*.csv')
# files<-files[grepl('Patos',files)] # just look at patos files
# files<-files[grepl('Bee',files)] # just look at bee files
t<-data.frame()
nfiles<-length(files)
# nfiles=1
for (i in 1:nfiles) {
f<-files[i]
temp <- read.csv(paste(path,f,sep=''))
names<-str_match(f,"(^[a-zA-Z]+)-([0-9]+)")
temp$neuron<-names[1]
temp$monkey<-names[2]
temp$cellnum<-names[3]
temp$sdf<-spikedensity(temp$rasters,sd=100)
leadtime<-dynamiclead(temp)
temp<-mutate(temp,
sdflag=lag(sdf,leadtime),
s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2),
time=row_number(),
verg.angle=rep-lep,
verg.velocity=parabolicdiff(verg.angle,7),
isfixation=s<0,
s=abs(s))
t <-rbind(t,temp)
}
rep <- t$rep[1:10000]
n<- t$time[1:10000]
repspline<- smooth.spline(n,rep)
plot(repspline)
plot(rep)
plot(rep,spar=0.3)
repspline<- smooth.spline(n,rep,spar=0.3)
warnings()
plot(repspline)
plot(parabolicdiff(repspline))
class(repspline)
plot(parabolicdiff(as.numeric(repspline)))
head(repspline)
