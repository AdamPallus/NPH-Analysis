# files<-files[grepl('Bee',files)] # just look at bee files
t<-data.frame()
for (i in 1:length(files)) {
temp <- read.csv(paste(path,files[i],sep=''))
temp$neuron<-gsub('.csv','',files[i])
t <-rbind(t,temp)
}
head(t)
ttest<-filter(t,neuron=="Bee-1")
ttest%>%
group_by(neuron) %>%
do(leadtime=dynamiclead(.)) %>%
separate(neuron,c("Monkey","cellnum"),remove =FALSE) %>%
mutate(leadtime=as.numeric(leadtime), cellnum=as.numeric(cellnum))->
dltest
dynamiclead<-function(p,lags=seq(10,200,by=10)) {
rsq<-NULL
for (i in 1:length(lags)) {
if (lags[i] > 0){
p$sdflag<-dplyr::lag(p$sdf,lags[i])
}
else{
p$sdflag<-dplyr::lead(p$sdf,lags[i]*-1)
}
rsq[i]<- summary(lm(sdflag~rep+lep+repV+lepV,data=p))$r.squared
}
#return(rsq)
return(lags[rsq==max(rsq)])
}
ttest%>%
group_by(neuron) %>%
do(leadtime=dynamiclead(.)) %>%
separate(neuron,c("Monkey","cellnum"),remove =FALSE) %>%
mutate(leadtime=as.numeric(leadtime), cellnum=as.numeric(cellnum))->
dltest
head(dltest)
dltest
dltest$leadtime[neuron=="Bee-1"]
dltest$leadtime[dltest$neuron=="Bee-1"]
ttt%>%
group_by(neuron) %>%
do(leadtime=dynamiclead(.)) %>%
separate(neuron,c("Monkey","cellnum"),remove =FALSE) %>%
mutate(leadtime=as.numeric(leadtime), cellnum=as.numeric(cellnum))->
dltest
t%>%
group_by(neuron) %>%
do(leadtime=dynamiclead(.)) %>%
separate(neuron,c("Monkey","cellnum"),remove =FALSE) %>%
mutate(leadtime=as.numeric(leadtime), cellnum=as.numeric(cellnum))->
dltest
dltest$leadtime[dltest$neuron=="Bee-1"]
dltest$leadtime[dltest$neuron=="Bee-2"]
dltest$leadtime[dltest$neuron=="Bee-3"]
dltest$leadtime[dltest$neuron=="Bee-4"]
dltest
tx %>%
group_by(neuron) %>%
t %>%
group_by(neuron) %>%
mutate(sdflag=lag(sdf,dltest$leadtime[dltest$leadtime==neuron[1]])) ->
tx
t %>%
group_by(neuron) %>%
mutate(sdflag=lag(sdf,as.numeric(dltest$leadtime[dltest$leadtime==neuron[1]]))) ->
tx
head(ttest)
ttest[,shiftssdf:=shift(sdf,leadtime[1]),by=neuron]
ttest[,shiftssdf:=shift(sdf,leadtime[1])]
library(data.table)
ttest[,shiftssdf:=shift(sdf,leadtime[1])]
ttest[,shiftssdf:=shift(sdf,leadtime[1]),by=neuron]
ttest<-setDT(ttest)
ttest[,shiftssdf:=shift(sdf,leadtime[1]),by=neuron]
dltest
head(ttest)
left_join(ttest,select(dltest,neuron,leadtime),by="neuron")
dltest<-select(dltest,neuron,leadtime)
dltest<-dplyr::select(dltest,neuron,leadtime)
left_join(ttest,dltest,by="neuron")
dplyr::left_join(ttest,dltest,by="neuron")
dltest<-setDT(dltest)
left_join(ttest,dltest,by="neuron")
j<-left_join(ttest,select(dltest,neuron,leadtime),by="neuron")
j<-left_join(ttest,dltest,by="neuron")
j[,shiftssdf:=shift(sdf,leadtime[1]),by=neuron]
class(j)
j %>% dplyr::select(neuron)
dltest
head(t)
head(dltest)
left_join(t,dltest,by="neuron")
dplyr::left_join(t,dltest,by="neuron")
left_join(ttest,dltest,by="neuron")
nrow(t)
nrow(ttest)
nrow(t)/nrow(ttest)
head(j)
j[,shiftssdf:=shift(sdf,dltest$leadtime),by=neuron]
bt<-t[,shiftssdf:=shift(sdf,dltest$leadtime),by=neuron]
class(t)
dtt<-setDT(t)
bt<-t[,shiftssdf:=shift(sdf,dltest$leadtime),by=neuron]
head(dt)
head(bt)
nrow(bt)
bt[,neuron==Bee-2]
bt[,neuron=="Bee-2"]
bt[neuron=="Bee-2"]
bt[neuron=="Bee-5"]
bt[neuron=="Bee-8"]
dltest
head(bt[neuron=="Bee-10"],45)
head(bt[neuron=="Bee-10"],50)
head(bt[neuron=="Bee-10"],81)
dltest
jt<-left_join(t,dltest,by="neuron")
head(jt)
bt<-jt[,shiftssdf:=shift(sdf,leadtime[1]),by=neuron]
head(bt)
head(bt[neuron=="Bee-10"],45)
plot(tt$time)
library(ggplot2)
library(dplyr)
library(knitr)
library(tidyr)
library(broom)
library(grid)
library(relaimpo)
library(leaps)
library(data.table)
#load all the .csv files in the data folder, then add a column naming the neuron,
#using the file name as the default name, then put them all together in one long data frame
path<-"~/GitHub/NPH-Analysis/practicedata/"
#path<-"~/GitHub/NPH-Analysis/data/"
#path<-"~/GitHub/NPH-Analysis/testdata/"
files <- list.files(path=path,pattern='*.csv')
# files<-files[grepl('Patos',files)] # just look at patos files
# files<-files[grepl('Bee',files)] # just look at bee files
t<-data.frame()
for (i in 1:length(files)) {
temp <- read.csv(paste(path,files[i],sep=''))
temp$neuron<-gsub('.csv','',files[i])
t <-rbind(t,temp)
}
dynamiclead<-function(p,lags=seq(10,200,by=10)) {
rsq<-NULL
for (i in 1:length(lags)) {
if (lags[i] > 0){
p$sdflag<-dplyr::lag(p$sdf,lags[i])
}
else{
p$sdflag<-dplyr::lead(p$sdf,lags[i]*-1)
}
rsq[i]<- summary(lm(sdflag~rep+lep+repV+lepV,data=p))$r.squared
}
#return(rsq)
return(lags[rsq==max(rsq)])
}
t %>%
group_by(neuron) %>%
do(leadtime=dynamiclead(.)) ->
dl
t %>%
group_by(neuron) %>%
do(leadtime=dynamiclead(.)) %>%
mutate(leadtime=as.numeric(leadtime)) ->
dl
dl<-setDT(dl)
t<-setDT(t)
t<-left_join(t,dl,by="neuron")
t[,shiftssdf:=shift(sdf,leadtime[1]),by=neuron]
t %>%
mutate(s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2),time=row_number) %>%
filter(s>0)-> #mark saccades gives saccades positive numbers and everything else negative
tt
findSaccades<-function(ev){
i<-which(abs(ev)>10) #find all the times when speed > threshold
sacoff<-which(diff(i)>15) #minimum duration of an accepted saccade
sacon<-c(1,sacoff+1) #first saccade
sacoff<-c(sacoff,length(i)) #end of last saccade
saccade.onset<-i[sacon] #get actual times
saccade.offset<-i[sacoff]
return(data.frame(saccade.onset,saccade.offset))
}
markSaccades<-function(ev){
#this function finds and marks saccades given a velocity input
stimes<-findSaccades(ev)
nsaccades=nrow(stimes)
#add 10ms buffer to saccade onset and offset
#extra code to make sure there is at least that much space in the data
buffer<- 15
if(stimes$saccade.onset[1]>buffer+1){
stimes$saccade.onset=stimes$saccade.onset-10
}else{
stimes$saccade.onset[2:nsaccades] = stimes$saccade.onset[2:nsaccades]-10
stimes$saccade.onset[1]=1
}
if (stimes$saccade.offset[nsaccades]+buffer<length(ev)){
stimes$saccade.offset=stimes$saccade.offset+buffer
}else{
stimes$saccade.offset[1:nsaccades-1]=stimes$saccade.offset[1:nsaccades-1]+buffer
stimes$saccade.offset[nsaccades]=length(ev)
}
s<-1:length(ev)*0
for (k in 1:nsaccades){
s[stimes$saccade.onset[k]:stimes$saccade.offset[k]]<-k
if(k>1){
s[stimes$saccade.offset[k-1]:stimes$saccade.onset[k]]<-(k*-1)
}
}
s[1:stimes$saccade.onset[1]]<- -1
s[stimes$saccade.offset[nrow(stimes)]:length(s)]<- (nrow(stimes)*-1)
return(s)
}
t %>%
mutate(s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2),time=row_number) %>%
filter(s>0)-> #mark saccades gives saccades positive numbers and everything else negative
tt
txx<-as.data.frame(t)
txx %>%
mutate(s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2),time=row_number) %>%
filter(s>0)-> #mark saccades gives saccades positive numbers and everything else negative
tt
t %>%
mutate(s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2),time=row_number()) %>%
filter(s>0)-> #mark saccades gives saccades positive numbers and everything else negative
tt
txx %>%
mutate(s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2),time=row_number()) %>%
filter(s>0)-> #mark saccades gives saccades positive numbers and everything else negative
tt
?calc.relimp
unique(tt$neuron)
head(bb)
neurons<-unique(tt$neuron)
neurons[neurons=="Bee-1"]
tt %>%
filter(maxamp>minAmp,sdflag>10) %>%
#filter(maxamp>minAmp & disjEither,sdflag>10) %>%
group_by(neuron) %>%
#    do(b=boot.relimp(lm("sdflag~rep+rev+repV+revV+lep+lev+lepV+levV",.),b=1999),
do(b=calc.relimp(lm("sdflag~rep+rev+repV+revV+lep+lev+lepV+levV",.)),
bic=regsubsets(sdflag~rep+rev+repV+revV+lep+lev+lepV+levV,.)) ->
bb
minAmp<-5
tt %>%
filter(maxamp>minAmp,sdflag>10) %>%
#filter(maxamp>minAmp & disjEither,sdflag>10) %>%
group_by(neuron) %>%
#    do(b=boot.relimp(lm("sdflag~rep+rev+repV+revV+lep+lev+lepV+levV",.),b=1999),
do(b=calc.relimp(lm("sdflag~rep+rev+repV+revV+lep+lev+lepV+levV",.)),
bic=regsubsets(sdflag~rep+rev+repV+revV+lep+lev+lepV+levV,.)) ->
bb
tt %>%
group_by(neuron,s) %>%
summarize(R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp))) %>%
mutate(disjH=sign(R.H.Amp*L.H.Amp)<0,disjV=sign(R.V.Amp*L.V.Amp)<0,disjEither=disjH | disjV) ->
amp
tt <-left_join(tt,amp,by=c('s','neuron'))
minAmp<-5
nDisjunctive<-nrow(filter(amp,maxamp>minAmp & disjEither))
nTotal<- nrow(filter(amp,maxamp>minAmp))
tt %>%
filter(maxamp>minAmp,sdflag>10) %>%
#filter(maxamp>minAmp & disjEither,sdflag>10) %>%
group_by(neuron) %>%
#    do(b=boot.relimp(lm("sdflag~rep+rev+repV+revV+lep+lev+lepV+levV",.),b=1999),
do(b=calc.relimp(lm("sdflag~rep+rev+repV+revV+lep+lev+lepV+levV",.)),
bic=regsubsets(sdflag~rep+rev+repV+revV+lep+lev+lepV+levV,.)) ->
bb
tt %>%
filter(maxamp>minAmp,sdflag>10) %>%
#filter(maxamp>minAmp & disjEither,sdflag>10) %>%
group_by(neuron) %>%
#    do(b=boot.relimp(lm("sdflag~rep+rev+repV+revV+lep+lev+lepV+levV",.),b=1999),
do(b=calc.relimp(lm("sdflag~rep+rev+repV+revV+lep+lev+lepV+levV",.)),
bic=regsubsets(shiftsdf~rep+rev+repV+revV+lep+lev+lepV+levV,.)) ->
bb
tt %>%
filter(maxamp>minAmp,sdflag>10) %>%
#filter(maxamp>minAmp & disjEither,sdflag>10) %>%
group_by(neuron) %>%
#    do(b=boot.relimp(lm("sdflag~rep+rev+repV+revV+lep+lev+lepV+levV",.),b=1999),
do(b=calc.relimp(lm("shiftsdf~rep+rev+repV+revV+lep+lev+lepV+levV",.)),
bic=regsubsets(shiftsdf~rep+rev+repV+revV+lep+lev+lepV+levV,.)) ->
bb
tt %>%
filter(maxamp>minAmp,shiftsdf>10) %>%
#filter(maxamp>minAmp & disjEither,sdflag>10) %>%
group_by(neuron) %>%
#    do(b=boot.relimp(lm("sdflag~rep+rev+repV+revV+lep+lev+lepV+levV",.),b=1999),
do(b=calc.relimp(lm("shiftsdf~rep+rev+repV+revV+lep+lev+lepV+levV",.)),
bic=regsubsets(shiftsdf~rep+rev+repV+revV+lep+lev+lepV+levV,.)) ->
bb
head(tt)
filter(tt,neuron=="Bee-11")
install.packages("shiny")
rmarkdown::run(shinytest.Rmd)
rmarkdown::run("shinytest.Rmd")
library(ggplot2)
library(dplyr)
library(knitr)
library(tidyr)
library(broom)
library(grid)
library(relaimpo)
library(leaps)
library(data.table)
#load all the .csv files in the data folder, then add a column naming the neuron,
#using the file name as the default name, then put them all together in one long data frame
#path<-"~/GitHub/NPH-Analysis/practicedata/"
path<-"~/GitHub/NPH-Analysis/data/"
#path<-"~/GitHub/NPH-Analysis/testdata/"
files <- list.files(path=path,pattern='*.csv')
# files<-files[grepl('Patos',files)] # just look at patos files
# files<-files[grepl('Bee',files)] # just look at bee files
t<-data.frame()
for (i in 1:length(files)) {
temp <- read.csv(paste(path,files[i],sep=''))
temp$neuron<-gsub('.csv','',files[i])
t <-rbind(t,temp)
}
findSaccades<-function(ev){
i<-which(abs(ev)>10) #find all the times when speed > threshold
sacoff<-which(diff(i)>15) #minimum duration of an accepted saccade
sacon<-c(1,sacoff+1) #first saccade
sacoff<-c(sacoff,length(i)) #end of last saccade
saccade.onset<-i[sacon] #get actual times
saccade.offset<-i[sacoff]
return(data.frame(saccade.onset,saccade.offset))
}
markSaccades<-function(ev){
#this function finds and marks saccades given a velocity input
stimes<-findSaccades(ev)
nsaccades=nrow(stimes)
#add 10ms buffer to saccade onset and offset
#extra code to make sure there is at least that much space in the data
buffer<- 15
if(stimes$saccade.onset[1]>buffer+1){
stimes$saccade.onset=stimes$saccade.onset-10
}else{
stimes$saccade.onset[2:nsaccades] = stimes$saccade.onset[2:nsaccades]-10
stimes$saccade.onset[1]=1
}
if (stimes$saccade.offset[nsaccades]+buffer<length(ev)){
stimes$saccade.offset=stimes$saccade.offset+buffer
}else{
stimes$saccade.offset[1:nsaccades-1]=stimes$saccade.offset[1:nsaccades-1]+buffer
stimes$saccade.offset[nsaccades]=length(ev)
}
s<-1:length(ev)*0
for (k in 1:nsaccades){
s[stimes$saccade.onset[k]:stimes$saccade.offset[k]]<-k
if(k>1){
s[stimes$saccade.offset[k-1]:stimes$saccade.onset[k]]<-(k*-1)
}
}
s[1:stimes$saccade.onset[1]]<- -1
s[stimes$saccade.offset[nrow(stimes)]:length(s)]<- (nrow(stimes)*-1)
return(s)
}
#use the created functions to mark the saccades
t %>%
mutate(s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2),time=row_number()) %>%
filter(s>0)-> #mark saccades gives saccades positive numbers and everything else negative
tt
?write.csv
write.csv(tt,"AllData.csv")
tt <-filter(tt,maxamp>minAmp,sdflag>10)
tt %>%
group_by(neuron,s) %>%
summarize(R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp))) %>%
mutate(disjH=sign(R.H.Amp*L.H.Amp)<0,disjV=sign(R.V.Amp*L.V.Amp)<0,disjEither=disjH | disjV) ->
amp
tt <-left_join(tt,amp,by=c('s','neuron'))
tt <-filter(tt,maxamp>minAmp,sdflag>10)
tt <-filter(tt,maxamp>5,sdflag>10)
head(tt)
dynamiclead<-function(p,lags=seq(10,300,by=10)) {
rsq<-NULL
for (i in 1:length(lags)) {
if (lags[i] > 0){
p$sdflag<-dplyr::lag(p$sdf,lags[i])
}
else{
p$sdflag<-dplyr::lead(p$sdf,lags[i]*-1)
}
rsq[i]<- summary(lm(sdflag~rep+lep+repV+lepV,data=p))$r.squared
}
#return(rsq)
return(lags[rsq==max(rsq)])
}
t %>%
group_by(neuron) %>%
do(leadtime=dynamiclead(.)) %>%
mutate(leadtime=as.numeric(leadtime)) ->
dl
dl%>%
separate(neuron,c("Monkey","cellnum"),remove =FALSE) %>%
mutate(cellnum=as.numeric(cellnum))->
dlplot
qplot(cellnum,leadtime/5,data=dlplot,binwidth=10)+facet_grid(Monkey~.)+ylab("Lead Time (ms)")
#At this point I have to switch over to using data.table because dplyr can't handle shifting each group by a different amount. Hopefully this doesn't mess everything else up.
dl<-setDT(dl)
t<-setDT(t)
t<-left_join(t,dl,by="neuron")
#the := operator is actually adding the column shiftsdf to the data table
t<-t[,sdflag:=shift(sdf,leadtime[1]),by=neuron]
t<-as.data.frame(t)
findSaccades<-function(ev){
i<-which(abs(ev)>10) #find all the times when speed > threshold
sacoff<-which(diff(i)>15) #minimum duration of an accepted saccade
sacon<-c(1,sacoff+1) #first saccade
sacoff<-c(sacoff,length(i)) #end of last saccade
saccade.onset<-i[sacon] #get actual times
saccade.offset<-i[sacoff]
return(data.frame(saccade.onset,saccade.offset))
}
markSaccades<-function(ev){
#this function finds and marks saccades given a velocity input
stimes<-findSaccades(ev)
nsaccades=nrow(stimes)
#add 10ms buffer to saccade onset and offset
#extra code to make sure there is at least that much space in the data
buffer<- 15
if(stimes$saccade.onset[1]>buffer+1){
stimes$saccade.onset=stimes$saccade.onset-10
}else{
stimes$saccade.onset[2:nsaccades] = stimes$saccade.onset[2:nsaccades]-10
stimes$saccade.onset[1]=1
}
if (stimes$saccade.offset[nsaccades]+buffer<length(ev)){
stimes$saccade.offset=stimes$saccade.offset+buffer
}else{
stimes$saccade.offset[1:nsaccades-1]=stimes$saccade.offset[1:nsaccades-1]+buffer
stimes$saccade.offset[nsaccades]=length(ev)
}
s<-1:length(ev)*0
for (k in 1:nsaccades){
s[stimes$saccade.onset[k]:stimes$saccade.offset[k]]<-k
if(k>1){
s[stimes$saccade.offset[k-1]:stimes$saccade.onset[k]]<-(k*-1)
}
}
s[1:stimes$saccade.onset[1]]<- -1
s[stimes$saccade.offset[nrow(stimes)]:length(s)]<- (nrow(stimes)*-1)
return(s)
}
#use the created functions to mark the saccades
t %>%
mutate(s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2),time=row_number()) %>%
filter(s>0)-> #mark saccades gives saccades positive numbers and everything else negative
tt
tt %>%
group_by(neuron,s) %>%
summarize(R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp))) %>%
mutate(disjH=sign(R.H.Amp*L.H.Amp)<0,disjV=sign(R.V.Amp*L.V.Amp)<0,disjEither=disjH | disjV) ->
amp
tt <-left_join(tt,amp,by=c('s','neuron'))
minAmp<-5
nDisjunctive<-nrow(filter(amp,maxamp>minAmp & disjEither))
nTotal<- nrow(filter(amp,maxamp>minAmp))
tt <-filter(tt,maxamp>minAmp,sdflag>10)
write.csv(tt,"AllDataShiny.csv")
unique(tt$neurons)
unique(tt$neuron)
bb
head(tt)
ttx<-read.csv("AllDataShiny.csv")
head(ttx)
ttx %>%
#filter(maxamp>minAmp & disjEither,sdflag>10) %>%
group_by(neuron) %>%
#    do(b=boot.relimp(lm("sdflag~rep+rev+repV+revV+lep+lev+lepV+levV",.),b=1999),
do(b=calc.relimp(lm("sdflag~rep+rev+repV+revV+lep+lev+lepV+levV",.)),
bic=regsubsets(sdflag~rep+rev+repV+revV+lep+lev+lepV+levV,.)) ->
bb
unique(bb$neuron)
class(unique(bb$neuron))
qplot(sdflag,rep,data=tt)
qplot(sdflag,rep,data=filter(tt,neuron=="Bee-10"))
qplot(rep,sdflag,data=tt)
qplot(rep,sdflag,data=filter(tt,neuron=="Bee-10"))
qplot(rep,sdflag,data=filter(tt,neuron=="Bee-11"))
qplot(rep,sdflag,data=filter(tt,neuron=="Bee-12"))
qplot(rep,sdflag,data=filter(tt,neuron=="Bee-13"))
qplot(rep,sdflag,data=filter(tt,neuron=="Bee-14"))
qplot(rep,sdflag,data=filter(tt,neuron=="Bee-16"))
qplot(rep,sdflag,data=filter(tt,neuron=="Bee-20"))
qplot(rep,sdflag,data=filter(tt,neuron=="Patos-13"))
qplot(rev,sdflag,data=filter(tt,neuron=="Bee-7"))
head(tt)
qplot(time,sdflag,data=filter(tt,neuron="Bee-7"))
qplot(time,sdflag,data=filter(tt,neuron=="Bee-7"))
qplot(time,sdflag,data=filter(tt,neuron=="Bee-7"))+geom_line()
qplot(time,sdflag,data=filter(tt,neuron=="Bee-7"),geom="line")
qplot(time,sdflag,data=filter(tt,neuron=="Bee-10"),geom="line")
qplot(time,sdflag,data=filter(tt,neuron=="Bee-1"),geom="line")
qplot(time,sdflag,data=filter(tt,neuron=="Bee-1",time<100000),geom="line")
