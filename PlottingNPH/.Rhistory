verg.angle=rep-lep,
verg.velocity=parabolicdiff(verg.angle,7),
isfixation=s<0,
s=abs(s))
t <-rbind(t,temp)
}
unique(t$neuron)
unique(t$Neuron)
loadedfiles
length(loadedfiles)
loadefiles<-loadedfiles[1]
loadedfiles<-loadedfiles[1]
t %>%
group_by(neuron,s,isfixation) %>%
mutate(meanfr=mean(sdf),
maxfr=max(sdf),
R.Hor=mean(rep),
R.Ver=mean(repV),
L.Hor=mean(lep),
L.Ver=mean(lepV),
mean.Verg.Angle=mean(verg.angle),
max.Verg.Vel = max(verg.velocity),
max.Verg.Ang = max(verg.angle),
nspikes=sum(rasters),
dur=n(),
mean.Spikerate=sum(rasters)/dur*1000,
R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)))->
m
#write.csv(m,"NPHFullData.csv")
#
#
# t %>%
#   group_by(neuron,s) %>%
#   summarize(meanfr=mean(sdflag),
#             R.Hor=mean(rep),
#             R.Ver=mean(repV),
#             L.Hor=mean(lep),
#             L.Ver=mean(lepV),
#             nspikes=sum(rasters),
#
#             dur=n(),
#             nspk=sum(rasters)/dur*1000)->
#   summaryforplot
#
#
# m %>%
#   filter(isfixation=F,dur>150) %>%
#   group_by(neuron,s) %>%
#   mutate(counter=time-time[1]) ->
# mm
#load all the .csv files in the data folder, then add a column naming the neuron,
#using the file name as the default name, then put them all together in one long data frame
# path<-"C:/Users/User/Desktop/NRTP/"
path<- "C:/Users/setup/Desktop/NRTP Vergence/testplot/"
files <- list.files(path=path,pattern='*.csv')
# files<-files[grepl('Patos',files)] # just look at patos files
# files<-files[grepl('Bee',files)] # just look at bee files
nfiles<-length(files)
# nfiles=1
loadedfiles <- list()
for (i in 1:nfiles){
f<- files[i]
loadedfiles[[i]]<- read.csv(paste(path,f,sep=''))
}
t<-data.frame()
buffer<- 200
for (i in 1:nfiles) {
f<- files[i]
temp=loadedfiles[[i]]
i=1
f<- files[i]
temp=loadedfiles[[i]]
names<-str_match(f,"(^[a-zA-Z]+)-([0-9]+)")
temp$neuron<-names[1]
temp$monkey<-names[2]
temp$cellnum<-names[3]
head(temp)
temp$sdf<-spikedensity(temp$rasters,sd=10)
temp<-mutate(temp,
# sdflag=lag(sdf,leadtime),
s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2,buffer=buffer,threshold=10),
time=row_number(),
verg.angle=rep-lep,
verg.velocity=parabolicdiff(verg.angle,7),
isfixation=s<0,
s=abs(s))
temp<-mutate(temp,
# sdflag=lag(sdf,leadtime),
# s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2,buffer=buffer,threshold=10),
# time=row_number(),
verg.angle=rep-lep,
verg.velocity=parabolicdiff(verg.angle,7),
isfixation=s<0,
s=abs(s))
temp<-mutate(temp,
# sdflag=lag(sdf,leadtime),
# s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2,buffer=buffer,threshold=10),
# time=row_number(),
verg.angle=rep-lep,
verg.velocity=parabolicdiff(verg.angle,7),
# isfixation=s<0,
# s=abs(s)
)
temp<-mutate(temp,
# sdflag=lag(sdf,leadtime),
# s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2,buffer=buffer,threshold=10),
# time=row_number(),
verg.angle=rep-lep,
verg.velocity=parabolicdiff(verg.angle,7))
temp<-mutate(temp,
sdflag=lag(sdf,leadtime),
# s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2,buffer=buffer,threshold=10),
# time=row_number(),
verg.angle=rep-lep,
verg.velocity=parabolicdiff(verg.angle,7))
temp<-mutate(temp,
sdflag=lag(sdf,leadtime),
s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2,buffer=buffer,threshold=10),
# time=row_number(),
verg.angle=rep-lep,
verg.velocity=parabolicdiff(verg.angle,7))
?display
?print
print('hello')
markSaccades<-function(ev,buffer=15,threshold=40){
#this function finds and marks saccades given a velocity input
stimes<-findSaccades(ev,threshold)
nsaccades=nrow(stimes)
#add 10ms buffer to saccade onset and offset
#extra code to make sure there is at least that much space in the data
if(stimes$saccade.onset[1]>buffer+1){
stimes$saccade.onset=stimes$saccade.onset-buffer
}else{
stimes$saccade.onset[2:nsaccades] = stimes$saccade.onset[2:nsaccades]-buffer
stimes$saccade.onset[1]=1
}
if (stimes$saccade.offset[nsaccades]+buffer<length(ev)){
stimes$saccade.offset=stimes$saccade.offset+buffer
}else{
stimes$saccade.offset[1:nsaccades-1]=stimes$saccade.offset[1:nsaccades-1]+buffer
stimes$saccade.offset[nsaccades]=length(ev)
}
s<-1:length(ev)*0
for (k in 1:nsaccades){
s[stimes$saccade.onset[k]:stimes$saccade.offset[k]]<- k
if(k>1){
s[stimes$saccade.offset[k-1]:stimes$saccade.onset[k]]<-(k*-1)
}
}
s[1:stimes$saccade.onset[1]]<- -1
s[stimes$saccade.offset[nrow(stimes)]:length(s)]<- (nrow(stimes)*-1)-1
print(length(s))
return(s)
}
for (i in 1:nfiles) {
f<- files[i]
temp=loadedfiles[[i]]
names<-str_match(f,"(^[a-zA-Z]+)-([0-9]+)")
temp$neuron<-names[1]
temp$monkey<-names[2]
temp$cellnum<-names[3]
temp$sdf<-spikedensity(temp$rasters,sd=10)
# leadtime<-dynamiclead(temp)
temp<-mutate(temp,
sdflag=lag(sdf,leadtime),
s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2,buffer=buffer,threshold=10),
time=row_number(),
verg.angle=rep-lep,
verg.velocity=parabolicdiff(verg.angle,7),
isfixation=s<0,
s=abs(s))
t <-rbind(t,temp)
}
ev<-temp$rev
s<- markSaccades(ev,200,10)
s<- markSaccades(ev,500,10)
s<- markSaccades(ev,1000,10)
stimes<- findSaccades(ev,10)
head(stimes)
nrow(stimes)
toolong<-stimes$saccade.offset>length(ev)-200
tail(toolong)
stimes(,1)
stimes[,1]
stimes[1,]
stimes[~toolong,]
stimes[!toolong,]
nrow(stimes)
tooshort<- stimes$saccade.onset<buffer+1
head(tooshort)
stimes$saccade.onset[1]
tooshort<- stimes$saccade.onset<400+1
head(tooshort)
stimes<- filter(stimes, !tooshort, !toolong)
markSaccades<-function(ev,buffer=15,threshold=40){
#this function finds and marks saccades given a velocity input
stimes<-findSaccades(ev,threshold)
#remove saccades without enough data at the end of the file, based on buffer size
toolong<- stimes$saccade.offset> length(ev)-buffer
tooshort<- stimes$saccade.onset<buffer+1
stimes<- filter(stimes, !tooshort, !toolong)
nsaccades=nrow(stimes)
stimes$saccade.onset=stimes$saccade.onset-buffer
stimes$saccade.offset=stimes$saccade.offset+buffer
s<-1:length(ev)*0
for (k in 1:nsaccades){
s[stimes$saccade.onset[k]:stimes$saccade.offset[k]]<- k
if(k>1){
s[stimes$saccade.offset[k-1]:stimes$saccade.onset[k]]<-(k*-1)
}
}
s[1:stimes$saccade.onset[1]]<- -1
s[stimes$saccade.offset[nrow(stimes)]:length(s)]<- (nrow(stimes)*-1)-1
return(s)
}
t<-data.frame()
buffer<- 200
for (i in 1:nfiles) {
f<- files[i]
temp=loadedfiles[[i]]
names<-str_match(f,"(^[a-zA-Z]+)-([0-9]+)")
temp$neuron<-names[1]
temp$monkey<-names[2]
temp$cellnum<-names[3]
temp$sdf<-spikedensity(temp$rasters,sd=10)
# leadtime<-dynamiclead(temp)
temp<-mutate(temp,
# sdflag=lag(sdf,leadtime),
s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2,buffer=buffer,threshold=10),
time=row_number(),
verg.angle=rep-lep,
verg.velocity=parabolicdiff(verg.angle,7),
isfixation=s<0,
s=abs(s))
t <-rbind(t,temp)
}
as.numeric('5')
as.numeric('15')
as.numeric('101')
xx<- read.csv('marksoacells.csv')
source('~/.active-rstudio-document', echo=TRUE)
xx<- read.csv('marksoacells.csv')
head(xx)
xx
rbind(xx,xx)
print('hello')
print(ncol(xx))
names(xx)
xx
xx(,1)
xx[,1]
xx[2:ncol(xx),]
xx[,2:ncol(xx)]
xx[-1,]
xx[,-1]
t %>%
group_by(neuron,s,isfixation) %>%
mutate(meanfr=mean(sdf),
maxfr=max(sdf),
R.Hor=mean(rep),
R.Ver=mean(repV),
L.Hor=mean(lep),
L.Ver=mean(lepV),
mean.Verg.Angle=mean(verg.angle),
mean.Verg.Angle=replace(mean.Verg.Angle<0,NA),
max.Verg.Vel = max(verg.velocity),
max.Verg.Ang = max(verg.angle),
nspikes=sum(rasters),
dur=n(),
mean.Spikerate=sum(rasters)/dur*1000,
R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)))->
m
head(t)
t %>%
group_by(neuron,s,isfixation) %>%
mutate(meanfr=mean(sdf),
maxfr=max(sdf),
R.Hor=mean(rep),
R.Ver=mean(repV),
L.Hor=mean(lep),
L.Ver=mean(lepV),
mean.Verg.Angle=mean(verg.angle),
mean.Verg.Angle=replace(mean.Verg.Angle<0,NA),
max.Verg.Vel = max(verg.velocity),
max.Verg.Ang = max(verg.angle),
nspikes=sum(rasters),
dur=n(),
mean.Spikerate=sum(rasters)/dur*1000,
R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)))->
m
t %>%
group_by(neuron,s,isfixation) %>%
mutate(meanfr=mean(sdf),
maxfr=max(sdf),
R.Hor=mean(rep),
R.Ver=mean(repV),
L.Hor=mean(lep),
L.Ver=mean(lepV),
mean.Verg.Angle=mean(verg.angle),
# mean.Verg.Angle=replace(mean.Verg.Angle<0,NA),
max.Verg.Vel = max(verg.velocity),
max.Verg.Ang = max(verg.angle),
nspikes=sum(rasters),
dur=n(),
mean.Spikerate=sum(rasters)/dur*1000,
R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)))->
m
mutate(t,mean.Verg.Angle=replace(mean.Verg.Angle<0,NA))
mutate(t,mean.Verg.Angle=replace(mean.Verg.Angle<0,0))
mutate(t,mean.Verg.Angle=replace(mean.Verg.Angle<100,0))
mutate(t,mean.Verg.Angle=replace(mean.Verg.Angle>1,0))
?replace
mutate(t,mean.Verg.Angle=replace(mean.Verg.Angle > 1,0))
head(saccade.type)
t %>%
group_by(neuron,s,isfixation) %>%
mutate(meanfr=mean(sdf),
maxfr=max(sdf),
R.Hor=mean(rep),
R.Ver=mean(repV),
L.Hor=mean(lep),
L.Ver=mean(lepV),
mean.Verg.Angle=mean(verg.angle),
mean.Verg.Angle=replace(mean.Verg.Angle, mean.Verg.Angle<0, NA),
max.Verg.Vel = max(verg.velocity),
max.Verg.Ang = max(verg.angle),
nspikes=sum(rasters),
dur=n(),
mean.Spikerate=sum(rasters)/dur*1000,
R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)))->
m
m<-read.csv('allfiles-m.csv')
names(m)
head(m)
t%>%
group_by(neuron) %>%
#   mutate(s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2,100),
#          isfixation=s<0,
#          s=abs(s),
#          sdf=spikedensity(temp$rasters,sd=20)) %>%
filter(isfixation == F) %>%
group_by(neuron,s) %>%
summarize(dur=n(),
peak.R.H= maxabs(rev),
peak.R.V= maxabs(revV),
peak.L.H= maxabs(lev),
peak.L.V= maxabs(levV),
R.H.Amp=rep[n()]-rep[1],
L.H.Amp=lep[n()]-lep[1],
R.V.Amp=repV[n()]-repV[1],
L.V.Amp=lepV[n()]-lepV[1],
r.angle=atan2(R.V.Amp,R.H.Amp)*180/pi,
r.amp=sqrt(R.H.Amp^2+R.V.Amp^2),
nspikes=sum(rasters),
vect.amp= (sqrt(R.H.Amp^2+R.V.Amp^2)+sqrt(L.H.Amp^2+L.V.Amp^2))/2,
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp)),
verg.amp=verg.angle[n()]-verg.angle[1],
peak.verg.velocity= maxabs(verg.velocity),
min.verg.trans = min(verg.velocity),
max.verg.trans = max(verg.velocity),
maxfr=max(sdf),
counter=time-time[1],
sdf=sdf)%>%
group_by(neuron) %>%
mutate(saccade.type='version',
saccade.type=replace(saccade.type, verg.amp > 2,'convergence'),
saccade.type=replace(saccade.type, verg.amp < -2, 'divergence'))->
p
proc.time()
proc.time()
summaryforplot
t$neuron
unique(t$neuron)
'Bee-19' %in% t$neuron
'Bee-1' %in% t$neuron
unique(unique(t$neuron),unique(t$neuron))
tn<- c('Bee-01','Bee-02','Bee-03')
tno<- c('Bee-03','Bee-04')
tn %in% tno
newcells<- tn[!tn %in% tno]
newcells
newcells<- tn[!tn %in% c('hll')]
newcells
newcells<- tn[!tn %in% tn]
newcells
is.null(newcells)
length(newcells)
?write.csv
install.packages('knitr')
install.packages('dplyr')
install.packages(c('ggplot2','tidyr','relimpo','leaps','stringr'))
install.packages('rmarkdown')
getOption('repos')
install.packages('checkpoint')
checkpoint("2016-03-14")
library(checkpoint)
checkpoint("2016-03-14")
install.packages('relimpo')
install.packages('relaimpo')
install.packages('stringr')
system.time(read.csv('allfiles-p.csv'))
system.time(p<-read.csv('allfiles-p.csv'))
library(data.table)
install.packages('data.table')
library(data.table)
system.time(p<-fread('allfiles-p.csv',sep=','))
system.time(p<-fread('allfiles-p.csv',sep=',',showprogress=TRUE))
system.time(p<-fread('allfiles-p.csv',sep=',',showProgress=TRUE))
head(p)
pp<-as.data.frame(p)
head(pp)
pp<-pp[,-1]
head(pp)
saveRDS(pp,'allfiles-p')
p<-readRDS('allfiles-p.RDS')
View(p)
library(checkpoint)
library(checkpoint)
checkpoint('2016-03-14')
checkpoint
checkpoint()
path<- "C:/Users/setup/Desktop/NRTP Vergence/"
files <- list.files(path=path,pattern='*.csv')
files
names<-lapply(files, str_match(f,"(^[a-zA-Z]+)-([0-9]+)"))
library(dplyr)
names<-lapply(files, str_match(f,"(^[a-zA-Z]+)-([0-9]+)"))
library(stringr)
names<-lapply(files, str_match(f,"(^[a-zA-Z]+)-([0-9]+)"))
names<-lapply(files, str_match,"(^[a-zA-Z]+)-([0-9]+)"))
names<-lapply(files, str_match,"(^[a-zA-Z]+)-([0-9]+)")
names
head(names)
names[1]
names[2]
names[3]
names<-sapply(files, str_match,"(^[a-zA-Z]+)-([0-9]+)")
head(names)
?sapply
class(names)
nf<-as.data.frame(names)
head(nf)
nrow(nf)
names[1]
names[2]
names[3]
names[4]]
nrow(names)
size(names)
names[[2]]
names[[4]]
names[[5]]
names<-sapply(files, str_match,"(^[a-zA-Z]+)-([0-9]+)",USE.NAMES=FALSE)
names[1]
names[4]
names[5]
names[9]
names<-sapply(files, str_match,"(^[a-zA-Z]-[0-9]+)",USE.NAMES=FALSE)
names
names<-sapply(files, str_match,"(^[a-zA-Z]+-[0-9]+)",USE.NAMES=FALSE)
names
names<-sapply(files, str_match,"^[a-zA-Z]+-[0-9]+",USE.NAMES=FALSE)
names
names<-sapply(files, str_match,"^[a-zA-Z]+-[0-9]+")
names
head(r)
?saveRDS
r<-readRDS('NRTPr.RDS')
r$neuron
unique(r$neuron,names)
!(r$neuron %in% names)
names[!(r$neuron %in% names)]
xxx<- r$neuron[-2]
names[!(xxx %in% names)]
xxx
names[!(names %in% xxx)]
names[1]
files[!(names %in% xxx)]
f<-files[!(names %in% xxx)]
paste('c:/user',f)
loadedfiles<-lapply(paste(path,f),read.csv,sep='')
loadedfiles<-lapply(paste(path,f,sep=''),read.csv)
loadedfiles
head(loadedfiles[1])
head(loadedfiles[[1]])
?error
?err
warning('test message')
?warning
stop()
identical(r$neuron,f)
message('hello')
