return(ci)
}
tt<- ungroup(tt)
n<- unique(tt$neuron)
ci <- data.frame()
f<- "FRtd~R.P.Horizontal+L.P.Horizontal+R.V.Horizontal+L.V.Horizontal+R.P.Vertical+L.P.Vertical+R.V.Vertical+L.V.Vertical"
tmodel<-filter(tt,sdflag>10)
for (i in 1:length(n)){
tmodel %>%
filter(neuron==n[i]) %>%
rename(R.P.Horizontal=rep,L.P.Horizontal=lep,
R.V.Horizontal=rev,L.V.Horizontal=lev,
R.P.Vertical=repV,L.P.Vertical=lepV,
R.V.Vertical=revV,L.V.Vertical=levV,
FRtd=sdflag) %>%
bootci(n=1999,alpha=0.01,formula=f) ->
temp
temp$neuron<-n[i]
ci<-rbind(ci,temp)
}
ci %>%
mutate(m=(low+high)/2) %>%
filter(term != '(Intercept)') ->
pci
#   g<-ggplot(pci,aes(factor(term),m))
#
# g+geom_linerange(aes(ymin=low,ymax=high,color=neuron),size=2)+
#   facet_grid(neuron~.)+
#   geom_hline(x=0)+
#   coord_flip()
pci %>%
separate(term,c('Direction','PV','HV'),remove=FALSE) %>%
mutate(scale=9*as.numeric(PV=='V')+1,
low=low*scale, high=high*scale,m=m*scale) ->
ppci
g<-ggplot(ppci,aes(factor(term),m))
g+geom_linerange(aes(ymin=low,ymax=high,color=neuron),size=2)+
facet_grid(neuron~.)+
geom_hline(x=0)+
coord_flip()+
ylab('Coefficient: Velocity scaled by 10')
g+geom_linerange(aes(ymin=low,ymax=high,color=neuron),size=2)+
facet_grid(neuron~.)+
geom_hline(x=0)+
coord_flip()+
ylab('Coefficient: Velocity scaled by 10')
g+geom_linerange(aes(ymin=low,ymax=high,color=neuron),size=2)+
facet_grid(neuron~.)+
geom_hline(x=0)+
coord_flip()+
ylab('Coefficient: Velocity scaled by 10')+coord_trans(ytrans='log')
g+geom_linerange(aes(ymin=low,ymax=high,color=neuron),size=2)+
facet_grid(neuron~.)+
geom_hline(x=0)+
coord_flip()+
ylab('Coefficient: Velocity scaled by 10')+coord_trans(ytrans='sqrt')
g+geom_linerange(aes(ymin=low,ymax=high,color=neuron),size=2)+
facet_grid(neuron~.)+
geom_hline(x=0)+
coord_flip()+
ylab('Coefficient: Velocity scaled by 10')+coord_trans(xtrans='log')
g+geom_linerange(aes(ymin=low,ymax=high,color=neuron),size=2)+
facet_grid(neuron~.)+
geom_hline(x=0)+
coord_flip()+
ylab('Coefficient: Velocity scaled by 10')+coord_trans(ytrans='log10')
g+geom_linerange(aes(ymin=low,ymax=high,color=neuron),size=2)+
facet_grid(neuron~.)+
geom_hline(x=0)+
coord_flip()+
ylab('Coefficient: Velocity scaled by 10')+scale_x_log10()
g+geom_linerange(aes(ymin=low,ymax=high,color=neuron),size=2)+
facet_grid(neuron~.)+
geom_hline(x=0)+
coord_flip()+
ylab('Coefficient: Velocity scaled by 10')+scale_y_log10()
g+geom_linerange(aes(ymin=low,ymax=high,color=neuron),size=2)+
facet_grid(neuron~.)+
geom_hline(x=0)+
coord_flip()+
ylab('Coefficient: Velocity scaled by 10')+scale_y_sqrt()
head(tt)
p13<-filter(tt,neuron=="Patos-13")
head(p13)
g+geom_linerange(aes(ymin=low,ymax=high,color=neuron),size=2)+
facet_grid(neuron~.)+
geom_hline(x=0)+
coord_flip()+
ylab('Coefficient: Velocity scaled by 10')
g<-ggplot(p13,aes(factor(term),m))
g+geom_linerange(aes(ymin=low,ymax=high,color=neuron),size=2)+
facet_grid(neuron~.)+
geom_hline(x=0)+
coord_flip()+
ylab('Coefficient: Velocity scaled by 10')
ci13<-filter(ppci,neuron=="Patos13")
g<-ggplot(ci13,aes(factor(term),m))
g+geom_linerange(aes(ymin=low,ymax=high,color=neuron),size=2)+
facet_grid(neuron~.)+
geom_hline(x=0)+
coord_flip()+
ylab('Coefficient: Velocity scaled by 10')
head(ci13)
ci13<-filter(ppci,neuron=="Patos-13")
g<-ggplot(ci13,aes(factor(term),m))
g+geom_linerange(aes(ymin=low,ymax=high,color=neuron),size=2)+
facet_grid(neuron~.)+
geom_hline(x=0)+
coord_flip()+
ylab('Coefficient: Velocity scaled by 10')
m13<-lm("FRtd~R.P.Horizontal+L.P.Horizontal+R.V.Horizontal+L.V.Horizontal+R.P.Vertical+L.P.Vertical+R.V.Vertical+L.V.Vertical",p13)
head(p13)
m13<-lm("sdflag~rep+rev+repV+revV+lep+lev+lepV+levV",p13)
ggplot(p13,aes(sdflag))
ggplot(p13,aes(sdflag))+geom_area()
p13<-mutate(n=row_number)
p13<-mutate(n=row_number())
p13<-mutate(p13,n=row_number())
head(p13)
ggplot(p13,aes(n,sdflag))+geom_area()
ggplot(filter(p13,n<25000),aes(n,sdflag))+geom_area()
ggplot(filter(p13,n<10000),aes(n,sdflag))+geom_area()
p13<-mutate(p13,m=predict(m13))
head(p13)
ggplot(filter(p13,n<10000),aes(n,sdflag))+geom_area()+geom_line(aes(n,m),color="green")
summary(m13)
m13<-lm("sdflag~rep+lep+repV+lepV",p13)
p13<-mutate(p13,mp=predict(m13))
ggplot(filter(p13,n<10000),aes(n,sdflag))+geom_area()+geom_line(aes(n,m),color="green")+geom_line(aes(n,mp),color='red')
summary(mm13)
summary(m13
)
head(tmodel)
min(tmodel$sdf)
min(tmodel$sdflag)
max(tmodel$sdflag)
m13
mm13
mm13<-lm("sdflag~rep+lep+repV+lepV",p13)
m13<-lm("sdflag~rep+rev+repV+revV+lep+lev+lepV+levV",p13)
anova(mm13,m13)
summary(m13)
summary(mm13)
install.packages('relaimpo')
library(ralaimpo)
library(relaimpo)
b<-calc.relimp(mm13)
b
plot(b$lmb)
b<-calc.relimp(m13)
b
plot(b)
p14<-filter(tt,neuron=="Patos-14")
m14<-lm("sdflag~rep+rev+repV+revV+lep+lev+lepV+levV",p14)
plot(calc.relimp(m14))
summary(m14)
head(p14)
plot(p14$rev)
plot(p14$rev[1:1000])
plot(calc.relimp(m14))
b
plot(b)
attr(b)
b
methods(b)
b$lmg
plot(b$lmg)
qplot(b$lmg)
rownames(b)
b$1X
b$namen
qplot(namen,lmg,data=b)
qplot(b$namen,b$lmg)
qplot(factor(b$namen),b$lmg)
qplot(factor(b$namen),as.numeric(b$lmg))
qplot(as.factor(b$namen),as.numeric(b$lmg))
length(b$namen)
length(b$lmg)
qplot(b$namen[-1],b$lmg)
qplot(b$namen[-1],b$lmg,geom='bar')
qplot(b$namen[-1],b$lmg)
qplot(b$namen[-1],b$lmg)+geom_bar()
qplot(factor(b$namen[-1]),b$lmg)+geom_bar()
class(b$lmg)
bb<-data.frame(b$namen[-1],b$lmg)
head(bb)
names(bb)
class(b$namen)
b$namen
b$lmg
plot(b)
names(bb)<- c('metric','Response Variance')
names(bb)<- c('metric','RV')
qplot(metric,RV,data=bb)
qplot(metric,RV,data=bb)+geom_bar()
qplot(metric,RV,data=bb)+geom_bar(stat='identity')
head(tt)
tt %>%
group_by(neuron) %>%
summarize(b=calc.relimp(.)) ->
bb
head(bb)
tt %>%
group_by(neuron) %>%
summarize(b=calc.relimp(lm("sdflag~rep+rev+repV+revV+lep+lev+lepV+levV",.))) ->
bb
b=calc.relimp(lm("sdflag~rep+rev+repV+revV+lep+lev+lepV+levV",p13))
tt %>%
group_by(neuron) %>%
do(b=calc.relimp(lm("sdflag~rep+rev+repV+revV+lep+lev+lepV+levV",.))) ->
bb
head(bb)
plot(bb$b[1])
plot(bb$b[[1]])
plot(bb$b[[2]])
plot(bb$b[[3]])
length(bb)
nrow(bb)
title("Neuron")
xlab("test")
xlabel("test")
title("Neuronasdf")
title("xxxxx")
?title
title(main="hello")
plot(bb$b[[1]])
class(bb$b[[1]])
showMethods(bb$b[[1]])
Methods(bb$b[[1]])
methods(bb$b[[1]])
class(b)
methods(class=class(b))
show(b)
print(b)
methods(class=class(b))
coerce(b)
coerce(b,'matrix')
zzz<-plot(b)
class(zzz)
zzz
title(zzz)
zzz$title
title(sub='Patos13')
title(main ='Patos13')
mtext('Patos-13',side='right')
mtext('Patos-13',4)
plot(b)
plot(b)+mtext('hello',4)
methods(print)
print(b)
plot(b)
plot(b,'Hello')
plot(b,title='Hello')
plot(b,main ='Hello')
head(tt)
tt %>% group_by(s) %>% summarize(R.H.Amp=max(rep)-min(rep)) -> amp
head(amp)
head(amp,10)
tt %>% group_by(neuron,s) %>% summarize(R.H.Amp=max(rep)-min(rep)) -> amp
head(amp)
tail(amp)
tt %>% group_by(neuron,s) %>% summarize(R.H.Amp=rep[1]-rep[-1]) -> amp
tt$rep[1]
tt$rep[-1]
tt$rep[length(tt$rep)]
tt %>% group_by(neuron,s) %>% summarize(R.H.Amp=rep[1]-rep[length(rep)]) -> amp
head(amp,10)
min(amp$R.H.Amp)
max(amp$R.H.Amp)
end
end=100
end
tt %>%
group_by(neuron,s) %>%
summarize(R.H.Amp=rep[1]-rep[end],
L.H.Amp=lep[1]-lep[end],
R.V.Amp=repV[1]-repV[end],
L.V.Amp=lepV[1]-lepV[end]) ->
amp
head(amp,20)
end<-nrow(tt)
tt %>%
group_by(neuron,s) %>%
summarize(R.H.Amp=rep[1]-rep[end],
L.H.Amp=lep[1]-lep[end],
R.V.Amp=repV[1]-repV[end],
L.V.Amp=lepV[1]-lepV[end]) ->
amp
head(amp,20)
tt %>%
group_by(neuron,s) %>%
summarize(R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)) ->
amp
head(amp,20)
tt %>%
group_by(neuron,s) %>%
summarize(R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)) ->
amp
tt %>%
group_by(neuron,s) %>%
summarize(R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)]) ->
amp
head(amp,10)
ttamp<-left_join(tt,amp,by='s')
head(ttamp)
ttamp<-left_join(tt,amp,by=c('s','neuron'))
head(ttamp)
max(10,20,30,40)
tt %>%
group_by(neuron,s) %>%
summarize(R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp))) ->
amp
head(amp)
mutate(amp,disj=sign(R.H.Amp*L.H.Amp)<0 || sign(R.V.Amp*L.V.Amp)<0)
dj<-mutate(amp,disj=sign(R.H.Amp*L.H.Amp)<0)
head(dj)
dj<-mutate(amp,disjH=sign(R.H.Amp*L.H.Amp)<0,disjV=sign(R.V.Amp*L.V.Amp)<0)
head(dj)
dj<-mutate(amp,disjH=sign(R.H.Amp*L.H.Amp)<0,disjV=sign(R.V.Amp*L.V.Amp)<0,disjEither=disjH || disjV)
head(dj)
dj<-mutate(amp,disjH=sign(R.H.Amp*L.H.Amp)<0,disjV=sign(R.V.Amp*L.V.Amp)<0,disjEither=disjH | disjV)
head(dj)
tt %>%
group_by(neuron,s) %>%
summarize(R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp))) %>%
mutate(disjH=sign(R.H.Amp*L.H.Amp)<0,disjV=sign(R.V.Amp*L.V.Amp)<0,disjEither=disjH | disjV) ->
amp
head(amp)
length(filter(amp,maxamp>2))
head(tt)
library(ggplot2)
library(dplyr)
library(knitr)
library(tidyr)
library(broom)
library(grid)
library(relaimpo)
#load all the .csv files in the data folder, then add a column naming the neuron,
#using the file name as the default name, then put them all together in one long data frame
#path<-"~/GitHub/NPH-Analysis/practicedata/"
path<-"~/GitHub/NPH-Analysis/data/"
#path<-"~/GitHub/NPH-Analysis/testdata/"
files <- list.files(path=path,pattern='*.csv')
files<-files[grepl('Patos',files)] # just look at patos files
# files<-files[grepl('Bee',files)] # just look at bee files
t<-data.frame()
for (i in 1:length(files)) {
temp <- read.csv(paste(path,files[i],sep=''))
temp$neuron<-gsub('.csv','',files[i])
t <-rbind(t,temp)
}
findSaccades<-function(ev){
i<-which(abs(ev)>10) #find all the times when speed > threshold
sacoff<-which(diff(i)>15) #minimum duration of an accepted saccade
sacon<-c(1,sacoff+1) #first saccade
sacoff<-c(sacoff,length(i)) #end of last saccade
saccade.onset<-i[sacon] #get actual times
saccade.offset<-i[sacoff]
return(data.frame(saccade.onset,saccade.offset))
}
markSaccades<-function(ev){
#this function finds and marks saccades given a velocity input
stimes<-findSaccades(ev)
nsaccades=nrow(stimes)
#add 10ms buffer to saccade onset and offset
#extra code to make sure there is at least that much space in the data
buffer<- 15
if(stimes$saccade.onset[1]>buffer+1){
stimes$saccade.onset=stimes$saccade.onset-10
}else{
stimes$saccade.onset[2:nsaccades] = stimes$saccade.onset[2:nsaccades]-10
stimes$saccade.onset[1]=1
}
if (stimes$saccade.offset[nsaccades]+buffer<length(ev)){
stimes$saccade.offset=stimes$saccade.offset+buffer
}else{
stimes$saccade.offset[1:nsaccades-1]=stimes$saccade.offset[1:nsaccades-1]+buffer
stimes$saccade.offset[nsaccades]=length(ev)
}
s<-1:length(ev)*0
for (k in 1:nsaccades){
s[stimes$saccade.onset[k]:stimes$saccade.offset[k]]<-k
if(k>1){
s[stimes$saccade.offset[k-1]:stimes$saccade.onset[k]]<-(k*-1)
}
}
s[1:stimes$saccade.onset[1]]<- -1
s[stimes$saccade.offset[nrow(stimes)]:length(s)]<- (nrow(stimes)*-1)
return(s)
}
t %>%
mutate(s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2)) %>%
filter(s>0) %>%
mutate(sdflag=lag(sdf,50),time=row_number())->
tt
tt %>%
group_by(neuron,s) %>%
summarize(R.H.Amp=rep[1]-rep[length(rep)],
L.H.Amp=lep[1]-lep[length(lep)],
R.V.Amp=repV[1]-repV[length(repV)],
L.V.Amp=lepV[1]-lepV[length(lepV)],
maxamp=max(abs(R.H.Amp),abs(R.V.Amp),abs(L.H.Amp),abs(L.V.Amp))) %>%
mutate(disjH=sign(R.H.Amp*L.H.Amp)<0,disjV=sign(R.V.Amp*L.V.Amp)<0,disjEither=disjH | disjV) ->
amp
tt <-left_join(tt,amp,by=c('s','neuron'))
nDisjunctive<-nrow(filter(amp,maxamp>2 & disjEither))
nTotal<- nrow(filter(amp,maxamp>2))
?bic
?BIC
tt %>% filter(neuron=='Patos-1',maxamp>2,disjEither) %>% tmodel
tt %>% filter(neuron=='Patos-1',maxamp>2,disjEither) -> tmodel
head(tmodel)
m<-lm('sdflag ~ .',tmodel)
m<-lm('sdflag ~ rep',tmodel)
m
tmodel <- select(tmodel,rep,rev,repV,revV,lep,lev,lepV,levV,sdflag)
head(tmodel)
tm <- dplyr::select(tmodel,rep,rev,repV,revV,lep,lev,lepV,levV,sdflag)
head(tm)
m <-lm('sdflag~.',tm)
summary(m)
BIC(tm)
BIC(m)
head(tm)
select(tm,1:3,-1)
select(tm,1:3)
dplyr::select(tm,1:3,-1)
head(dplyr::select(tm,1:3,-1))
head(dplyr::select(tm,-1))
head(tm)
length(tm)
m<-list
m<-list()
tm <- dplyr::select(tmodel,rep,rev,repV,revV,lep,lev,lepV,levV,sdflag)
m<-list()
for (i in 1:(length(tm)-2)){
m[i]<-lm('sdflag~.',dplyr::select(tm,i:length(tm))
}
tm <- dplyr::select(tmodel,rep,rev,repV,revV,lep,lev,lepV,levV,sdflag)
m<-list()
for (i in 1:(length(tm)-2)){
m[i]<-lm('sdflag~.',dplyr::select(tm,i:length(tm)))
}
dplyr::select(tm,1:length(tm))
head(dplyr::select(tm,2:length(tm)))
head(dplyr::select(tm,3:length(tm)))
m<-lm('sdflag ~ rep',tmodel)
m<-lm('sdflag ~ .',tm)
m
AIC.BIC(m)
BIC(m)
AIC(m)
mp<-lm('sdflag ~ rep+lep+repV+lepV',tm)
BIC(mp)
ml<-lm('sdflag ~lep+lepV+lev+levV')
ml<-lm('sdflag ~lep+lepV+lev+levV',tm)
BIC(ml)
mr<-lm('sdflag ~rep+repV+rev+revV',tm)
BIC(mr)
mlp<-lm(sdflag~lep+lepV)
mlp<-lm(sdflag~lep+lepV,tm)
BIC(mlp)
mrp<-lm(sdflag~rep+repV,tm)
BIC(mrp)
install.packages('leaps')
m<-regsubsets(sdflag~.,tm)
library(leaps)
m<-regsubsets(sdflag~.,tm)
plot(m)
n#=$which
m
summary(m)
summary(m)$which
head(tm)
plot(m)
plot(m,method='r2')
plot(m,scale='r2')
plot(m,method='adjr2')
plot(m,scale='r2')
plot(m,scale=c('adjr2','bic')
)
plot(m,scale=c('adjr2','bic'))
plot(m)
plot(m,scale=c('adjr2','bic'))
plot(m)
plot(m,scale=c('adjr2','bic'))
plot(m,scale=c('adjr2','bic'),nbest=3)
coef(m)
class(m)
plot(m)
coefe(m,1:3)
coef(m,1:3)
coef(m,1:8)
coef(m,6)
vcov(m,6)
