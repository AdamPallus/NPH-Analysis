{
    "contents" : "---\ntitle: \"Bootstrap Fixations\"\nauthor: \"Adam\"\ndate: \"October 28, 2015\"\noutput: html_document\n---\n\nThe following analysis identifies periods of fixation and calculate the average eye position and firing rate during each fixation. Next, it performs a bootstrap analysis to find the confidence intervals of a linear model.\n\n\n```{r,message=FALSE}\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(tidyr)\nlibrary(broom)\nlibrary(grid)\n\n```\n\n```{r,cache=FALSE}\n#load all the .csv files in the data folder, then add a column naming the neuron, \n#using the file name as the default name, then put them all together in one long data frame\n\n#path<-\"~/GitHub/NPH-Analysis/practicedata/\"\npath<-\"~/GitHub/NPH-Analysis/data/\"\n#path<-\"~/GitHub/NPH-Analysis/testdata/\"\nfiles <- list.files(path=path,pattern='*.csv')\n# files<-files[grepl('Patos',files)] # just look at patos files\nfiles<-files[grepl('Bee',files)] # just look at bee files\nt<-data.frame()\nfor (i in 1:length(files)) {\n  temp <- read.csv(paste(path,files[i],sep=''))\n  temp$neuron<-gsub('.csv','',files[i])\n  t <-rbind(t,temp)\n}\n```\n\n```{r meanFixation}\n\nfindSaccades<-function(ev){\n  \n  i<-which(abs(ev)>10) #find all the times when speed > threshold\n  sacoff<-which(diff(i)>15) #minimum duration of an accepted saccade\n  sacon<-c(1,sacoff+1) #first saccade\n  sacoff<-c(sacoff,length(i)) #end of last saccade\n  saccade.onset<-i[sacon] #get actual times\n  saccade.offset<-i[sacoff] \n  return(data.frame(saccade.onset,saccade.offset))\n}\n\nmarkSaccades<-function(ev){\n  #this function finds and marks saccades given a velocity input\n  stimes<-findSaccades(ev)\n  \n  nsaccades=nrow(stimes)\n  \n  #add 10ms buffer to saccade onset and offset\n  #extra code to make sure there is at least that much space in the data\n  buffer<- 15\n  if(stimes$saccade.onset[1]>buffer+1){\n  stimes$saccade.onset=stimes$saccade.onset-10\n  }else{\n    stimes$saccade.onset[2:nsaccades] = stimes$saccade.onset[2:nsaccades]-10\n    stimes$saccade.onset[1]=1\n  }\n  if (stimes$saccade.offset[nsaccades]+buffer<length(ev)){\n    stimes$saccade.offset=stimes$saccade.offset+buffer\n  }else{\n    stimes$saccade.offset[1:nsaccades-1]=stimes$saccade.offset[1:nsaccades-1]+buffer\n    stimes$saccade.offset[nsaccades]=length(ev)\n  }\n    \n  s<-1:length(ev)*0\n  \n  for (k in 1:nsaccades){\n    s[stimes$saccade.onset[k]:stimes$saccade.offset[k]]<-k\n    if(k>1){\n      s[stimes$saccade.offset[k-1]:stimes$saccade.onset[k]]<-(k*-1)\n    }\n  }\n  s[1:stimes$saccade.onset[1]]<- -1\n  s[stimes$saccade.offset[nrow(stimes)]:length(s)]<- (nrow(stimes)*-1)\n  return(s)\n}\n```\n\n```{r plotfixations,fig.height=46,fig.width=6}\n#use the created functions to mark the saccades\nt %>%\n  mutate(s=markSaccades((sqrt(rev^2)+sqrt(revV^2))/2)) %>%\n  filter(s<0) %>% #just look at periods of fixation\n  group_by(s,neuron) %>%\n  summarize(R.Horizontal=mean(rep),L.Horizontal=mean(lep),R.Vertical=mean(repV),L.Vertical=mean(lepV),fr=mean(sdf)) %>%\n  group_by(neuron)%>%\n  mutate(maxFR=max(fr),scaledfr=fr/maxFR) ->\n  tt\nqplot(R.Horizontal,R.Vertical,color=scaledfr,size=8,data=tt)+facet_grid(neuron~.)\n```\n\n```{r plotregressions,fig.height=46,fig.width=10}\n\ntt %>%\n  gather(temp,P,3:6) %>%\n  separate(temp,c(\"Eye\",\"HV\")) ->\n  tc\n  qplot(P,scaledfr,data=tc,color=Eye,alpha=0.2)+facet_grid(neuron~HV)+\n    xlab('Eye Position (degrees)')+\n    ggtitle(\"Mean FR (scaled) during Fixation\")+\n    scale_color_manual(values=c('blue','red'))\n  \n  qplot(P,fr,data=tc,color=Eye,alpha=0.2)+facet_grid(neuron~HV)+\n    xlab('Eye Position (degrees)')+\n    ggtitle(\"Mean FR during Fixation\")+\n    scale_color_manual(values=c('blue','red'))\n```\n\nNow the boostrap analysis will begin here. We will probably have to use a loop because I haven't figured out how to get the boostrap.R. function to work for grouped data without losing the groups.\n\n```{r BoostrapTime}\n  bootci <- function(t,n=100,alpha=0.05,formula='sdf~rep+lep'){\n  t %>%\n    bootstrap(n) %>%\n    do(tidy(lm(formula,.))) %>%\n    group_by(term) %>%\n    summarize(low=quantile(estimate, alpha / 2),\n            high=quantile(estimate, 1 - alpha / 2)) ->\n    ci\n  return(ci)\n}\n  tt<- ungroup(tt)\n  n<- unique(tt$neuron)\n  ci <- data.frame()\n  for (i in 1:length(n)){\n    tt %>%\n      filter(neuron==n[i]) %>%\n      # bootci(n=1999,alpha=0.05,formula='fr~R.Horizontal+L.Horizontal+R.Vertical+L.Vertical') ->\n      bootci(n=1999,alpha=0.05,formula='fr~R.Horizontal+R.Vertical') ->\n      #bootci(n=1999,alpha=0.05,formula='fr~L.Horizontal+L.Vertical') ->\n      #bootci(n=1999,alpha=0.05,formula='fr~L.Horizontal+R.Horizontal') ->\n      temp\n      temp$neuron<-n[i]\n      ci<-rbind(ci,temp)\n      \n  }\n  \n```\n\n```{r paramstable}\n#ci %>% \n#  select(c(1,2,4)) %>% \n#  spread(term,low) -> \n#  c\n#ci %>% \n#  select(c(1,3,4)) %>% \n#  spread(term,high) -> \n#  ch\n#full_join(c,ch) %>%\n#  arrange(neuron) %>%\n#  mutate(angle=atan2(L.Vertical,L.Horizontal)*180/pi)->\n#  cij\n#kable(cij)\n\n```\n\n```{r plotci, fig.width=8,fig.height=30}\nci %>%\n  mutate(m=(low+high)/2) %>%\n  filter(term != '(Intercept)') %>%\n  ggplot(aes(factor(term),m)) ->\n  g\ng+geom_linerange(aes(ymin=low,ymax=high,color=neuron),size=2)+\n  facet_grid(neuron~.)+\n  geom_hline(x=0)+\n  coord_flip()\n\n```\n\n```{r directionPlot}\nci %>%\n  mutate(m=(low+high)/2) %>%\n  select(term,neuron,m) %>%\n  spread(term,m) ->\n  sci\n#   ggplot(sci) +\n#   geom_segment(aes(x=0,xend=L.Horizontal,y=0,yend=L.Vertical),size=1.0,arrow=arrow(20))+\n#     ylab('Left Eye Vertical') +xlab('Left Eye Horizontal')\n  ggplot(sci) +\n  geom_segment(aes(x=0,xend=R.Horizontal,y=0,yend=R.Vertical),size=1.0,arrow=arrow(20))+\n    ylab('Right Eye Vertical') +xlab('Right Eye Horizontal')\n  \n```\n\nNow replace params that have zero in the CI with zero\n\n```{r directionGood}\n  ci <- mutate(ci,m=(low+high)/2,bad=((low*high)<0))\n  ci$m[ci$bad]=0\n  ci %>%\n    select(term,neuron,m) %>%\n    spread(term,m) ->\n    scigood\n#    ggplot(scigood) +\n#     geom_segment(aes(x=0,xend=L.Horizontal,y=0,yend=L.Vertical),size=1.0,arrow=arrow(20))+\n#     ylab('Left Eye Vertical') +xlab('Left Eye Horizontal')+ggtitle('Significant Parameters')\n  ggplot(scigood) +\n  geom_segment(aes(x=0,xend=R.Horizontal,y=0,yend=R.Vertical),size=1.0,arrow=arrow(20))+\n    ylab('Right Eye Vertical') +xlab('Right Eye Horizontal')+ggtitle('Significant Paramters')\n```\n\nNext, we will identify cells with and without overlap in the CI between the parameters for each eye. \n(in progress)\nNext, we will plot the strabismus angle versus firing rate\n\n```{r strabismusangle,fig.width=8,fig.height=40}\n#   tt %>%\n#     mutate(strab=R.Horizontal-L.Horizontal,dvd=R.Vertical-L.Vertical) ->\n#     tt\n#   strabangle<-ggplot(tt,aes(strab,fr))\n#   strabangle+geom_point()+facet_grid(neuron~.)+stat_smooth(method='lm')+\n#     xlab('Strabismus Angle')+ggtitle('Strabismus Angle')\n#   \n```\n```{r dvdplot,fig.width=8,fig.height=40}\n\n#   dvdplot<-ggplot(tt,aes(dvd,fr))\n#   dvdplot+geom_point()+facet_grid(neuron~.)+stat_smooth(method='lm')+\n#     xlab('DVD: Right minus Left')+ggtitle('DVD')\n#   \n```\n\n```{r cyclopeanplot, fig.width=8,fig.height=40}\n#   tt %>%\n#     mutate(C.Horizontal=(L.Horizontal+R.Horizontal)/2,C.Vertical=(L.Vertical+R.Vertical)/2) %>%\n#     gather(HV,position,12:13) ->\n#     tc\n#   cycplot<- ggplot(tc,aes(position,fr))\n#   cycplot+geom_point()+facet_grid(neuron~HV)\n```",
    "created" : 1446065481254.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "662933434",
    "id" : "B9F3870B",
    "lastKnownWriteTime" : 1446500986,
    "path" : "~/GitHub/NPH-Analysis/PlottingNPH/bootstrapfixations.Rmd",
    "project_path" : "bootstrapfixations.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_markdown"
}